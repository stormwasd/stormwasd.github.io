<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-02T09:47:06.885Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第14章-页面智能解析</title>
    <link href="http://example.com/2022/03/02/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC14%E7%AB%A0-%E9%A1%B5%E9%9D%A2%E6%99%BA%E8%83%BD%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/03/02/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC14%E7%AB%A0-%E9%A1%B5%E9%9D%A2%E6%99%BA%E8%83%BD%E8%A7%A3%E6%9E%90/</id>
    <published>2022-03-02T08:19:30.000Z</published>
    <updated>2022-03-02T09:47:06.885Z</updated>
    
    <content type="html"><![CDATA[<p>在前面所讲的内容中，解析页面利用的都是规制匹配，这种方式可能需要借助浏览器找到最佳的Selector、Xpath，甚至需要正则表达式辅助提取细节，同时利用Beautiful Soup、pyquery、Re等库和解析内容；在一般情况下，这么做是没有问题的</p><p>但如果切换了场景，例如分析舆情，就需要爬取成千上万个新闻网站，把这些网站上的新闻文章都爬取下来，包括了标题、正文、发布时间等，我们会发现不同新闻网站的页面差别非常大，标题、正文、发布时间对应的正则表达式、Selector、Xpath等各不相同；这时如果手动针对每一个网站写正则表达式、Selector、Xpath等，那工作量就会非常大；如果配置不当，还会产生解析错误的问题；例如正则表达式在某些情况下就无法匹配，Selector、Xpath编写错误或者提取不全；另外，如果页面突然改版了，之前配置的规制就可能无法使用了，这也是一个非常大的隐患</p><p>目前有一中更智能的方法可以帮助我们解析出网站内的新闻列表、标题、正文、发布时间等，用起来很方便；但内容的爬取过程毕竟是用算法实现的，所以正确率达不到100%，而且即便是人工写出来的正则表达式、Selector、Xpath，也难免会有不兼容和错误的情况，因此在能容忍一定错误的情况下，用比较智能的解析方案爬取页面是明智的</p><h3 id="页面智能解析简介"><a href="#页面智能解析简介" class="headerlink" title="页面智能解析简介"></a>页面智能解析简介</h3><p>简而言之，页面的智能解析就是利用算法从页面的HTML代码中提取想要的内容，算法会自动计算出目标内容在代码中的位置并将它们提取出来</p><h4 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h4><p>我们以一篇新闻的预览页面为例，这里就不展示图片了，然后我们如果是Safari浏览器就会有个阅读模式，发现广告啥的都没了，这是怎么做到的？难道是提前针对这个页面写好了提取规则了嘛，当然不可能，其实是阅读模式内置了一些页面解析算法，可以自动抽出并呈现页面中的标题</p><h4 id="页面的智能解析"><a href="#页面的智能解析" class="headerlink" title="页面的智能解析"></a>页面的智能解析</h4><p>所谓的页面智能解析，就是不需要再专门写提取规则，而是利用算法直接计算页面中特定元素的位置和提取路径；针对我们的需求，可以通过算法计算出新闻标题是什么，正文应该在哪个区域，发布时间是什么时候</p><p>其实智能解析操作起来非常难，人在看到网页上的一篇文章时，可以迅速找到它的标题、正文、发布时间、广告位、导航栏等；但把这篇文章放在机器面前，机器面对的仅仅是一堆HTML代码，那怎么做到智能提取呢，其中融合了多方面的信息和规律</p><ul><li>标题: 其字号一般比较大，长度一般介于1句话和两句话之间，位置一般在页面的最上端，且大多数和时候和title节点中的内容一致</li><li>正文: 其内容一般最多，且包含多个p标签，或者img标签，宽度一般占页面的三分之二，文本密度(字数除以标签数量)比较大</li><li>时间: 不同语言的页面中显示的时间格式可能不同，比如有些是<code>2022-3-2</code>，然后有些是<code>2022/3/2</code>但是格式的种类是有限的，可以通过特定的模式识别</li><li>广告: 其标签一般会带有ads字样，另外大部分广告会在页面顶部或者页面底部或者页面两侧，并包含一些特定的外链内容</li></ul><p>所以说页面中的内容对应的节点是有一定特征的，包括节点位置、节点大小、节点标签，节点内容、节点文本密度等，智能提取除了利用这些特征，在很多情况下还需要，借助视觉特征和文本特征，因此其中结合了算法计算，视觉处理等多方面内容</p><h4 id="业界进展"><a href="#业界进展" class="headerlink" title="业界进展"></a>业界进展</h4><p>其实，工业界已经有了落地的智能解析算法应用，例如Diffbot、Embedly等，目前，Diffbot的提取效果算是比较领先的，其官方曾做过一个评测，使用不同的算法依次提取Google新闻上的一些文章的标题和文本，然后与真实标注的内容进行比较，比较指标就是文字的正确率和召回率，以及根据二者计算出的F1分数，结果如下:</p><ul><li>正确率: 0.968</li><li>召回率: 0.978</li><li>F1: 0.971</li></ul><p>可以发现，对于google新闻的这些数据，Diffbot大约能达到97%的正确率，效果还算不错</p><p>但是Diffbot的算法并没有开源，只是以商业化API的形式售卖，我目前没有找到介绍其具体算法的论文，不过不妨碍拿它做案例，可以稍微体会一下智能解析算法达到的效果</p><h4 id="Diffbot"><a href="#Diffbot" class="headerlink" title="Diffbot"></a>Diffbot</h4><p>打开Diffbot的官网: <a class="link"   href="https://www.diffbot.com/%EF%BC%8C%E9%A6%96%E5%85%88%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E4%BC%9A%E6%9C%8915%E5%A4%A9%E7%9A%84%E5%85%8D%E8%B4%B9%E8%AF%95%E7%94%A8%E6%9C%9F%EF%BC%8C%E6%B3%A8%E5%86%8C%E4%B9%8B%E5%90%8E%E4%BC%9A%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AADeveloper" >https://www.diffbot.com/，首先注册一个账号，会有15天的免费试用期，注册之后会获得一个Developer<i class="fas fa-external-link-alt"></i></a> Token，这就是使用Diffbot接口服务的凭证</p><p>接下来切换到测试页面(<a class="link"   href="https://ww.diffbot.com/dev/home/)%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8BDiffbot%E7%9A%84%E8%A7%A3%E6%9E%90%E6%95%88%E6%9E%9C%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E9%80%89%E6%8B%A9%E7%9A%84%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2%E6%98%AF%EF%BC%8C%E5%A1%AB%E5%85%A5%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5%EF%BC%8CAPI%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9&quot;Article" >https://ww.diffbot.com/dev/home/)，测试一下Diffbot的解析效果，这里我们选择的测试页面是，填入页面链接，API类型选择&quot;Article<i class="fas fa-external-link-alt"></i></a> API”，然后点击“Test Drive”按钮，就会出现对测试页面进行解析的结果，如下图所示:</p><p>这里在注册中出现了问题，注册的时候要work email</p><p>这里推荐一篇文章，也是关于Diffbot智能解析的: <a class="link"   href="https://blog.csdn.net/qiulin_wu/article/details/106278690" >https://blog.csdn.net/qiulin_wu/article/details/106278690<i class="fas fa-external-link-alt"></i></a></p><p>下面的内容太过于深奥，就暂时不予展示了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在前面所讲的内容中，解析页面利用的都是规制匹配，这种方式可能需要借助浏览器找到最佳的Selector、Xpath，甚至需要正则表达式辅助提取细节，同时利用Beautiful Soup、pyquery、Re等库和解析内容；在一般情况下，这么做是没有问题的&lt;/p&gt;
&lt;p&gt;但如果</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈一下我在我的小服务器上安装GitLab的坎坷历程</title>
    <link href="http://example.com/2022/02/25/%E6%B5%85%E8%B0%88%E4%B8%80%E4%B8%8B%E6%88%91%E5%9C%A8%E6%88%91%E7%9A%84%E5%B0%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85GitLab%E7%9A%84%E5%9D%8E%E5%9D%B7%E5%8E%86%E7%A8%8B/"/>
    <id>http://example.com/2022/02/25/%E6%B5%85%E8%B0%88%E4%B8%80%E4%B8%8B%E6%88%91%E5%9C%A8%E6%88%91%E7%9A%84%E5%B0%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85GitLab%E7%9A%84%E5%9D%8E%E5%9D%B7%E5%8E%86%E7%A8%8B/</id>
    <published>2022-02-25T07:36:30.000Z</published>
    <updated>2022-02-25T08:51:22.046Z</updated>
    
    <content type="html"><![CDATA[<p>云服务器系统: ubuntu18.04</p><p>云服务器配置:1核2G+50G(建议这个配置的配置下虚拟内存，详情点击<a class="link"   href="http://kest.club/2022/02/25/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/" >这里<i class="fas fa-external-link-alt"></i></a>查看)</p><p>首先我的服务器之前是安装过Docker的，所以我才决定用Docker来安装GitLab，如果还没安装Docker，请点击<a class="link"   href="https://blog.csdn.net/tlojy/article/details/83653246" >这里<i class="fas fa-external-link-alt"></i></a>跳转，先安装Docker</p><h4 id="关于GitLab版本的介绍"><a href="#关于GitLab版本的介绍" class="headerlink" title="关于GitLab版本的介绍"></a>关于GitLab版本的介绍</h4><p>GitLab有两个版本:</p><ul><li>Community Edition 社区版</li><li>Enterprise Edition 企业版，企业版比社区版功能更丰富，但需要授权码，如果没有授权码的情况下使用企业版相当于使用社区版</li></ul><h4 id="GitLab安装-以企业版为例"><a href="#GitLab安装-以企业版为例" class="headerlink" title="GitLab安装(以企业版为例)"></a>GitLab安装(以企业版为例)</h4><p>我们执行以下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach --hostname gitlab-server --publish <span class="number">9090</span>:<span class="number">9090</span> --publish <span class="number">8022</span>:<span class="number">22</span> --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure><p>如果你的终端显示没有权限，那就在命令的最开头加一个sudo，或者直接使用su命令然后输入root用户密码直接切换成root用户，如果你想以普通用户运行docker命令，那就需要将此普通用户加入到docker组中，使用以下命令将普通用户加入到docker组:(这里以test用户为例)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a test docker</span><br></pre></td></tr></table></figure><p>然后我们来看看上面这一长串命令的各参数以及对应的值是啥意思:</p><p><a href="https://imgtu.com/i/bA4mQg"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/25/bA4mQg.png"                      alt="bA4mQg.png"                ></a></p><p>这里有两个<code>--publish</code>参数，第一个是配置http的访问端口，这里我两个都配置的是9090端口，前一个9090代表云服务器的端口，后一个9090代表docker容器的端口，这两个端口是对接的，也就是说我们访问云服务的9090端口，就会跳进docker容器中的9090端口进行访问http服务，如果这个端口被占用了，那也可以设定其他的，总之就是设置你想以哪个端口访问docker容器中的GitLab，这两个端口都可随意设置，只要端口不被其他服务占用即可<br>第二个<code>--publish</code>参数那就是设置ssh的</p><p>然后我们还要配置下gitlab.rb这个配置文件，用以下命令进入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /srv/gitlab/config/gitlab.rb</span><br></pre></td></tr></table></figure><ul><li><p>设置external_url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GitLab URL</span></span><br><span class="line"><span class="comment">##! URL on which GitLab will be reachable.</span></span><br><span class="line"><span class="comment">##! For more details on configuring external_url see:</span></span><br><span class="line"><span class="comment">##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab</span></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.199.175:9090&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>设置ssh_port</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### GitLab Shell settings for GitLab</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = <span class="number">8022</span></span><br></pre></td></tr></table></figure></li></ul><p>以上external_url和ssh_port可能不好定位，如果一个个找那就是考验我们的眼睛，我们可以用vi或者vim的查看功能，输入<code>:</code>，然后跟上一个<code>/</code>再跟上你要搜索的字符串，如果有很多个的话使用<code>n</code>键定位到下一个，只有一个的话vim会提示已经到底了并且再继续按<code>n</code>键还是定位的同一个</p><p><strong>插一句</strong>: 我之前在docker上尝试了好多次然后到后面使用<code>docker ps</code>命令后面都提示<code>unhealthy</code>，这令我很苦恼，要不我为啥说坎坷呢，我查阅资料说在gitlab.rb这个配置文件中要把<code>worker_process = 2</code>这个配置项解除注释，或者改为<code>worker_process = 1</code>，后面我发现容器状态变为<code>healthy</code>了，可能是因为我改了这个叭</p><p>然后我们就可以重启GitLab容器使得设置生效了，使用以下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker restart gitlab</span><br></pre></td></tr></table></figure><p>这个重启的过程稍微有点漫长，我们可以使用<code>docker ps</code>命令来查看容器的状态，如果显示<code>starting</code>那就是还在启动中，显示<code>healthy</code>那就是启动成功，若启动成功，我们就可以在浏览器中以<code>http://云服务器地址:9090</code>来访问GitLab了，这个时候就会要我们输入用户名和密码，在一个空的GitLab中，有一个初始用户叫<code>root</code>，但是我不知道密码啊，下面我们来看看如何设置密码</p><h4 id="设置默认密码"><a href="#设置默认密码" class="headerlink" title="设置默认密码"></a>设置默认密码</h4><ul><li><p>查看容器名称，其实容器名称我们在刚开始的一大段命令中就以<code>--name</code>指定了，如果记不住的话那就用以下命令查看下也行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li><li><p>进入GitLab容器(这里以gitlab容器为例)，这个命令其实就是进入到了对应的主机，这里就是进入了gitlab-server这个主机，因为上面指定了主机名，输入<code>exit</code>便可返回宿主机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab bash</span><br></pre></td></tr></table></figure></li><li><p>启动Ruby on Rails控制台(这个过程要稍微等一下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rails console -e production</span><br></pre></td></tr></table></figure></li><li><p>搜索用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.where(<span class="built_in">id</span>: <span class="number">1</span>).first</span><br></pre></td></tr></table></figure><p>这个id:1是从哪儿来的呢，这里有有个小技巧，我们访问这个形式的链接就会返回以下结果:</p><p>链接示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">175.24</span><span class="number">.172</span><span class="number">.64</span>:<span class="number">9090</span>/api/v4/users?username=root</span><br></pre></td></tr></table></figure><p>返回结果示例:</p><p><a href="https://imgtu.com/i/bAbm4A"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/25/bAbm4A.png"                      alt="bAbm4A.png"                ></a></p><p>从上图中我们就得到了root用户的id</p></li><li><p>更换密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.password = <span class="string">&#x27;xxxxxx&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>确认更换密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.password_confirmation = <span class="string">&#x27;xxxxxx&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.save!</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;云服务器系统: ubuntu18.04&lt;/p&gt;
&lt;p&gt;云服务器配置:1核2G+50G(建议这个配置的配置下虚拟内存，详情点击&lt;a class=&quot;link&quot;   href=&quot;http://kest.club/2022/02/25/%E8%85%BE%E8%AE%AF%E4%B</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>腾讯云服务器添加虚拟内存</title>
    <link href="http://example.com/2022/02/25/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>http://example.com/2022/02/25/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</id>
    <published>2022-02-25T02:49:30.000Z</published>
    <updated>2022-02-25T03:55:44.054Z</updated>
    
    <content type="html"><![CDATA[<p>我的小服务器是1核2G然后加50G的，这样有时候在上面运行服务就有点卡顿，特别是运行了Gitlab之后，下面我们来看看如何添加虚拟内存</p><h4 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h4><p>用<code>free</code>命令查看内存使用情况，我们会发现swap分区大小为0，这说明原来腾讯云服务器默认是没有划分swap分区的，所以由于我的服务器物理内存本身就很少，而且又没设置<a class="link"   href="https://so.csdn.net/so/search?q=swap&spm=1001.2101.3001.7020" >swap<i class="fas fa-external-link-alt"></i></a>分区，运行效果可想而知，稍有点并发量、或者恶意用户探测访问等，网站就很容易卡壳了</p><h4 id="swap的作用"><a href="#swap的作用" class="headerlink" title="swap的作用"></a>swap的作用</h4><p>swap是用来做<a class="link"   href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020" >虚拟内存<i class="fas fa-external-link-alt"></i></a>的。虽然swap无法代替物理内存，但不可缺少</p><p>swap分区作用:当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换</p><h4 id="创建swap的两种方式"><a href="#创建swap的两种方式" class="headerlink" title="创建swap的两种方式"></a>创建swap的两种方式</h4><ol><li>建立一个swap分区</li><li>创建一个swap交换文件</li></ol><p>运行速度: &gt; swap分区 &gt; swap文件</p><p>这里我不用建立分区这个方法，如果你是以下情况我也不建议:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当你的数据盘已经装了很多内容，不方便重新规划的话，也只好使用swap文件了。像我由于只有一块磁盘，而且磁盘已经装了不少内容，所以就没有选择磁盘格式化，而是选择创建swap文件。</span><br></pre></td></tr></table></figure><p>下面介绍创建swap文件的方法:</p><h4 id="创建swap文件"><a href="#创建swap文件" class="headerlink" title="创建swap文件"></a>创建swap文件</h4><h5 id="定义swap的大小及位置"><a href="#定义swap的大小及位置" class="headerlink" title="定义swap的大小及位置"></a>定义swap的大小及位置</h5><p>首先，选择你swap文件要放置的位置，比如直接在根目录/ 下创建或者选择一个目录，如/opt。比如我直接在根目录下创建，然后设置swap分区的名称为swapfile</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1k count=<span class="number">4096000</span></span><br></pre></td></tr></table></figure><p>上面swapfile为你创建swap文件的名称，你可以根据需要改成你自己的名称，如bs 即blocksizes，每个块大小为1k;count=4096000,总大小为4G的文件。因为建立swap分区大小的标准一般为物理内存的两倍，而我的内存是2G，所以我选择swap文件大小为4G，当然，也要考虑你硬盘剩余容量的大小。我的硬盘还剩30G，所以再划分4G给swap文件绰绰有余。如果你的内存是0.5G，那么count大小可以选择1024000(1G)</p><h5 id="建立swap"><a href="#建立swap" class="headerlink" title="建立swap"></a>建立swap</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /swapfile</span><br></pre></td></tr></table></figure><h5 id="启动swap"><a href="#启动swap" class="headerlink" title="启动swap"></a>启动swap</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /swapfile</span><br></pre></td></tr></table></figure><h5 id="检查是否正确"><a href="#检查是否正确" class="headerlink" title="检查是否正确"></a>检查是否正确</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon -s</span><br></pre></td></tr></table></figure><p>以上命令能看到到swap总量大小然后使用了多少</p><h5 id="设置开机自启swap文件"><a href="#设置开机自启swap文件" class="headerlink" title="设置开机自启swap文件"></a>设置开机自启swap文件</h5><p>原理:</p><p>修改 <strong>/etc/fstab</strong> 使其启动时自动mount<br>添加方法如下:</p><ul><li><p>先赋予**/etc/fstab**修改权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">777</span> /etc/fstab</span><br></pre></td></tr></table></figure></li><li><p>然后添加语句:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;/swapfile swap swap defaults 0 0&quot;</span> &gt;&gt;/etc/fstab</span><br></pre></td></tr></table></figure><p>这里注意: /swapfile 路径可以修改,可以根据创建的swap文件具体路径来配置</p></li></ul><h4 id="删除swap交换文件"><a href="#删除swap交换文件" class="headerlink" title="删除swap交换文件"></a>删除swap交换文件</h4><p>如果不再需要swap，可以清理该文件: <code>swapoff /swapfile</code></p><p>以上内容参考自: <a class="link"   href="https://blog.csdn.net/qq_29856169/article/details/115430525" >https://blog.csdn.net/qq_29856169/article/details/115430525<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的小服务器是1核2G然后加50G的，这样有时候在上面运行服务就有点卡顿，特别是运行了Gitlab之后，下面我们来看看如何添加虚拟内存&lt;/p&gt;
&lt;h4 id=&quot;查看内存使用情况&quot;&gt;&lt;a href=&quot;#查看内存使用情况&quot; class=&quot;headerlink&quot; title=&quot;查</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-2-24使用到的Linux命令</title>
    <link href="http://example.com/2022/02/24/2022-2-24%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84Linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/02/24/2022-2-24%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84Linux%E5%91%BD%E4%BB%A4/</id>
    <published>2022-02-24T03:20:30.000Z</published>
    <updated>2022-02-24T10:58:43.559Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>ubuntu删除用户:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel test </span><br><span class="line">cd /home/</span><br><span class="line">sudo rm -r test</span><br></pre></td></tr></table></figure><p>如果提示tese is a directory，那就使用以下命令递归删除此文件夹:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf test</span><br></pre></td></tr></table></figure></li></ol><p>​        删除单个文件可以使用<code>sudo rm -r test</code>，如果是文件夹那就需要递归删除了</p><p>​        这里做个解释:</p><p>​        -r 就是向下递归，不管有多少级目录，一并删除</p><p>​        -f 就是直接强行删除，不作任何提示的意思</p><ol start="2"><li><p>ubuntu添加用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser test</span><br></pre></td></tr></table></figure><p>然后后面会要求输入密码和确认密码，在接着什么work/home phone都可以直接enter</p></li><li><p>ubuntu修改主机名</p><ul><li><p>修改hostname文件，这里修改为robot-home:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/hostname</span><br></pre></td></tr></table></figure></li><li><p>修改hosts文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/hosts</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看某进程，这里以gitlab为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep gitlab</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep gitlab</span><br></pre></td></tr></table></figure></li><li><p>杀掉某个进程:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -<span class="number">9</span> <span class="number">9527</span>    <span class="comment">##(-9为强制终止，9527为进程id)</span></span><br></pre></td></tr></table></figure></li><li><p>删除所有包含xxx的文件，这里以gitlab为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name *gitlab* | xargs rm -rf</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p>然后:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name *gitlab* | xargs rm -rf</span><br></pre></td></tr></table></figure></li><li><p>在没有运行image之前，删除docker中的image:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi tagid</span><br></pre></td></tr></table></figure></li><li><p>如果是已经运行了image的，那就意味着已经生成了container，那我们可以这么操作:</p><p>首先我们要找到对应的containerid，用如下命令查看:</p><p>docker ps是查看目前在运行的container，docker ps -a是查看所有的，包括了停止的container也会展示出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>我们要操作的container必须先将它关闭再删除，所以我们先使用下面的命令关闭:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 117843ade696</span><br></pre></td></tr></table></figure><p>然后用rm命令删除container:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm containerid</span><br></pre></td></tr></table></figure><p>我们可以确认下，用<code>docker images</code>来查看对应image是否已被删除</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ubuntu删除用户:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu16安装Jenkins</title>
    <link href="http://example.com/2022/02/23/ubuntu16%E5%AE%89%E8%A3%85Jenkins/"/>
    <id>http://example.com/2022/02/23/ubuntu16%E5%AE%89%E8%A3%85Jenkins/</id>
    <published>2022-02-23T02:21:00.000Z</published>
    <updated>2022-02-23T03:24:15.987Z</updated>
    
    <content type="html"><![CDATA[<p>下面我们将在云服务器上安装Jenkins</p><p>首先我们看看什么是Jenkins以及他能做什么</p><h3 id="什么是Jenkins"><a href="#什么是Jenkins" class="headerlink" title="什么是Jenkins"></a>什么是Jenkins</h3><p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle</p><h3 id="Jenkins能做什么"><a href="#Jenkins能做什么" class="headerlink" title="Jenkins能做什么"></a>Jenkins能做什么</h3><p>首先，<a class="link"   href="https://so.csdn.net/so/search?q=Jenkins&spm=1001.2101.3001.7020" >Jenkins<i class="fas fa-external-link-alt"></i></a>可以很方便的在我们的项目中帮助我们去部署、打包项目，在开发过程中避免了繁琐的手动打包步骤，只要我们把项目部署到Jenkins中，然后添加上一些列的脚本，就能帮助我们很快的完成打包工作，并且它与版本管理工具Svn、Git等兼容</p><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ul><li><p> 一个安装有ubuntu16.04或者ubuntu18.04系统的服务器</p></li><li><p>最小推荐配置</p><ul><li>Java8(JRE或JDK)</li><li>256MB可用内存</li><li>1GB+可用磁盘空间</li></ul></li><li><p>推荐配置小团队</p><ul><li>java8</li><li>1GB+内存</li><li>50GB+可用磁盘空间</li></ul></li><li><p>安装Java SDK，也就是Java软件开发工具包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-<span class="number">8</span>-jdk</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><p>包含在默认Ubuntu软件包中的Jenkins版本往往落后于项目本身的最新版本。 为了利用最新的修复和功能，我们将使用项目维护的软件包来安装Jenkins</p><p>首先，我们将存储库密钥添加到系统:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>添加密钥后，系统将返回<code>OK</code> 。 接下来，我们将Debian包存储库地址附加到服务器的<code>sources.list</code> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#x27;</span></span><br></pre></td></tr></table></figure><p>当这两个都到位时，我们将运行<code>update</code> ，以便<code>apt-get</code>将使用新的存储库:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>最后，我们将安装Jenkins及其依赖项，包括Java:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure><p>现在Jenkins及其依赖项已经到位，我们将启动Jenkins服务器</p><h3 id="开始Jenkins"><a href="#开始Jenkins" class="headerlink" title="开始Jenkins"></a>开始Jenkins</h3><p>使用<code>systemctl</code>我们将启动Jenkins:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start jenkins</span><br></pre></td></tr></table></figure><p>由于<code>systemctl</code>不显示输出，我们将使用其<code>status</code>命令来验证它是否成功启动:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status jenkins</span><br></pre></td></tr></table></figure><p>如果一切顺利，输出的开始应显示服务处于活动状态，并配置为启动时启动:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">● jenkins.service - LSB: Start Jenkins at boot time</span><br><span class="line">  Loaded: loaded (/etc/init.d/jenkins; bad; vendor preset: enabled)</span><br><span class="line">  Active:active (exited) since Thu <span class="number">2017</span>-04-<span class="number">20</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">13</span> UTC; 2<span class="built_in">min</span> 7s ago</span><br><span class="line">    Docs: man:systemd-sysv-generator(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>现在Jenkins正在运行，我们将调整防火墙规则，以便我们可以从网络浏览器到达Jenkins以完成初始设置</p><h3 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h3><p>默认情况下，Jenkins在端口8080上运行，因此我们将在云服务器的防火墙中添加规则，打开8080端口，如果8080端口已被占用，我们可以修改Jenkins的端口，点击<a class="link"   href="https://blog.csdn.net/wudinaniya/article/details/97628477" >此处<i class="fas fa-external-link-alt"></i></a>跳转查看</p><p><a href="https://imgtu.com/i/b9EzhF"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/b9EzhF.png"                      alt="b9EzhF.png"                ></a></p><p>现在，Jenkins已安装，防火墙允许我们访问它，我们可以完成初始设置</p><h3 id="设置Jenkins"><a href="#设置Jenkins" class="headerlink" title="设置Jenkins"></a>设置Jenkins</h3><p>通过以上设置，我们可以使用服务器域名或IP地址访问Jenkins，比如: <code>http://192.168.2.3:8080</code></p><p>访问网址之后，我们应该看到”Unlock Jenkins”屏幕:</p><p><a href="https://imgtu.com/i/b9VyNT"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/b9VyNT.png"                      alt="b9VyNT.png"                ></a></p><p>复制以上文件路径，我们将在终端中使用<code>cat</code>命令查看密码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>我们将从终端复制32个字符的字母数字密码，并将其粘贴到“管理员密码”字段中，然后单击“继续”。 下一个屏幕提供安装建议的插件或选择特定插件的选项:</p><p><a href="https://imgtu.com/i/b9ZPPS"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/b9ZPPS.png"                      alt="b9ZPPS.png"                ></a></p><p>我们将点击“安装建议的插件”选项，这将立即开始下载以及安装:</p><p><a href="https://imgtu.com/i/b9Z1xJ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/b9Z1xJ.png"                      alt="b9Z1xJ.png"                ></a></p><p>安装完成后，系统将提示您设置第一个管理用户；可以跳过此步骤，并点击右下方的<code>Continue as admin</code>继续，但是我们将花一点时间创建用户:</p><p>需要注意的是，此时Jenkins默认未加密，因此使用此表单提交的数据不受保护；这个时候我们可以按照指南<a class="link"   href="http://www.howtoing.com/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy/" >如何使用Nginx反向代理将SSL配置为Jenkins<i class="fas fa-external-link-alt"></i></a>，这将保护用户凭据和通过Web界面发送的构建的信息(我第一次使用这个我就不配置反向代理了)</p><p><a href="https://imgtu.com/i/b9eSy9"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/b9eSy9.png"                      alt="b9eSy9.png"                ></a></p><p>一旦第一个管理员用户到位，你应该看到一个“Jenkin is ready!” 确认屏幕:</p><p><a href="https://imgtu.com/i/b9emyd"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/b9emyd.png"                      alt="b9emyd.png"                ></a></p><p>点击“开始使用Jenkins”来访问主要的Jenkins仪表板:</p><p><a href="https://imgtu.com/i/b9uX7R"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/b9uX7R.png"                      alt="b9uX7R.png"                ></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面我们将在云服务器上安装Jenkins&lt;/p&gt;
&lt;p&gt;首先我们看看什么是Jenkins以及他能做什么&lt;/p&gt;
&lt;h3 id=&quot;什么是Jenkins&quot;&gt;&lt;a href=&quot;#什么是Jenkins&quot; class=&quot;headerlink&quot; title=&quot;什么是Jenkins&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>爬虫的管理与部署之云服务器环境搭建</title>
    <link href="http://example.com/2022/02/22/%E7%88%AC%E8%99%AB%E7%9A%84%E7%AE%A1%E7%90%86%E4%B8%8E%E9%83%A8%E7%BD%B2%E4%B9%8B%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/02/22/%E7%88%AC%E8%99%AB%E7%9A%84%E7%AE%A1%E7%90%86%E4%B8%8E%E9%83%A8%E7%BD%B2%E4%B9%8B%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-02-22T08:36:30.000Z</published>
    <updated>2022-02-22T09:02:11.078Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们要跟随以下链接的步骤(当然里面还介绍了如何配置访问认证)在云服务器上安装好Scrapyd:</p><p>点击<a class="link"   href="https://setup.scrape.center/scrapyd" >跳转<i class="fas fa-external-link-alt"></i></a></p><p>然后我们要做的就是安装一个高度集成话的图形界面工具—gerapy:</p><p>我在操作的时候遇到一个小小的问题，报错如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command <span class="string">&quot;python setup.py egg_info&quot;</span> failed <span class="keyword">with</span> error code <span class="number">1</span> <span class="keyword">in</span> /tmp/pip-build-*</span><br></pre></td></tr></table></figure><p>这个问题的解决我采集自: <a class="link"   href="https://www.cnblogs.com/xiao987334176/p/12600835.html" >https://www.cnblogs.com/xiao987334176/p/12600835.html<i class="fas fa-external-link-alt"></i></a></p><p>答案就是更新下pip工具，使用以下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><p>然后我们就可以使用使用以下步骤逐步运行起图形界面:</p><p>安装完Gerapy后，我们就可以使用gerapy命令了，首先，可以利用gerapy命令创建一个工作目录，如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy init</span><br></pre></td></tr></table></figure><p>这样会在当前目录下生成一个gerapy文件夹，然后进入该文件夹(进入该文件夹后再执行以下命令)，会发现一个空的projects文件夹，这会在后面提到</p><p>这时先对数据库进行初始化:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy migrate</span><br></pre></td></tr></table></figure><p>这样即会生成一个SQLite数据库，该数据库中会保存各个主机配置信息、部署版本等</p><p>接下来，我们可以生成一个管理账号:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy initadmin</span><br></pre></td></tr></table></figure><p>这时候可以生成一个用户名和密码都为admin的管理员账号，用于后续系统的登录</p><p>当然，如果不想使用默认的admin账号，也可以利用如下命令来创建单独的账号:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy createsuperuser</span><br></pre></td></tr></table></figure><p>输入用户名和密码之后，就可以创建一个管理员帐号了</p><p>接下来，启动Gerapy服务，命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy runserver</span><br></pre></td></tr></table></figure><p>这样即可在默认的8000端口上开启Gerapy服务，用浏览器打开<a href="http://localhost:8000即可进入">http://localhost:8000即可进入</a></p><p><code>gerapy runserver</code>这个命令一运行，那只能在云服务器本机上运行，我们在本地是无法通过<code>http://192.168.2.3:8000</code>来访问到这个面板的，如果要想在本地访问到，我们就要使用这个命令<code>gerapy runserver 0.0.0.0 8000</code>，这表示在任何主机的8000端口都可访问，前提是你云服务器主机的8000端口是否打开，也可以自定义其他端口，不一定非要8000端口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先我们要跟随以下链接的步骤(当然里面还介绍了如何配置访问认证)在云服务器上安装好Scrapyd:&lt;/p&gt;
&lt;p&gt;点击&lt;a class=&quot;link&quot;   href=&quot;https://setup.scrape.center/scrapyd&quot; &gt;跳转&lt;i class=&quot;fas </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>腾讯云ubuntu主机安装mongodb并设置远程访问</title>
    <link href="http://example.com/2022/02/22/%E8%85%BE%E8%AE%AF%E4%BA%91ubuntu%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85mongodb%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2022/02/22/%E8%85%BE%E8%AE%AF%E4%BA%91ubuntu%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85mongodb%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</id>
    <published>2022-02-22T02:30:30.000Z</published>
    <updated>2022-02-22T07:33:04.663Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们连接上云服务器，然后我们要使用以下命令更新下软件包:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure><p>然后我们就可以继续使用以下命令进行安装MongoDB:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mongodb</span><br></pre></td></tr></table></figure><p>稍等一会儿之后，MongoDB就安装到云服务器上了</p><p>在安装完成之后，MongoDB是启动了的，但后期我们可以使用以下命令查看服务是否启动:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mongodb</span><br></pre></td></tr></table></figure><p>如果看到active那服务就是启动了的，其他的都是没有启动</p><p>然后下面我们就来看看如何设置，然后在本地也能访问到远程云服务器上的MongoDB数据库:</p><p>首先，我们要使用使用以下命令修改配置文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongodb.conf</span><br></pre></td></tr></table></figure><p>进入配置文件后，我们进行编辑，把<code>bind_ip=127.0.0.1</code>这一行修改成<code>bind_ip=0.0.0.0</code>，这里要注意，设置远程访问之后，启动auth授权访问，不然非常不安全，数据库容易被攻击，在配置文件中修改如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Turn on/off security.  Off is currently the default</span></span><br><span class="line"><span class="comment">#noauth = true</span></span><br><span class="line">auth = true</span><br></pre></td></tr></table></figure><p>然后我们需要在mongodb数据库中新建用户名和密码，也就是上面的noauth = true要打开，然后，我们使用以下命令切换数据库到admin:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><p>然后我们使用以下命令添加admin数据库的用户:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;user:<span class="string">&quot;kimkat&quot;</span>,pwd:<span class="string">&quot;123456&quot;</span>,roles:[&#123; role: <span class="string">&quot;readWriteAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;]&#125;)</span><br></pre></td></tr></table></figure><p>这里附上mongodb添加用户的方法: <a class="link"   href="https://docs.mongodb.com/manual/reference/method/db.createUser/index.html" >https://docs.mongodb.com/manual/reference/method/db.createUser/index.html<i class="fas fa-external-link-alt"></i></a></p><p>以及mongod内置的用户角色: <a class="link"   href="https://docs.mongodb.com/manual/core/security-built-in-roles/index.html" >https://docs.mongodb.com/manual/core/security-built-in-roles/index.html<i class="fas fa-external-link-alt"></i></a></p><p>然后我们需要使用以下命令再次修改配置文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongodb.conf</span><br></pre></td></tr></table></figure><p>然后修改成如下即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongodb.conf</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Where to store the data.</span></span><br><span class="line">dbpath=/var/lib/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment">#where to log</span></span><br><span class="line">logpath=/var/log/mongodb/mongodb.log</span><br><span class="line"></span><br><span class="line">logappend=true</span><br><span class="line"></span><br><span class="line">bind_ip = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">port = <span class="number">27017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable journaling, http://www.mongodb.org/display/DOCS/Journaling</span></span><br><span class="line">journal=true</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables periodic logging of CPU utilization and I/O wait</span></span><br><span class="line"><span class="comment">#cpu = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Turn on/off security.  Off is currently the default</span></span><br><span class="line"><span class="comment">#noauth = true</span></span><br><span class="line">auth = true</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verbose logging output.</span></span><br><span class="line"><span class="comment">#verbose = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inspect all client data for validity on receipt (useful for</span></span><br><span class="line"><span class="comment"># developing drivers)</span></span><br><span class="line"><span class="comment">#objcheck = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable db quota management</span></span><br><span class="line"><span class="comment">#quota = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set diagnostic logging level where n is</span></span><br><span class="line"><span class="comment">#   0=off (default)</span></span><br><span class="line"><span class="comment">#   1=W</span></span><br><span class="line"><span class="comment">#   2=R</span></span><br><span class="line"><span class="comment">#   3=both</span></span><br><span class="line"><span class="comment">#   7=W+some reads</span></span><br><span class="line"><span class="comment">#diaglog = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Diagnostic/debugging option</span></span><br><span class="line"><span class="comment">#nocursors = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ignore query hints</span></span><br><span class="line"><span class="comment">#nohints = true</span></span><br></pre></td></tr></table></figure><p>然后我们使用以下命令重启mongodb数据库:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mongodb restart</span><br></pre></td></tr></table></figure><p>然后我们就要打开云服务器的端口了，这个在云服务器中的控制面板中可以自由设置</p><p>下面我们来看看远程连接测试:</p><p>进行到这一步的时候我遇到点问题，前面在查阅资料的时候，说<code>mongodb.conf</code>文件中的<code>bind_ip</code>可以被注释掉，这个我一注释后面就遇到怎么也无法连接的问题，所以这个千万不能注释掉，我们要把它修改为<code>0.0.0.0</code>，然后按照上面的步骤，在默认的admin数据库指定一个username和password然后开启auth即可开启用户名密码连接</p><p>这样我们就完成了远程访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先我们连接上云服务器，然后我们要使用以下命令更新下软件包:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于pip挂了的补充</title>
    <link href="http://example.com/2022/02/22/%E5%85%B3%E4%BA%8Epip%E6%8C%82%E4%BA%86%E7%9A%84%E8%A1%A5%E5%85%85/"/>
    <id>http://example.com/2022/02/22/%E5%85%B3%E4%BA%8Epip%E6%8C%82%E4%BA%86%E7%9A%84%E8%A1%A5%E5%85%85/</id>
    <published>2022-02-22T01:35:30.000Z</published>
    <updated>2022-02-22T01:37:24.704Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇笔记提到使用<code>python -m ensurepip</code>将pip.exe文件下载下来，然后我们在Python主目录下中的Scripts文件夹内可以看到pip3.exe，然后我们要将这个.exe文件的路径添加进环境变量即可在小黑窗口使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇笔记提到使用&lt;code&gt;python -m ensurepip&lt;/code&gt;将pip.exe文件下载下来，然后我们在Python主目录下中的Scripts文件夹内可以看到pip3.exe，然后我们要将这个.exe文件的路径添加进环境变量即可在小黑窗口使用&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python中的pip工具丢失的解决方法</title>
    <link href="http://example.com/2022/02/19/Python%E4%B8%AD%E7%9A%84pip%E5%B7%A5%E5%85%B7%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/02/19/Python%E4%B8%AD%E7%9A%84pip%E5%B7%A5%E5%85%B7%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-02-19T01:31:30.000Z</published>
    <updated>2022-02-19T01:39:29.648Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在使用更新pip的命令后，莫名其妙我的pip就被删除了:</p><p><a href="https://imgtu.com/i/HHQYsU"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/19/HHQYsU.png"                      alt="HHQYsU.png"                ></a></p><p>我当时就傻眼了，这怎么搞呢，我还要用pip工具安装包呢，然后我是用以下命令解决的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip</span><br></pre></td></tr></table></figure><p>ensurepip默认会安装标准库提供的一个pip副本，这个副本一般不是最新的，然后可以用这个版本安装pip的任意一个更新版本，当然如果你想直接安装pip的一个最新版本，可以在ensurepip命令中添加<code>-uupgrade</code>选项</p><p><a href="https://imgtu.com/i/HHQyQK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/19/HHQyQK.png"                      alt="HHQyQK.png"                ></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天在使用更新pip的命令后，莫名其妙我的pip就被删除了:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/HHQYsU&quot;&gt;&lt;img  
                     lazyload
                     src=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第11章-JavaScript逆向爬虫</title>
    <link href="http://example.com/2022/02/16/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC11%E7%AB%A0-JavaScript%E9%80%86%E5%90%91%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/2022/02/16/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC11%E7%AB%A0-JavaScript%E9%80%86%E5%90%91%E7%88%AC%E8%99%AB/</id>
    <published>2022-02-16T14:20:56.000Z</published>
    <updated>2022-03-02T07:45:31.926Z</updated>
    
    <content type="html"><![CDATA[<p>随着大数据时代的发展，各个公司的数据保护意识越来越强，大家都在想尽办法保护自家产品的数据，不让它们轻而易举地被爬虫爬走；由于网页是提供信息和服务的重要载体，所以对网页上的信息进行保护就成了一个至关重要的环节</p><p>网页是运作在浏览器端的，当我们浏览一个网页时，其HTML代码、JavaScript代码都会被下载到浏览器中执行；借助浏览器的开发者工具，我们可以看到网页中所有的网络请求的详细信息，也能清楚地看到网站运行的HTML代码和JavaScript代码。这些代码里就包含了网站加载的全部逻辑，比如加载哪些资源，请求接口是如何构造的，页面是如何渲染的，等等。正是因为代码是完全透明的，所以如果我们能研究明白其中的执行逻辑，就可以模拟各个网络请求，进行数据爬取了</p><p>然而，事情没有想象中的那么简单；随着前端技术的发展，前端代码的打包技术、混淆技术、加密技术也层出不穷，借助于这些技术，各个公司可以在前端对JavaScript代码采取一定的保护，比如变量名混淆、执行逻辑混淆、反调试、核心逻辑加密等，这些保护手段使得我们没法很轻易地找出JavaScript代码中包含的执行逻辑</p><p>在前面的案例中，我们也试着爬取了各种形式的网站；其中有些网站的数据接口是没有任何验证或加密参数的，我们可以轻松模拟并爬取其中的数据；但有的网站稍显复杂，网站的接口中增加了一些加密参数，同时对JavaScript代码采取了上文所述的一些防护措施；当时我们没有尝试去破解，而是用类似Selenium等工具模拟浏览器的执行方式，进行“所见即所得”的爬取；其实对于后者，我们还有另一种解决方案：逆向JavaScript代码，找出其中的加密逻辑，直接实现该加密逻辑进行爬取；如果加密逻辑过于复杂，我们也可以找出一些关键入口，从而实现对加密逻辑的单独模拟执行和数据爬取；这些方案的难度可能很大，比如关键入口很难寻找或加密逻辑很难模拟，可是一旦成功找到突破口，我们便不用借助Selenium等工具进行整页数据的渲染，爬取效率会大幅提高</p><h3 id="网站加密和混淆技术简介"><a href="#网站加密和混淆技术简介" class="headerlink" title="网站加密和混淆技术简介"></a>网站加密和混淆技术简介</h3><p>我们在爬取网站的时候，会遇到一些需要分析接口或URL的时候，这时会有各种各样类似的加密情形:</p><ul><li>URL/API参数加密</li><li>JavaScript压缩、混淆和加密</li></ul><h4 id="网页数据防护方案"><a href="#网页数据防护方案" class="headerlink" title="网页数据防护方案"></a>网页数据防护方案</h4><h5 id="URL-API参数加密"><a href="#URL-API参数加密" class="headerlink" title="URL/API参数加密"></a>URL/API参数加密</h5><p>比如说给某些URL的参数加上校验码，给一些ID信息编码，给某些API请求加上token、sign等签名，这样请求发送到服务器时，服务器会通过客户端发来的一些请求信息以及双方约定好的秘钥等来对当前的请求进行校验，只有通过校验，才会返回对应的数据结果</p><h5 id="JavaScript压缩、混淆和加密"><a href="#JavaScript压缩、混淆和加密" class="headerlink" title="JavaScript压缩、混淆和加密"></a>JavaScript压缩、混淆和加密</h5><p>首先我们来看看JavaScript在浏览器中有啥特点</p><ul><li>JavaScript代码运行于客户端，也就是它必须在用户浏览器端加载并运行</li><li>JavaScript代码是公开透明的，也就是说浏览器可以直接获取到正在运行的JavaScript源码</li></ul><p>基于这两个特点，JavaScript是不安全的，任何人都能读、分析、复制、盗用甚至篡改代码</p><p>如果你不想让自己的数据被轻易获取，不想他人了解JavaScript逻辑的实现，或者想降低悲佛那估计的风险，那么就需要用到JavaScript压缩、混淆和加密技术了</p><ul><li><strong>代码压缩</strong>: 去除JavaScript代码中不必要的空格、换行等内容，使得源码都压缩为几行内容，降低代码的可读性，当然也可提高网站的加载速度</li><li><strong>代码混淆</strong>: 使用变量替换、字符串阵列化、控制流平坦化、多态变异、僵尸函数、调试保护等手段，使代码变得难以阅读和分析，达到最终保护的目的，但这并不影响代码的原有功能，是理想、使用的JavaScript保护方案</li><li><strong>代码加密</strong>: 可以通过某种手段将JavaScript代码进行加密，转成人无法阅读或者解析的代码，如借用WebAssembly技术，可以直接将JavaScript代码用C/C++实现，JavaScript调用其编译后形成的文件来执行相应的功能</li></ul><h4 id="URL-API参数加密-1"><a href="#URL-API参数加密-1" class="headerlink" title="URL/API参数加密"></a>URL/API参数加密</h4><p>为了提高接口的安全性，客户端会和服务端约定一种接口校验方式，一般来说会用到各种家猫咪和编码算法，如Base64、Hex编码、MD5、AES、DES、RSA等对称或非对称加密</p><p>举个栗子，比如说客户端和服务器双方约定一个sign用作接口的签名校验，其生成逻辑是客户将URL路径进行MD5加密，然后拼接上URL的某个参数在进行Base64编码，最后得到字符串sign，这个sign会通过Request URL的某个参数或Request Header发送个服务器，服务器接收到请求后，对URL路径同样进行MD5加密，然后拼接上URL的某个参数，如果一致，就返回正确的结果，否则拒绝响应；这就是一个比较简单的接口参数加密的实现，如果有人想要调用这个接口的话，必须定义好sign的生成逻辑，否则是无法正常调用接口的</p><p>这里要实现接口参数加密，就需要用到一些加密算法，客户端和服务器肯定也都有对应的SDK实现这些加密算法，如JavaScript的crypto-js、python的hashlib、Crypto等<br>如上文所说，如果没有对JavaScript代码进行加密的话，搞清楚这个加密逻辑那还是相对简单的，所以我们需要对JavaScript利用压缩、混淆等方式来对客户端的逻辑进行一定程度的保护</p><h4 id="JavaScript压缩"><a href="#JavaScript压缩" class="headerlink" title="JavaScript压缩"></a>JavaScript压缩</h4><p>这个前面也提到过，可以去除JavaScript代码中不必要的空格和换行符等内容，或者把一些能共用的代码进行处理实现共享，最后输出的结果都压缩成几行内容，代码的可读性变得很差，同时还提高了网站的加载速度</p><p>但如果仅仅是去除空格、换行这样的压缩方式，其实几乎是没有任何防护作用的，因为这种压缩方式是降低了代码的直接可读性，因为我们有一些格式化工具可以轻松将JavaScript代码变得易读，比如利用IDE、在线工具或Chorme浏览器都能还原格式化的代码</p><p>目前主流的前端开发技术都会利用webpack、Rollup等工具进行打包；webpack、Rollup会对源代码进行编译和压缩，输出几个打包好的JavaScript文件，其中我们可以看到输出的JavaScript文件名带有一些不规则的字符串，同时文件内容可能只有几行，变量名都用一些简单字母表示；这其中就包含JavaScript压缩技术，比如一些公共的库输出成bundle文件，一些调用逻辑压缩和转义成冗长的几行代码，这些都属于JavaScript压缩；另外，其中也包含了一些很基础的JavaScript混淆技术，比如把变量名、方法名替换成一些简单字符，降低代码的可读性，整体来说，JavaScript代码压缩技术只能在很小的程度上起到防护作用，要想真正提高防护效果，还得依靠JavaScript混淆和加密技术</p><h4 id="JavaScript混淆"><a href="#JavaScript混淆" class="headerlink" title="JavaScript混淆"></a>JavaScript混淆</h4><p>JavaScript混淆完全是在JavaScript上面进行的处理，它的目的就是使得JavaScript变的难以阅读和分析</p><p>主要有以下几种:</p><ul><li>变量名混淆: 将带有含义的变量名、方法名、常量名随机变为无意义的类乱码字符串，降低代码的可读性，如转成单个字符或十六进制字符串</li><li>字符串混淆: 将字符串列阵化集中放置并可进行MD5或Base64加密存储，使代码中不出现明文字符串，这样可以避免使用全局变量搜索字符串的方式定位到入口</li><li>对象键名替换: 针对JavaScript对象的属性进行加密转化，隐藏代码之间的调用关系</li><li>控制流平坦化: 打乱函数原有代码的执行流程以及函数调用关系，使代码逻辑变得混乱无序</li><li>无用代码注入: 随机在代码中插入不会被执行到的无用代码，进一步使得代码看起来更加混乱</li><li>调试保护: 基于调试器特性，对当前运行环境进行检验，加入一些debugger语句，使其在调试模式下难以顺利执行JavaScript代码</li><li>多态变异: 使JavaScript代码每次被调用时，将代码自身立即自动发生变异，变为与之前完全不同的代码，即功能完全不变， 只是代码的形式变异</li><li>域名锁定: 使得JavaScript代码只能在特定的域名下执行</li><li>代码自我保护: 如果对JavaScript进行格式化，则无法执行，导致浏览器假死</li><li>特殊编码: 将JavaScript完全编码为人不可读的代码，如表情符号，特殊表示内容等</li></ul><p>以上就是JavaScript实现混淆的方式，在前端开发中，现在JavaScript混淆的主流实现方式是JavaScript-obfuscator和terser这两个库，它们都能提供一些代码混淆功能，也都有对应的webpack和Rollup打包工具的插件；利用他们，我们可以非常方便地实现页面的混淆，最终输出压缩后和混淆后的JavaScript代码</p><ul><li>混淆案例引入</li></ul><p>下面我们以JavaScript-obfuscator为例来介绍一些代码混淆的实现；了解了实现，那么我们自然就对混淆的机理有了更加深刻的认识</p><p>javascript-obfuscator的使用方式如下:</p><p>首先我们需要安装好node，详情请百度，安装12.x以上版本</p><p>然后新建一个文件夹，比如js-obfuscate，然后进入该文件夹，初始化工作空间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>这里会提示我们输入一些信息，然后创建package.json文件，这就完成项目的初始化了</p><p>接下来我们来安装JavaScript-obfuscator这个库:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D javascript-obfuscator</span><br></pre></td></tr></table></figure><p>稍等片刻，即可看到本地js-obfuscate文件夹下生成了一个node_modules文件夹，里面就包含了javascript-obfuscator这个库，这就说明安装成功</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_10-58-58.38qya2ndve00.webp"                      alt="Snipaste_2022-02-17_10-58-58"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_10-59-12.20hesd1eumsg.webp"                      alt="Snipaste_2022-02-17_10-59-12"                ></p><p>接下来我们就可以编写代码来实现一个混淆案例了</p><p>比如新建main.js文件，其内容如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">let x = &#x27;1&#x27; + 1</span></span><br><span class="line"><span class="string">console.log(&#x27;x&#x27;, x)</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">compact</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">controlFlowFlattening</span>: <span class="literal">true</span>  <span class="comment">// 控制流平坦化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obfuscator = <span class="built_in">require</span>(<span class="string">&#x27;javascript-obfuscator&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params">code, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obfuscator.obfuscate(code, options).getObfuscatedCode()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obfuscate(code, options))</span><br></pre></td></tr></table></figure><p>上面我们定义了两个变量: 一个是code，即需要被混淆的代码；另一个是混淆选项options，是一个Object，接下来，我们引入了javascript-obfuscator这个库，然后定义了一个方法，给其传入code和options来获取混淆后的代码，最后控制台输出混淆后的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _0x52032e = _0x3510;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x3510</span>(<span class="params">_0x3663d2, _0xf38f17</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _0x485054 = _0x4850();</span><br><span class="line">    <span class="keyword">return</span> _0x3510 = <span class="function"><span class="keyword">function</span> (<span class="params">_0x35107d, _0x2dd6c3</span>) </span>&#123;</span><br><span class="line">        _0x35107d = _0x35107d - <span class="number">0x142</span>;</span><br><span class="line">        <span class="keyword">let</span> _0x4e0b1f = _0x485054[_0x35107d];</span><br><span class="line">        <span class="keyword">return</span> _0x4e0b1f;</span><br><span class="line">    &#125;, _0x3510(_0x3663d2, _0xf38f17);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">_0x26a245, _0x1ba328</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _0x3ba1e4 = _0x3510, _0x1fecf7 = _0x26a245();</span><br><span class="line">    <span class="keyword">while</span> (!![]) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> _0x2b1ff7 = <span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x145</span>)) / <span class="number">0x1</span> * (<span class="built_in">parseInt</span>(_0x3b</span><br><span class="line">a1e4(<span class="number">0x142</span>)) / <span class="number">0x2</span>) + -<span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x148</span>)) / <span class="number">0x3</span> * (-<span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0</span></span><br><span class="line">x14b)) / <span class="number">0x4</span>) + -<span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x14d</span>)) / <span class="number">0x5</span> * (<span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x144</span>))</span><br><span class="line">/ <span class="number">0x6</span>) + <span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x149</span>)) / <span class="number">0x7</span> + <span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x14c</span>)) / <span class="number">0x8</span> * (</span><br><span class="line">-<span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x147</span>)) / <span class="number">0x9</span>) + -<span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x146</span>)) / <span class="number">0xa</span> * (-parse</span><br><span class="line">Int(_0x3ba1e4(<span class="number">0x143</span>)) / <span class="number">0xb</span>) + <span class="built_in">parseInt</span>(_0x3ba1e4(<span class="number">0x14a</span>)) / <span class="number">0xc</span> * (<span class="built_in">parseInt</span>(_0x3</span><br><span class="line">ba1e4(<span class="number">0x14e</span>)) / <span class="number">0xd</span>);</span><br><span class="line">            <span class="keyword">if</span> (_0x2b1ff7 === _0x1ba328)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                _0x1fecf7[<span class="string">&#x27;push&#x27;</span>](_0x1fecf7[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (_0x22d9c0) &#123;</span><br><span class="line">            _0x1fecf7[<span class="string">&#x27;push&#x27;</span>](_0x1fecf7[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(_0x4850, <span class="number">0xc5de0</span>));</span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;1&#x27;</span> + <span class="number">0x1</span>;</span><br><span class="line"><span class="built_in">console</span>[_0x52032e(<span class="number">0x14f</span>)](<span class="string">&#x27;x&#x27;</span>, x);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x4850</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _0x5b094f = [</span><br><span class="line">        <span class="string">&#x27;log&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2942756bVuYHP&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;360976wWgujL&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1680090tBGHuf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1iTztIg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;50VxfFqD&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;63513MkQenq&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;28728NMdHVD&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1129338Fwtepc&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;21036FjaJff&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;20nkmgoZ&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;8lDKdWt&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;20Yxyfit&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;689wplPFn&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    _0x4850 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _0x5b094f;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _0x4850();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码压缩</p><p>javascript-obfuscator也提供了代码压缩的功能，使用其参数compact即可完成，输出为一行内容，参数compact的默认值是true，如果定义为false，则混淆后的代码会分行显示</p><p>示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">let x = &#x27;1&#x27; + 1</span></span><br><span class="line"><span class="string">console.log(&#x27;x&#x27;, x)</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">compact</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obfuscator = <span class="built_in">require</span>(<span class="string">&#x27;javascript-obfuscator&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span>(<span class="params">code, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obfuscator.obfuscate(code, options).getObfuscatedCode()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obfuscate(code, options))</span><br></pre></td></tr></table></figure><p>compact设置为false后效果如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;1&#x27;</span> + <span class="number">0x1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;x&#x27;</span>, x);</span><br></pre></td></tr></table></figure><p>如果不设置compact或者把compact设置为true，结果就是一整行了</p></li><li><p>变量名混淆</p><p>P403</p></li><li><p>字符串混淆</p><p>P404</p></li><li><p>代码自我保护</p><p>P405</p></li><li><p>控制流平坦化</p><p>P406</p></li><li><p>无用代码注入</p><p>P407</p></li><li><p>对象键名替换</p><p>P408</p></li><li><p>禁用控制台输出</p><p>P409</p></li><li><p>调试保护</p><p>P409</p></li><li><p>域名锁定</p><p>P410</p></li><li><p>特殊编码</p><p>P411</p></li></ul><h4 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h4><p>WebAssembly的基本思路是将一些核心逻辑使用其他语言(如C和C++)来编写，并编译成类似字节码的文件，并通过JavaScript调用执行，从而起到二进制级别的防护作用</p><p>WebAssembly是一种可以使用非JavaScript编程语言编写代码并且能在浏览器上运行的技术方案，比如我们能将C/C++文件利用Emscripten编译工具转成wasm格式的文件，JavaScript可以直接调用该文件执行其中的方法</p><h3 id="浏览器调试常用技巧"><a href="#浏览器调试常用技巧" class="headerlink" title="浏览器调试常用技巧"></a>浏览器调试常用技巧</h3><p>既然我们要做JavaScript逆向，那少不了要用到浏览器的开发工具，下面我们就来说说，由于开发者工具的功能十分复杂，本节主要介绍对JavaScript逆向有帮助的功能，学会了这些我们会在开发过程中会更得心应手</p><p>这些我之前整理过，请看<a class="link"   href="http://kest.club/2022/01/19/Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/" >这里<i class="fas fa-external-link-alt"></i></a></p><p>但是我还是决定再看一遍，毕竟感觉这本书写得更详细些，所以下面我们就来看看</p><h4 id="面板介绍"><a href="#面板介绍" class="headerlink" title="面板介绍"></a>面板介绍</h4><p>首先，我们用Chrome打开示例网站，页面如下所示:</p><p><a href="https://imgtu.com/i/bV8rzF"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bV8rzF.png"                      alt="bV8rzF.png"                ></a></p><p>接下来，打开开发者工具，我们会看到类似下图的结果:</p><p><a href="https://imgtu.com/i/bVGh0s"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVGh0s.png"                      alt="bVGh0s.png"                ></a></p><p>这里可以看到多个面板标签，下面先对面板进行简单介绍:</p><ul><li>Elements: 元素面板，用于查看或修改当前页面HTML节点的属性、CSS属性、监听事件等；HTML和CSS都可以即时修改和即时显示</li><li>Console: 控制台面板，用于查看调试日志或异常信息；另外，我们还可以在控制台输入JavaScript代码，方便调试</li><li>Sources: 源代码面板，用于查看页面的HTML文件源代码、JavaScript源代码、CSS源代码；此外，还可以在此面板对JavaScript代码进行调试，比如添加和修改JavaScript断点，观察JavaScript变量变化等</li><li>Network: 网络面板，用于查看页面加载过程中各个网络请求，包括请求、响应等</li><li>Performance: 性能面板，用于记录和分析页面在运行时的所有活动，比如CPU占用情况、呈现页面的性能分析结果</li><li>Memory: 内存面板，用于记录和分析页面占用情况，如查看内存占用情况，查看JavaScript对象和HTML节点的内存分配</li><li>Application: 应用面板，用于记录网站加载的所有资源信息，如存储、缓存、字体、图片等，同时也可以对一些资源进行修改和删除</li><li>Lighthouse: 审核面板，用于分析网络应用和网页，收集现代性能指标并提供对开发人员最佳实践的意见</li></ul><p>深入了解这些面板之后，我们来深入了解下几个面板对JavaScript调试很有帮助的功能</p><h4 id="查看点击事件"><a href="#查看点击事件" class="headerlink" title="查看点击事件"></a>查看点击事件</h4><p>前面介绍过，我们通过Elements面板可以审查页面的节点信息，可以查看当前页面的HTML源代及其在网页中对应的位置，查看某个条目的标题对应的页面源代码，如下图所示:</p><p>我们首先点击面板那一栏最左侧的小箭头图标，然后我们就可以移动鼠标去点击网页的任何地方，这里我们以点击网页中列表中的一个标题为例:</p><p><a href="https://imgtu.com/i/bVtv7j"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVtv7j.png"                      alt="bVtv7j.png"                ></a></p><p>我们可以看到，点击后就会立即定位到在代码中的位置，我们可以看到右侧有个Styles选项卡，可以看到对应节点的CSS样式，我们可以自行在这里增删样式，实时预览效果，这对网页开发十分有帮助</p><p>在Computed选项卡中，可以看到当前节点的盒子模型，比如外边距、内边距等，还可以看到当前节点最终计算出的CSS样式，如下图所示:</p><p><a href="https://imgtu.com/i/bVNQgK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVNQgK.png"                      alt="bVNQgK.png"                ></a></p><p>接下来，切换到右侧的Event Listeners选项卡，这里可以显示各个节点当前已经绑定的事件，都是JavaScript原生支持的，下面简单列举几个事件:</p><ul><li>change: HTML元素改变时会触发的事件</li><li>click: 用户点击HTML元素时会触发的事件</li><li>mouseover: 用户在一个HTML元素上移动鼠标时会触发的事件</li><li>keydown: 用户按下按键时会触发的事件</li><li>load: 浏览器完成页面加载时会触发的事件</li></ul><p>通常，我们会给按钮绑定一个点击事件，它的处理逻辑一般是由JavaScript定义的，这样在我们点击按钮的时候，对应的JavaScript代码便会执行；比如我们在点击下一页的时候，就会看到元素绑定了一个点击事件:</p><p><a href="https://imgtu.com/i/bVUuZQ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVUuZQ.png"                      alt="bVUuZQ.png"                ></a></p><p>如上图红框中所示，这里有对应事件的代码位置，内容为一个JavaScript文件名称chunk-vendors.77daf991.js，然后紧跟着一个冒号，接着跟了一个数字7；所以对应的时间处理函数是定义在chunk-vendors.77daf991.js这个文件的第7行；点击这个代码位置，便会自动跳转到Sources面板，打开对应的chunk-vendors.77daf991.js文件并跳转到对应的位置，如下图所示:</p><p><a href="https://imgtu.com/i/bVUvYn"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVUvYn.png"                      alt="bVUvYn.png"                ></a></p><p>所以，利用好Evnet Listeners，我们可以轻松找到各个节点绑定事件的处理方法所在的位置，帮我们在JavaScript逆向过程中找到一些突破口</p><h4 id="代码美化"><a href="#代码美化" class="headerlink" title="代码美化"></a>代码美化</h4><p>刚才我们已经通过Events Listeners找到了对应的事件处理方法所在的位置并成功跳转到了代码所在的位置，但是，这部分代码似乎被压缩过了，可读性很差，根本没法阅读，这时候我们应该怎么办呢，Sources面板给我们提供了一个便捷好用的代码美化功能，点击代码面板左下角的格式化按钮，如下图所示，代码就会变得易读</p><p><a href="https://imgtu.com/i/bVazAH"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVazAH.png"                      alt="bVazAH.png"                ></a></p><p>此时会新出现一个叫做chunk-vendors.77daf991.js:formatted的选项卡，文件名后面加了formatted，代表这是被格式化的结果，我们会发现，原来代码在第7行，现在自动对应到了第4445行，而且对应的代码位置还会高亮显示，代码可读性大大增强:</p><p><a href="https://imgtu.com/i/bVdIr8"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVdIr8.png"                      alt="bVdIr8.png"                ></a></p><p>这个功能在调试过程中会经常用到，用好这个功能会给我们的JavaScript调试过程中带来极大的便利</p><h4 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h4><p>接下来，我们介绍一个非常重要的功能—断点调试；在调试代码的时候，我们可以在需要的位置上打断点，当对应事件触发时，浏览器就会自动停在断点的位置等待调试，此时我们可以选择单步调试，在面板中观察调用栈、变量值，以更好地追踪对应位置的执行逻辑</p><p>那断点怎么打呢，我们接着以上面的例子来说，首先单击下图所示的代码行号:</p><p><a href="https://imgtu.com/i/bVw4Y9"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVw4Y9.png"                      alt="bVw4Y9.png"                ></a></p><p>这时候行号处就出现了一个蓝色的箭头，这就证明断点已经添加好了，同时在右侧的Breakpoints选项卡下会出现我们添加的断点列表</p><p>由于我们知道这个断点是用来处理翻页按钮的点击事件的，所以可以在网页里面点击按钮试一下，比如点击第二页的按钮，这时候就会发现断点被触发了，如下图所示:</p><p><a href="https://imgtu.com/i/bV0H9s"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bV0H9s.png"                      alt="bV0H9s.png"                ></a></p><p>这时候我们可以看到页面中显示了一个叫做Paused in debugger的提示，这说明浏览器执行到刚才我们设置断点的位置处就不再继续执行了，等待我们发号施令执行调试</p><p>此时代码停在了第4446行，回调参数e就是对应PointerEvent；在右侧的Scope面板处，可以观察到各个变量的值，比如在Local域下有当前方法的局部变量，我们可以在这里看到PointerEvent的各个属性，如下图所示:</p><p><a href="https://imgtu.com/i/bVBXRA"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVBXRA.png"                      alt="bVBXRA.png"                ></a></p><p>另外，我们关注到有个方法，它在Jr方法下面，所以切换到Closure(Jr)域，可以查看它的定义及其及接收的参数，如下图所示:</p><p><a href="https://imgtu.com/i/bVDKdU"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVDKdU.png"                      alt="bVDKdU.png"                ></a></p><p><a href="https://imgtu.com/i/bVDoSs"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVDoSs.png"                      alt="bVDoSs.png"                ></a>我们可以看到，FunctionLocation又指向了方法o，点击之后便又可以跳转到指定位置，用同样的方法进行断电器调试即可</p><p>在Scope面板还有多个域，这里就不再展开介绍了；总之，通过Scope面板，我们可以看到当前执行环境下变量的值和方法的定义，知道当前代码究竟执行了怎样的逻辑</p><p>接下来，切换到Watch面板，在这里我们可以自行添加想要查看的变量和方法，点击右上角的+按钮，我们可以任意添加想要监听的对象，比如我们这里比较关注o.apply方法，于是点击添加o.apply，这里就会把对应的方法定义呈现出来，展开之后再点击FunctionLocation定位其源码位置:</p><p><a href="https://imgtu.com/i/bVseET"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVseET.png"                      alt="bVseET.png"                ></a></p><p>我们还可以切换到Console面板，输入任意的JavaScript代码，此时便会执行、输出对应的结果:</p><p><a href="https://imgtu.com/i/bVycO1"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bVycO1.png"                      alt="bVycO1.png"                ></a></p><p>如果我们想看看变量arguments的第一个元素是什么，那么可以直接键入arguments[0]，此时便会输出对应的结果PointerEvent；只要在当前上下文能访问到的变量都可以直接引用并输出</p><p>此外我们还可以选择单步调试，这里有三个重要的按钮，如下图所示:<br><a href="https://imgtu.com/i/bV6BHP"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bV6BHP.png"                      alt="bV6BHP.png"                ></a></p><p>这三个按钮都可以做单步调试，但功能不同，从左到右依次是:</p><ul><li>Step Over Next Function Call: 逐语句执行</li><li>Step Into Next Function Call: 进入方法内部执行</li><li>Step Out of Current Function: 跳出当前方法</li></ul><p>用的较多的是第一个，相当于逐行调试，比如: 点击Step Over Next Function Call按钮，就运行到了第4446行，高亮的位置就变成了这一行，如下图所示:</p><p><a href="https://imgtu.com/i/bZAtjf"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZAtjf.png"                      alt="bZAtjf.png"                ></a></p><h4 id="观察调用栈"><a href="#观察调用栈" class="headerlink" title="观察调用栈"></a>观察调用栈</h4><p>在调试过程中，我们可能会调到一个新的位置，比如点击几下Step Over Next Function Call按钮，可能会跳到一个叫做ct的方法中，这时候我们也不知道发生了什么，如下图所示:</p><p><a href="https://imgtu.com/i/bZAoCR"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZAoCR.png"                      alt="bZAoCR.png"                ></a></p><p>究竟是怎么跳过来的呢，我们观察下右侧的Call Stack面板，就可以看到全部的调用过程了，比如它的上一步是ot方法，再上一步是pt方法，点击对应的位置也可以跳转到对应的代码位置，如下所示:</p><p><a href="https://imgtu.com/i/bZEu2q"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZEu2q.png"                      alt="bZEu2q.png"                ></a></p><p>有时候调用栈是非常有用的，利用它我们可以回溯某个逻辑的执行流程，从而快速找到突破口；、</p><h4 id="恢复JavaScript执行"><a href="#恢复JavaScript执行" class="headerlink" title="恢复JavaScript执行"></a>恢复JavaScript执行</h4><p>在调试过程中，如果想快速跳到下一个断点或者让JavaScript代码运行下去，可以点击Resume script execution按钮，如下图所示:</p><p><a href="https://imgtu.com/i/bZEhsf"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZEhsf.png"                      alt="bZEhsf.png"                ></a></p><p>这时浏览器会直接执行到下一个断点的位置，从而避免陷入无穷无尽的调试中</p><p>当然，如果没有其他断点了，浏览器就会恢复正常状态，比如这里我们就没有再设置其他断点了，浏览器直接运行并加载了下一页的数据，同时页面恢复正常，如下图所示:</p><p><a href="https://imgtu.com/i/bZV1SI"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZV1SI.png"                      alt="bZV1SI.png"                ></a></p><h4 id="Ajax断点"><a href="#Ajax断点" class="headerlink" title="Ajax断点"></a>Ajax断点</h4><p>上面我们介绍了一些DOM节点的监听器(Listener)，通过监听器，我们可以手动设置断点并进行调试；但其实针对这个例子，通过翻页的点击事件监听器是不太容易找到突破口的</p><p>接下来我们再介绍一个方法—Ajax断点，它可以在发生Ajax请求的时候触发断点；对于这个例子，我们的目标其实就是找到Ajax请求的那一部分逻辑，找出加密参数是怎么构造的；可以想到，通过Ajax断点，使页面在获取数据的时候停下来，我们就可以顺着找到构造Ajax请求的逻辑了</p><p>那么，怎么设置呢?</p><p>我们把之前的断点全部取消，切换到Sources面板下，然后展开XHR/fetch Breakpoints，这里就可以设置Ajax断点，如下图所示:</p><p><a href="https://imgtu.com/i/bZebJH"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZebJH.png"                      alt="bZebJH.png"                ></a></p><p>要设置断点，就要先观察Ajax请求；和之前一样，我们点击翻页按钮2，在Network面板里面观察Ajax请求是怎样的，请求的URL如下图所示:</p><p><a href="https://imgtu.com/i/bZmmwT"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZmmwT.png"                      alt="bZmmwT.png"                ></a></p><p>可以看到，URL里面包含/api/movie这样的内容，所以我们可以在刚才的XHR/fetch Breakpoints面板中添加拦截规则；点击+按钮，可以看到一行Break when URL contains: 的提示，意思是当Ajax请求的URL包含填写的内容时，会进入断点停止，这里可以填写/api/movie，如下图所示:</p><p><a href="https://imgtu.com/i/bZmONF"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZmONF.png"                      alt="bZmONF.png"                ></a></p><p>这时候我们再点击翻页按钮3，触发第3页的Ajax请求；会发现点击之后页面走到断点停下来了，如下图所示:</p><p><a href="https://imgtu.com/i/bZn1US"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZn1US.png"                      alt="bZn1US.png"                ></a></p><p>上图是格式化代码之后的状态，我们发现它停在了Ajax最后发送的那个步骤，即底层的XMLHttpRequest的send方法，可是似乎还是找不到Ajax请求是怎么构造的；前面我们讲过CallStack，通过它我们可以顺着找到前序调用逻辑，所以顺着它一层层找，也可以找到构造Ajax请求的逻辑，最后会找到一个叫做onFetchData的方法，如下图所示:</p><p><a href="https://imgtu.com/i/bZuQMR"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZuQMR.png"                      alt="bZuQMR.png"                ></a></p><p>可以发现，这里的使用了axios库发起了一个Ajax请求，还有limit、offset、token这3个参数，基本就能确定了，顺利找到了突破口！现在我们就不在此展开分析了，后文会有完整的分析过程</p><p>因此我们在某些情况下，我们可以比较容易地通过Ajax断点找到分析的突破口，这是一个常见的寻找JavaScript逆向突破口的方法</p><p>要取消断点也很简单，只需要在XHR/fetch Breakpoint面板取消勾选即可，如下图所示:</p><p><a href="https://imgtu.com/i/bZKpTK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZKpTK.png"                      alt="bZKpTK.png"                ></a></p><h4 id="改写JavaScript文件"><a href="#改写JavaScript文件" class="headerlink" title="改写JavaScript文件"></a>改写JavaScript文件</h4><p>我们知道，一个网页里面的JavaScript是从对应的服务器上下载下来并在浏览器执行，有时候，我们可能想要在调试的过程中对JavaScript做一些修改，比如说有以下需求</p><ul><li>发现JavaScript文件中包含很多阻挠调试的代码、干扰代码、想要将其删除；</li><li>调试到某处，想要加一行console.log输出一些内容，以便观察某个变量或方法在页面加载过程中的调用情况，在某些情况下，这种方法比打断点更方便</li><li>调试过程中遇到某个局部变量或方法，想要把它赋值给window对象以便全局可以访问或调用</li><li>在调试的时候，得到的某个变量中可能包含一些关键的结果，想要加一些逻辑将这些结果转发到对应的目标服务器</li></ul><p>这时候我们可以试着在Source中修改对应的JavaScript代码，但这种更改并不能长久生效，一旦刷新页面，更改就全都没有了；但是实际上我们如果利用一个插件是可以做到的，比如是ReRes，在这个插件中，我们可以添加自定义的JavaScript文件，并配置URL映射规则，这样浏览器在加载某个在线JavaScript文件的时候就可以将内容替换成自定义的JavaScript文件，另外，还有一些代理服务器也可以实现，比如Charles、Fiddler，借助它们可以在加载JavaScript文件时修改对应的URL响应内容，以实现对JavaScript文件的修改</p><p>其实浏览器的开发者工具已经原生支持这个功能了，即浏览器的Overrides功能，他在Sourcrs面板左侧，如下图所示:</p><p><a href="https://imgtu.com/i/bZlYnA"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZlYnA.png"                      alt="bZlYnA.png"                ></a></p><p>我们可以在Overrides面板上选定一个本地的文件夹，用于保存需要更改的JavaScript文件，下面我们来实际操作下</p><p>首先，根据前面设置的Ajax断点的方法，找到对应的构造Ajax请求的位置，根据一些网页开发知识，我们可以大体判断出then后面的回调方法接收的参数a中就包含了Ajax请求的结果，如下图锁示:</p><p><a href="https://imgtu.com/i/bZ1Y2F"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZ1Y2F.png"                      alt="bZ1Y2F.png"                ></a></p><p>我们打算在Ajax请求成功获得响应的时候，在控制台输出响应的结果，也就是通过consloe.log输出变量a</p><p>再切回Override面板，点击+按钮，这时候浏览器会提示我们选择一个本地文件夹，用于存储要替换的JavaScript文件；这里我们选定了一个新建的文件夹ChromeOverrides，注意这时候可能会遇到一个提示，如果没有问题，直接点击“允许”即可</p><p><a href="https://imgtu.com/i/bZ39RU"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZ39RU.png"                      alt="bZ39RU.png"                ></a></p><p>这时，在Overrides面板下就多了ChromeOverrides文件夹，用于存储所有我们想要更改的JavaScript文件，如下图所示:</p><p><a href="https://imgtu.com/i/bZ8Mt0"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZ8Mt0.png"                      alt="bZ8Mt0.png"                ></a></p><p>可以看到，现在所在的JavaScript选项卡是chunk-19c920f8.012555a2.js:formatted，代码已经被格式化了，因为格式化后的代码是无法直接在浏览器中修改的，所以为了方便，我们可以将格式化后的文件复制到文本文件中，然后添加一行代码，修改如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">window</span>[<span class="string">&quot;webpackJsonp&quot;</span>] = <span class="built_in">window</span>[<span class="string">&quot;webpackJsonp&quot;</span>] || []).push([[<span class="string">&quot;chunk-10192a00&quot;</span>], &#123;</span><br><span class="line">    <span class="string">&quot;5a19&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, a, e</span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="string">&quot;79ee&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, a, e</span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">ca9c</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, a, e</span>) </span>&#123;</span><br><span class="line"><span class="meta">        &quot;use strict&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> s = e(<span class="string">&quot;5a19&quot;</span>)</span><br><span class="line">          , n = e.n(s);</span><br><span class="line">        n.a</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d504</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, a, e</span>) </span>&#123;</span><br><span class="line"><span class="meta">        &quot;use strict&quot;</span>;</span><br><span class="line">        e.r(a);</span><br><span class="line">        <span class="keyword">var</span> s = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">this</span></span><br><span class="line">              , a = t.$createElement</span><br><span class="line">              , e = t._self._c || a;</span><br><span class="line">            <span class="keyword">return</span> e(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="string">&quot;index&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, [e(<span class="string">&quot;el-row&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">directives</span>: [&#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&quot;loading&quot;</span>,</span><br><span class="line">                    <span class="attr">rawName</span>: <span class="string">&quot;v-loading&quot;</span>,</span><br><span class="line">                    <span class="attr">value</span>: t.loading,</span><br><span class="line">                    <span class="attr">expression</span>: <span class="string">&quot;loading&quot;</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;, [e(<span class="string">&quot;el-col&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                    <span class="attr">span</span>: <span class="number">18</span>,</span><br><span class="line">                    <span class="attr">offset</span>: <span class="number">3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, t._l(t.movies, (<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> e(<span class="string">&quot;el-card&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">key</span>: a.name,</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;item m-t&quot;</span>,</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">shadow</span>: <span class="string">&quot;hover&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, [e(<span class="string">&quot;el-row&quot;</span>, [e(<span class="string">&quot;el-col&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">xs</span>: <span class="number">8</span>,</span><br><span class="line">                        <span class="attr">sm</span>: <span class="number">6</span>,</span><br><span class="line">                        <span class="attr">md</span>: <span class="number">4</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, [e(<span class="string">&quot;router-link&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">to</span>: &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;detail&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>: &#123;</span><br><span class="line">                                <span class="attr">key</span>: t.transfer(a.id)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, [e(<span class="string">&quot;img&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;cover&quot;</span>,</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">src</span>: a.cover</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)])], <span class="number">1</span>), e(<span class="string">&quot;el-col&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;p-h&quot;</span>,</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">xs</span>: <span class="number">9</span>,</span><br><span class="line">                        <span class="attr">sm</span>: <span class="number">13</span>,</span><br><span class="line">                        <span class="attr">md</span>: <span class="number">16</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, [e(<span class="string">&quot;router-link&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">to</span>: &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;detail&quot;</span>,</span><br><span class="line">                            <span class="attr">params</span>: &#123;</span><br><span class="line">                                <span class="attr">key</span>: t.transfer(a.id)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, [e(<span class="string">&quot;h2&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;m-b-sm&quot;</span></span><br><span class="line">                &#125;, [t._v(t._s(a.name) + <span class="string">&quot; - &quot;</span> + t._s(a.alias))])]), e(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;categories&quot;</span></span><br><span class="line">                &#125;, t._l(a.categories, (<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> e(<span class="string">&quot;el-button&quot;</span>, &#123;</span><br><span class="line">                        <span class="attr">key</span>: a,</span><br><span class="line">                        <span class="attr">staticClass</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">                        <span class="attr">attrs</span>: &#123;</span><br><span class="line">                            <span class="attr">size</span>: <span class="string">&quot;mini&quot;</span>,</span><br><span class="line">                            <span class="attr">type</span>: <span class="string">&quot;primary&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, [t._v(t._s(a) + <span class="string">&quot;\n              &quot;</span>)])</span><br><span class="line">                &#125;</span><br><span class="line">                )), <span class="number">1</span>), e(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;m-v-sm info&quot;</span></span><br><span class="line">                &#125;, [e(<span class="string">&quot;span&quot;</span>, [t._v(t._s(a.regions.join(<span class="string">&quot;、&quot;</span>)))]), e(<span class="string">&quot;span&quot;</span>, [t._v(<span class="string">&quot; / &quot;</span>)]), e(<span class="string">&quot;span&quot;</span>, [t._v(t._s(a.minute) + <span class="string">&quot; 分钟&quot;</span>)])]), e(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;m-v-sm info&quot;</span></span><br><span class="line">                &#125;, [e(<span class="string">&quot;span&quot;</span>, [t._v(t._s(a.published_at) + <span class="string">&quot; 上映&quot;</span>)])])], <span class="number">1</span>), e(<span class="string">&quot;el-col&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">xs</span>: <span class="number">5</span>,</span><br><span class="line">                        <span class="attr">sm</span>: <span class="number">5</span>,</span><br><span class="line">                        <span class="attr">md</span>: <span class="number">4</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, [e(<span class="string">&quot;p&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">staticClass</span>: <span class="string">&quot;score m-t-md m-b-n-sm&quot;</span></span><br><span class="line">                &#125;, [t._v(t._s(a.score.toFixed(<span class="number">1</span>)))]), e(<span class="string">&quot;p&quot;</span>, [e(<span class="string">&quot;el-rate&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">attrs</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: a.score / <span class="number">2</span>,</span><br><span class="line">                        <span class="attr">disabled</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        <span class="attr">max</span>: <span class="number">5</span>,</span><br><span class="line">                        <span class="string">&quot;text-color&quot;</span>: <span class="string">&quot;#ff9900&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)], <span class="number">1</span>)])], <span class="number">1</span>)], <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            )), <span class="number">1</span>)], <span class="number">1</span>), e(<span class="string">&quot;el-row&quot;</span>, [e(<span class="string">&quot;el-col&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                    <span class="attr">span</span>: <span class="number">10</span>,</span><br><span class="line">                    <span class="attr">offset</span>: <span class="number">11</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, [e(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">staticClass</span>: <span class="string">&quot;pagination m-v-lg&quot;</span></span><br><span class="line">            &#125;, [e(<span class="string">&quot;el-pagination&quot;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                    <span class="attr">background</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;current-page&quot;</span>: t.page,</span><br><span class="line">                    <span class="string">&quot;page-size&quot;</span>: t.limit,</span><br><span class="line">                    <span class="attr">layout</span>: <span class="string">&quot;total, prev, pager, next&quot;</span>,</span><br><span class="line">                    <span class="attr">total</span>: t.total</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">on</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;current-change&quot;</span>: t.onPageChange,</span><br><span class="line">                    <span class="string">&quot;update:currentPage&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">                        t.page = a</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;update:current-page&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">                        t.page = a</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)], <span class="number">1</span>)])], <span class="number">1</span>)], <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">          , n = []</span><br><span class="line">          , i = e(<span class="string">&quot;7d92&quot;</span>)</span><br><span class="line">          , r = e(<span class="string">&quot;3e22&quot;</span>)</span><br><span class="line">          , o = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;Index&quot;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">loading</span>: !<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">total</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">page</span>: <span class="built_in">parseInt</span>(<span class="built_in">this</span>.$route.params.page || <span class="number">1</span>),</span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">                    <span class="attr">movies</span>: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.onFetchData()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="attr">transfer</span>: r[<span class="string">&quot;a&quot;</span>],</span><br><span class="line">                <span class="attr">onPageChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&quot;indexPage&quot;</span>,</span><br><span class="line">                        <span class="attr">params</span>: &#123;</span><br><span class="line">                            <span class="attr">page</span>: t</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;),</span><br><span class="line">                    <span class="built_in">this</span>.onFetchData()</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onFetchData</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> t = <span class="built_in">this</span>;</span><br><span class="line">                    <span class="built_in">this</span>.loading = !<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">var</span> a = (<span class="built_in">this</span>.page - <span class="number">1</span>) * <span class="built_in">this</span>.limit</span><br><span class="line">                      , e = <span class="built_in">Object</span>(i[<span class="string">&quot;a&quot;</span>])(<span class="built_in">this</span>.$store.state.url.index, a);</span><br><span class="line">                    <span class="built_in">this</span>.$axios.get(<span class="built_in">this</span>.$store.state.url.index, &#123;</span><br><span class="line">                        <span class="attr">params</span>: &#123;</span><br><span class="line">                            <span class="attr">limit</span>: <span class="built_in">this</span>.limit,</span><br><span class="line">                            <span class="attr">offset</span>: a,</span><br><span class="line">                            <span class="attr">token</span>: e</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).then((<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;response&quot;</span>, a)  <span class="comment">// 添加一行代码</span></span><br><span class="line">                        <span class="keyword">var</span> e = a.data</span><br><span class="line">                          , s = e.results</span><br><span class="line">                          , n = e.count;</span><br><span class="line">                        t.loading = !<span class="number">1</span>,</span><br><span class="line">                        t.movies = s,</span><br><span class="line">                        t.total = n</span><br><span class="line">                    &#125;</span><br><span class="line">                    ))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          , l = o</span><br><span class="line">          , c = (e(<span class="string">&quot;ca9c&quot;</span>),</span><br><span class="line">        e(<span class="string">&quot;e93d&quot;</span>),</span><br><span class="line">        e(<span class="string">&quot;2877&quot;</span>))</span><br><span class="line">          , u = <span class="built_in">Object</span>(c[<span class="string">&quot;a&quot;</span>])(l, s, n, !<span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;8a85e5c6&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        a[<span class="string">&quot;default&quot;</span>] = u.exports</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">e93d</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, a, e</span>) </span>&#123;</span><br><span class="line"><span class="meta">        &quot;use strict&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> s = e(<span class="string">&quot;79ee&quot;</span>)</span><br><span class="line">          , n = e.n(s);</span><br><span class="line">        n.a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bZGGPP"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZGGPP.png"                      alt="bZGGPP.png"                ></a></p><p>然后我们用修改完的代码替换掉对应上面的文件，注意是格式化之前的，比如目前选项卡是chunk-19c920f8.012555a2.js:formatted，那么我们修改的文件就去替换掉chunk-19c920f8.012555a2.js这个JavaScript文件，替换完毕之后保存，这时候再切换回Overrides面板，就可以发现成功生成了新的JavaScript文件，它用于替换原有的JavaScript文件，如下图所示:</p><p><a href="https://imgtu.com/i/bZYA1K"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZYA1K.png"                      alt="bZYA1K.png"                ></a></p><p>好，此时我们取消所有断点，然后刷新页面，就可以在控制台看到输出的响应结果了，如下图所示:</p><p><a href="https://imgtu.com/i/bZtGP1"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZtGP1.png"                      alt="bZtGP1.png"                ></a></p><p>正如我们所料，我们成功将变量a输出，其中的data字段就是Ajax的响应结果了，如下图所示:</p><p><a href="https://imgtu.com/i/bZtHzV"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZtHzV.png"                      alt="bZtHzV.png"                ></a></p><p>结果证明，改写JavaScript成功，而且刷新页面也不会丢失了</p><p>我们还可以增加一些JavaScript逻辑，比如直接将变量a的结果通过API发送到远程服务器，并通过服务器将数据保存下来，也就完成了直接拦截Ajax请求并保存数据的过程了</p><p>修改JavaScript文件有很多用途，此方案可以为我们进行JavaScript逆向带来极大的便利</p><h3 id="JavaScript-Hook的使用"><a href="#JavaScript-Hook的使用" class="headerlink" title="JavaScript Hook的使用"></a>JavaScript Hook的使用</h3><p>前面我们看了断点调试，调用栈查看等技巧，但仅仅凭借这种还是不够的，下面我们再来看看钩子技术—-Hook技术</p><h4 id="什么叫Hook技术"><a href="#什么叫Hook技术" class="headerlink" title="什么叫Hook技术"></a>什么叫Hook技术</h4><p>Hook技术指在程序运行的过程中，对其中的某个方法进行重写，在原先的方法前后加入我们自定义的代码；相当于在系统没有调用该函数之前，钩子函数就先捕获该消息低到控制权，这时钩子函数既可以加工处理该函数的执行行为，也可以强制结束消息的传递</p><p>要对JavaScript代码进行Hook操作，就需要额外在页面中执行一些关于Hook逻辑的自定义代码，那么怎样才能在浏览器中方便地执行我们所期望的JavaScript代码呢，这里就要使用一个插件，叫做Tampermonkey；这个插件的功能非常强大，利用它我们几乎可以在网页中执行任何JavaScript代码，实现我们想要的功能</p><p>下面我们就来介绍下如何使用这款插件</p><h4 id="安装Tampermonkey"><a href="#安装Tampermonkey" class="headerlink" title="安装Tampermonkey"></a>安装Tampermonkey</h4><p>直接官网安装</p><h4 id="获取脚本"><a href="#获取脚本" class="headerlink" title="获取脚本"></a>获取脚本</h4><p>Tampermonkey运行的是JavaScript脚本，我们可以自己写，也可以直接在<a class="link"   href="https://greasyfork.org/zh-CN/scripts%E4%B8%8A%E6%89%BE%E5%88%B0%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%B8%B8%E5%AE%9E%E7%94%A8%E7%9A%84%E8%84%9A%E6%9C%AC%EF%BC%8C%E5%A6%82%E7%99%BE%E5%BA%A6%E4%BA%91%E5%85%A8%E7%BD%91%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%85%A8%E7%BD%91%E8%A7%86%E9%A2%91%E5%8E%BB%E5%B9%BF%E5%91%8A%E7%AD%89" >https://greasyfork.org/zh-CN/scripts上找到一些非常实用的脚本，如百度云全网搜索，全网视频去广告等<i class="fas fa-external-link-alt"></i></a></p><h4 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h4><p>除了使用别人已经写好的脚本之外，我们也可以自己编写想要的功能，我们只需要掌握一些JavaScript语法就好了，另外我们还要遵守一些脚本的写作规范，其中就包括一些参数的设置</p><p>下面我们就来简单实现一个小脚本，首先点击Tampermonkey的图标，再点击管理面板，如下图所示:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_14-46-28.5lojz79uzgg0.webp"                      alt="Snipaste_2022-02-17_14-46-28"                ></p><p>接下来，我们点击右侧的+号然后会出现以下界面:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_14-49-04.pj9xvnepwnk.webp"                      alt="Snipaste_2022-02-17_14-49-04"                ></p><p>初始化的代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        https://picx.xpoet.cn/#/upload</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=xpoet.cn</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>在上面的代码中，最前面是一些注释，它们非常有用，这部分内容叫做UserScript Header，我们可以在里面配置一些脚本的信息，如名称、版本、描述、生效站点等</p><p>下面简单介绍UserScript Header的一些参数定义</p><ul><li>@name: 脚本的名称，就是在控制面板中显示的脚本名称</li><li>@namespace: 脚本的命名空间</li><li>@version: 脚本的版本，主要是做版本更新时用</li><li>@author: 作者</li><li>@description: 脚本描述</li><li>@match: 生效的页面，可以配置多个</li><li>@include: 生效的页面，可以配置多个，但这里并不支持URL Hash</li><li>@exclude: 不生效页面，可配置多个，优先级高于@include和@match</li></ul><p>此外还有很多，可以参考P432</p><p>在UserScript Header下方，是JavaScript函数和调用的代码，其中’use strict’标明代码使用JavaScript的严格模式，在严格模式下，可以消除JavaScript语法的一些不合理、不严谨之处，减少一些怪异的行为，如不能直接使用未声明的变量，这样就可以保证代码运行安全，同时提高构编译器的效率，提高运行速度，在下方//Your code here…处就可以编写自己的代码了</p><h4 id="实战分析"><a href="#实战分析" class="headerlink" title="实战分析"></a>实战分析</h4><p>接下来我们来看一个简单的网站<a class="link"   href="https://login1.scrape.center/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84%E7%BB%93%E6%9E%84%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%EF%BC%8C%E5%8F%AA%E6%9C%89%E7%94%A8%E6%88%B7%E5%90%8D%E6%96%87%E6%9C%AC%E6%A1%86%EF%BC%8C%E4%BD%86%E4%B8%8D%E5%90%8C%E7%9A%84%E6%98%AF%E7%82%B9%E5%87%BB%E7%99%BB%E5%BD%95%E6%8C%89%E9%92%AE%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4POST%E7%9A%84%E5%86%85%E5%AE%B9%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%8D%95%E7%BA%AF%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%EF%BC%8C%E8%80%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84token%EF%BC%8C%E6%88%91%E4%BB%AC%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E7%82%B9%E5%87%BB%E7%99%BB%E5%BD%95%E6%8C%89%E9%92%AE%EF%BC%8C%E6%88%91%E4%BB%AC%E6%9D%A5%E7%9C%8B%E7%9C%8B%E6%98%AF%E4%BB%80%E4%B9%88%E6%95%88%E6%9E%9C" >https://login1.scrape.center/，这个网站的结构非常简单，只有用户名文本框，但不同的是点击登录按钮的时候，表单提交POST的内容并不是单纯的用户名和密码，而是一个加密后的token，我们输入用户名和密码点击登录按钮，我们来看看是什么效果<i class="fas fa-external-link-alt"></i></a>:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_15-07-56.vbsrklzrt0.webp"                      alt="Snipaste_2022-02-17_15-07-56"                ></p><p>我们这里不关注相应的结果和状态，主要看请求的内容就好了，可以看到，点击登录按钮时，发起了一个POST请求，负载为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiJ9</span><br></pre></td></tr></table></figure><p>这里我们就思考了，本身输入的是用户名和密码，但提交的时候却变成了一个token，经过观察和结合一些经验可以看出，token的内容非常像Base64编码；这就代表，网站很可能首先将用户名和密码混为一个新的字符串，然后经过了一次Base64编码，最后将其赋值给token来提交了，所以，经过我们的初步观察，我们可以得到如上信息</p><p>下面我们就来验证下叭:</p><p>首先我们看一下网站的源码，打开source面板，看起来都是webpack打包之后的内容了，经过了一些混淆:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_15-15-56.7asc7oeoruw0.webp"                      alt="Snipaste_2022-02-17_15-15-56"                ></p><p>这么多混淆代码，总不能一点点扒着看叭，遇到这种情形，我们怎么去找token的生成位置呢，解决方法其实有两种，一种就是前文所讲的Ajax断点，另一种就是Hook</p><ul><li><p>Ajax断点</p><p>这个请求正好是Ajax请求，所以我们可以添加一个XHR断点来监听，把POST的网址加到断点上面，在source面板右侧添加一个XHR断点，匹配内容就天禧当前域名，如下图所示:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_15-22-06.15erejk7i8f4.webp"                      alt="Snipaste_2022-02-17_15-22-06"                ></p><p>这时候如果我们再次点击登录按钮，发起一次Ajax请求，就可以进入断点了，然后再看堆栈信息，就可以一步步找到编码的入口了</p><p>再次点击登录按钮，页面进入断点状态，停下来了，结果如下图所示:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_15-25-29.9wjyg3hajjs.webp"                      alt="Snipaste_2022-02-17_15-25-29"                ></p><p>我们一步步找，然后会发现最相似的地方还是在onsubmit方法这里，但是这里断点的栈顶还包括了一些Promise相关的内容，而我们真正想找的是用户名和密码经过处理，再进行Base64编码的地方，这些请求的调用实际上和我们寻找的入口没有很大关系，另外，如果我们想找的入口位置并不伴随这一次Ajax请求，这个方法就没法使用了</p></li><li><p>Hook</p><p>第二种可以快速定位入口的方法就是使用Tampermonkey自定义的JavaScript，实现某个JavaScript的Hook，Hook哪里呢，很明显，Hook Base64编码的位置就好了；这里涉及一个小知识点，JavaScript里面的Base64编码是怎么实现的呢，那就是btoa方法，在JavaScript中该方法用于将字符串编码成Base64字符串，因此我们来Hook btoa就好了</p><p>这里我们新建一个Tampermonkey脚本，其内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         HookBase64</span></span><br><span class="line"><span class="comment">// @namespace    https://login1.scrape.center/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  Hook Base64 encode function</span></span><br><span class="line"><span class="comment">// @author       Joker</span></span><br><span class="line"><span class="comment">// @match        https://login1.scrape.center/</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=xpoet.cn</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params">object, attr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> func = object[attr]</span><br><span class="line">        object[attr] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hooker&#x27;</span>, object, attr)</span><br><span class="line">            <span class="keyword">var</span> ret = func.apply(object, <span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">debugger</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hook(<span class="built_in">window</span>, <span class="string">&#x27;btoa&#x27;</span>)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>首先我们定义了一些UserScript Header，包括@name和@match等，这里比较重要的是@name表示脚本名称，@match代表脚本生效的网址</p><p>接着我们定义了一个hook方法，这里给其传入object和attr参数，意思就是hook object对象的attr参数，例如，如果我们想要hook alert方法，那就把object设置为window，把attr设置为字符串alert；这里我们想要hook Base64的编码方法，而在JavaScript中，Base64的编码是用btoa方法实现的，所以这里我们只需要hook window对象的btoa方法即可</p><p>那么，hook是怎么实现的呢，我们来看一下，<code>var func = object[attr]</code>相当于我们先把它赋值为一个变量，即我们调用func方法就可以实现和原来一样的功能，接着，我们直接改写这个方法将object[attr]改写成一个新的方法，在新的方法中，通过func.apply方法又重新调用了原来的方法，这样我们就能保证前后方法的执行效果不受影响的，之前这个方法该干啥还干啥</p><p>但是和之前不同的是，现在我们自定义方法之后，可以在func方法执行前后加入自己的代码，如通过consloe.log将信息输出到控制台，通过debugger进入断点等，在这个过程中，我们先临时保存下来func方法，然后重新定义一个新的方法，接管程序控制权，在其中自定义我们想要的实现，同时在新的方法里面重新调回func方法，保证前后结果不受影响，这就是hook的过程</p><p>最后，我们调用hook方法，传入window对象和btoa字符串，保存</p><p>接下来刷新页面，这时我们可以看到这个脚本在当前页面生效了，Tampermonkey插件面板提示了已经启用，同时，在Sources面板下的Page选项卡中，可以观察到我们定义的JavaScript脚本被执行了，如下图所示:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_16-09-14.6vmr09tihf40.webp"                      alt="Snipaste_2022-02-17_16-09-14"                ></p><p>同时我们输入用户名和密码，然后点击登录按钮，成功进入断点模式并停下来了，代码就卡在我们定义的debugger这行代码的位置，如上图所示</p><p>成功hook住了，这说明JavaScript代码在执行过程中调用到了btoa方法，这时看一下控制台，如下图所示，这里也输出了window对象和btoa方法，验证正确:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_16-14-17.1ogd6fyw1ozk.webp"                      alt="Snipaste_2022-02-17_16-14-17"                ></p><p>这样我们就顺利找到了Base64编码操作这个入口，然后看一下堆栈信息，已经不会出现Promise相关的信息了，其中清晰地呈现了btoa方法逐层调用的过程，如下图所示:我们这里来了解下JavaScript中的Promise:<a class="link"   href="https://www.cnblogs.com/ming1025/p/13092502.html" >https://www.cnblogs.com/ming1025/p/13092502.html<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_16-21-04.4bp2v7k2bj80.webp"                      alt="Snipaste_2022-02-17_16-21-04"                ></p><p>顺便另外再观察下Local面板，看看arguments变量是怎样的:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-17_16-23-24.38z819bxam80.webp"                      alt="Snipaste_2022-02-17_16-23-24"                ></p><p>可以说一目了然，arguments就是传给btoa方法的参数，ret就是btoa方法返回的结果，可以看到，arguments就是username和password通过json序列化之后的字符串，经过Base64编码之后得到的值恰好是Ajax请求参数token的值</p><p>我们通过调用栈也可找到onSubmit方法的处理源码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onSubmit: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> e = c.encode(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.form));</span><br><span class="line">                    <span class="built_in">this</span>.$http.post(a[<span class="string">&quot;a&quot;</span>].state.url.root, &#123;</span><br><span class="line">                        <span class="attr">token</span>: e</span><br><span class="line">                    &#125;).then((<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;data&quot;</span>, e)</span><br><span class="line">                    &#125;</span><br><span class="line">                    ))</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>我们发现encode方法其实就是调用了btoa方法，就是一个Base64的编码过程</p><p>我们还可以进一步添加断点验证下流程，我们在encode那一行添加断点，然后点击跳到下一个断点:</p><p><a href="https://imgtu.com/i/H5LQW4"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/H5LQW4.png"                      alt="H5LQW4.png"                ></a></p><p>然后我们重新点击登录按钮，可以看到这时候断点就停在当前添加断点的地方，这时候我们可以在watch中输入this.form来查看是否在表单中输入的用户名和密码:</p><p><a href="https://imgtu.com/i/H5OV9e"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/H5OV9e.png"                      alt="H5OV9e.png"                ></a></p><p>逐步调试，然后我们还可以观察到，下一步就跳到了我们hook的位置，这说明调用了bota方法，可以看到返回的值就是token的值</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220217/Snipaste_2022-02-17_16-50-27.72osce73oxw0.webp"                      alt="Snipaste_2022-02-17_16-50-27"                ></p></li></ul><h3 id="无限debugger的原理与绕过"><a href="#无限debugger的原理与绕过" class="headerlink" title="无限debugger的原理与绕过"></a>无限debugger的原理与绕过</h3><p>在上面中，我们接触到了一个关键词叫debugger，这是JavaScript中定义的一个专门用于断点调试的关键字，只要遇到它，JavaScript的执行便会在此处中断，进入调试模式</p><p>上面我们很方便得用到了debugger关键字，然后帮助我们定位了代码，但是有时候，debugger会被网站开发者利用，使其成为阻挠我们正常调试的拦路虎</p><p>下面我们就来具体看一个案例:</p><h4 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h4><p>网址: <a class="link"   href="https://antispider8.scrape.center/" >https://antispider8.scrape.center/<i class="fas fa-external-link-alt"></i></a></p><p>进入这个网站我们一旦打开开发者工具就会发现它立即进入了断点模式，如下图所示:</p><p><a href="https://imgtu.com/i/H5vP7q"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/H5vP7q.png"                      alt="H5vP7q.png"                ></a></p><p>我们既没有设置任何断点，也没有执行任何额外的脚本，她直接就进入了断点模式，这时不管我们点击多少次小三角形都会进入下一个断点，我们称之为无限debugger，那这怎么办呢，我们不能正常添加断点了嘛，办法当然是有的，我们往下看:</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>我们首先要做的是找到无限debugger的源头，在Source面板中可以看到，debugger关键字出现在一个JavaScript文件里，这时我们点击左下角的格式化按钮，如下所示:</p><p><a href="https://imgtu.com/i/H5xnG8"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/H5xnG8.png"                      alt="H5xnG8.png"                ></a></p><p>可以发现这里通过setInterval循环，每秒执行1次debugger语句，当然还有很多种实现方式，比如无限for循环、无限while循环、无限递归调用等，他们都可以实现这样的效果，原理大同小异</p><p>了解了原理，下面我们就对症下药叭</p><h4 id="禁用断点"><a href="#禁用断点" class="headerlink" title="禁用断点"></a>禁用断点</h4><p>因为debugger其实就是对应的一个断点，它相当于用代码显式地声明了一个断点，要解除它，我们只需要禁用这个断点就好了，首先我们可以禁用所有断点，但是这不是一个好方法:</p><p><a href="https://imgtu.com/i/H5zD1S"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/H5zD1S.png"                      alt="H5zD1S.png"                ></a></p><p>因为禁用了所有断点之后我们也无法在其他地方打断点</p><p>这个时候我们可以选择禁用局部断点，取消刚刚的全局断点模式，页面会重新进入无限debugger模式，这时我们可能会想着去掉Breakpoint里勾选的断点，其实这样是没有用的，Breakpoint</p><p>只代表了我们手动添加的断点，对于debugger关键字声明的断点，这里取消是没有用的，我们可以先将Breakpoint里面的断点删除，然后在debugger语句所在行号上单击鼠标右键，此时会出现一个快捷菜单，我们选择Never pause here，意思是从不在此处暂停，做了以上操作后，页面会变成如下界面:</p><p><a href="https://imgtu.com/i/HIppGV"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/HIppGV.png"                      alt="HIppGV.png"                ></a></p><p>当前断点会显示为橙色，并且断点前面多了一个?符号，同时Breakpoint也出现了刚才添加的断点位置，这时再次点击小三角形按钮，就会发现我们不会再进入无限debugger模式了</p><p>当然，我们还可以选择另外一个选项Add conditional breakpoint，这个模式更加高级，我们可以设置进入断点的条件，比如在调试过程中，期望某个变量的值大于某个具体值的时候才停下来；但在本案例中，由于这里是无限循环，我们没有什么具体的变量可以作为判定依据，因此可以直接写一个简单的表达式来控制，我们选择Add conditional breakpoint 选项，直接填入false即可，此时效果就和选择Never paused here一样了，也可以解决无限debugger</p><h4 id="替换文件"><a href="#替换文件" class="headerlink" title="替换文件"></a>替换文件</h4><p>前面我们提了下Overrides面板的用法，利用它我们可以将远程的JavaScript文件替换成本地的JavaScript文件，这里我们依然可以使用这个方法来对文件进行替换，替换成什么呢?</p><p>很简单，我们只需要在新文件中把debugger这个关键字删除即可然后放在原有位置即可</p><h3 id="使用Python模拟执行JavaScript"><a href="#使用Python模拟执行JavaScript" class="headerlink" title="使用Python模拟执行JavaScript"></a>使用Python模拟执行JavaScript</h3><p>前面我们找到加密逻辑，简单的我们可以用Python还原，但是一旦遇到复杂的，我们就很难再用Python去直接执行还原了，这个时候我们就可以用Python模拟执行JavaScript；加密相关的方法通常会引用一些相关标准库，比如说JavaScript就有一个广泛使用的库，叫做crypot-js，这个库实现了很多主流的加密算法，包括对称加密、非对称加密、字符编码等；比如对于AES加密我们需要输入待加密文本和加密秘钥，示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ciphertext = CryptoJs.AES.encrypt(message, key).toString();</span><br></pre></td></tr></table></figure><p>对于这样的情况，我们其实就没法很轻易的完全重写一遍，因为Python中并不一定有和JavaScript完全一样的类库，其实我们可以用Python直接模拟执行JavaScript即可</p><h4 id="案例引入"><a href="#案例引入" class="headerlink" title="案例引入"></a>案例引入</h4><p>目标网站: <a class="link"   href="https://spa7.scrape.center/" >https://spa7.scrape.center/<i class="fas fa-external-link-alt"></i></a></p><p>这是个NBA球星网站，每个卡片都有个加密字符串，这里我们要做的就是找出这个加密字符串的加密算法并用程序把加密过程模拟出来</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>首先我们要安装一个库叫PyExecjs:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyexecjs</span><br></pre></td></tr></table></figure><p>然后我们还需要安装一个JavaScript的运行环境Nodejs，安装如有问题请参考: <a class="link"   href="https://setup.scrape.center/pyexecjs" >https://setup.scrape.center/pyexecjs<i class="fas fa-external-link-alt"></i></a></p><p>以上步骤完了之后然后我们来检测下是否都安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="built_in">print</span>(execjs.get().name)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/HIuPbt"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/HIuPbt.png"                      alt="HIuPbt.png"                ></a></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们打开网站，然后去找一下加密字符串的生成逻辑，我们很快发现就在main.js中，首先定义了一个球员信息表，然后对于每一个球员，我们调用加密算法对其信息进行加密</p><p><a href="https://imgtu.com/i/HIKZo6"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/HIKZo6.png"                      alt="HIKZo6.png"                ></a></p><p>可以看到，getToken方法的输入就是单个球员的信息，就是上述列表的一个元素对象，然后this.key是一个固定的字符串；整个加密逻辑就是提取球员的名字、生日、身高、体重接着先进行Base64编码，然后进行DES加密，最后返回结果；其加密算法就是依赖了crypto-js库，使用CryproJs对象来实现的</p><p>那么CryproJs这个对象是哪里来的呢，总不能凭空产生叭，其实这个网站是直接引用了crypto-js库，如下图所示:</p><p><a href="https://imgtu.com/i/HIKOpD"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/17/HIKOpD.png"                      alt="HIKOpD.png"                ></a></p><p>执行crypto-js库对应的这个JavaScript文件后，CryproJs就被注入了浏览器全局环境下，因此我们就可以在别的地方直接使用CryproJs对象里的方法了</p><h4 id="模拟调用"><a href="#模拟调用" class="headerlink" title="模拟调用"></a>模拟调用</h4><p>首先我们要明确我们要模拟的是哪个方法，输入球员的信息，得到最终的加密字符串，这里我们直接把key替换掉，稍微改写下这个方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getToken</span>(<span class="params">player</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> key = CryptoJS.enc.Utf8.parse(<span class="string">&#x27;fipFfVsZsTda94hJNKJfLoaqyqMZFFimwLt&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> &#123;name, birthday, height, weight&#125; = player</span><br><span class="line">      <span class="keyword">let</span> base64Name = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(name))</span><br><span class="line">      <span class="keyword">let</span> encrypted = CryptoJS.DES.encrypt(<span class="string">`<span class="subst">$&#123;base64Name&#125;</span><span class="subst">$&#123;birthday&#125;</span><span class="subst">$&#123;height&#125;</span><span class="subst">$&#123;weight&#125;</span>`</span>, key, &#123;</span><br><span class="line">        <span class="attr">mode</span>: CryptoJS.mode.ECB,</span><br><span class="line">        <span class="attr">padding</span>: CryptoJS.pad.Pkcs7</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> encrypted.toString()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>执行这个方法需要CryptoJS这个对象，我们直接调用这个方法肯定会报错，所以我们再模拟执行<code>crypto-js.min.js</code>，所以我们需要模拟执行的内容就是以下两部分:</p><ul><li>模拟运行crypto-js.min.js里面的JavaScript，用于声明CryptoJS对象</li><li>模拟运行getToken方法的定义，用于声明getToken方法</li></ul><p>接下来，我们就把crypto-js.min.js里面的代码和上面的getToken方法的代码复制下，都粘贴到一个JavaScript文件里面，比如就叫做crypto.js，接下来，我们就用PyExecJS来模拟执行下，代码如下:</p><p>crypto.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br><span class="line">2701</span><br><span class="line">2702</span><br><span class="line">2703</span><br><span class="line">2704</span><br><span class="line">2705</span><br><span class="line">2706</span><br><span class="line">2707</span><br><span class="line">2708</span><br><span class="line">2709</span><br><span class="line">2710</span><br><span class="line">2711</span><br><span class="line">2712</span><br><span class="line">2713</span><br><span class="line">2714</span><br><span class="line">2715</span><br><span class="line">2716</span><br><span class="line">2717</span><br><span class="line">2718</span><br><span class="line">2719</span><br><span class="line">2720</span><br><span class="line">2721</span><br><span class="line">2722</span><br><span class="line">2723</span><br><span class="line">2724</span><br><span class="line">2725</span><br><span class="line">2726</span><br><span class="line">2727</span><br><span class="line">2728</span><br><span class="line">2729</span><br><span class="line">2730</span><br><span class="line">2731</span><br><span class="line">2732</span><br><span class="line">2733</span><br><span class="line">2734</span><br><span class="line">2735</span><br><span class="line">2736</span><br><span class="line">2737</span><br><span class="line">2738</span><br><span class="line">2739</span><br><span class="line">2740</span><br><span class="line">2741</span><br><span class="line">2742</span><br><span class="line">2743</span><br><span class="line">2744</span><br><span class="line">2745</span><br><span class="line">2746</span><br><span class="line">2747</span><br><span class="line">2748</span><br><span class="line">2749</span><br><span class="line">2750</span><br><span class="line">2751</span><br><span class="line">2752</span><br><span class="line">2753</span><br><span class="line">2754</span><br><span class="line">2755</span><br><span class="line">2756</span><br><span class="line">2757</span><br><span class="line">2758</span><br><span class="line">2759</span><br><span class="line">2760</span><br><span class="line">2761</span><br><span class="line">2762</span><br><span class="line">2763</span><br><span class="line">2764</span><br><span class="line">2765</span><br><span class="line">2766</span><br><span class="line">2767</span><br><span class="line">2768</span><br><span class="line">2769</span><br><span class="line">2770</span><br><span class="line">2771</span><br><span class="line">2772</span><br><span class="line">2773</span><br><span class="line">2774</span><br><span class="line">2775</span><br><span class="line">2776</span><br><span class="line">2777</span><br><span class="line">2778</span><br><span class="line">2779</span><br><span class="line">2780</span><br><span class="line">2781</span><br><span class="line">2782</span><br><span class="line">2783</span><br><span class="line">2784</span><br><span class="line">2785</span><br><span class="line">2786</span><br><span class="line">2787</span><br><span class="line">2788</span><br><span class="line">2789</span><br><span class="line">2790</span><br><span class="line">2791</span><br><span class="line">2792</span><br><span class="line">2793</span><br><span class="line">2794</span><br><span class="line">2795</span><br><span class="line">2796</span><br><span class="line">2797</span><br><span class="line">2798</span><br><span class="line">2799</span><br><span class="line">2800</span><br><span class="line">2801</span><br><span class="line">2802</span><br><span class="line">2803</span><br><span class="line">2804</span><br><span class="line">2805</span><br><span class="line">2806</span><br><span class="line">2807</span><br><span class="line">2808</span><br><span class="line">2809</span><br><span class="line">2810</span><br><span class="line">2811</span><br><span class="line">2812</span><br><span class="line">2813</span><br><span class="line">2814</span><br><span class="line">2815</span><br><span class="line">2816</span><br><span class="line">2817</span><br><span class="line">2818</span><br><span class="line">2819</span><br><span class="line">2820</span><br><span class="line">2821</span><br><span class="line">2822</span><br><span class="line">2823</span><br><span class="line">2824</span><br><span class="line">2825</span><br><span class="line">2826</span><br><span class="line">2827</span><br><span class="line">2828</span><br><span class="line">2829</span><br><span class="line">2830</span><br><span class="line">2831</span><br><span class="line">2832</span><br><span class="line">2833</span><br><span class="line">2834</span><br><span class="line">2835</span><br><span class="line">2836</span><br><span class="line">2837</span><br><span class="line">2838</span><br><span class="line">2839</span><br><span class="line">2840</span><br><span class="line">2841</span><br><span class="line">2842</span><br><span class="line">2843</span><br><span class="line">2844</span><br><span class="line">2845</span><br><span class="line">2846</span><br><span class="line">2847</span><br><span class="line">2848</span><br><span class="line">2849</span><br><span class="line">2850</span><br><span class="line">2851</span><br><span class="line">2852</span><br><span class="line">2853</span><br><span class="line">2854</span><br><span class="line">2855</span><br><span class="line">2856</span><br><span class="line">2857</span><br><span class="line">2858</span><br><span class="line">2859</span><br><span class="line">2860</span><br><span class="line">2861</span><br><span class="line">2862</span><br><span class="line">2863</span><br><span class="line">2864</span><br><span class="line">2865</span><br><span class="line">2866</span><br><span class="line">2867</span><br><span class="line">2868</span><br><span class="line">2869</span><br><span class="line">2870</span><br><span class="line">2871</span><br><span class="line">2872</span><br><span class="line">2873</span><br><span class="line">2874</span><br><span class="line">2875</span><br><span class="line">2876</span><br><span class="line">2877</span><br><span class="line">2878</span><br><span class="line">2879</span><br><span class="line">2880</span><br><span class="line">2881</span><br><span class="line">2882</span><br><span class="line">2883</span><br><span class="line">2884</span><br><span class="line">2885</span><br><span class="line">2886</span><br><span class="line">2887</span><br><span class="line">2888</span><br><span class="line">2889</span><br><span class="line">2890</span><br><span class="line">2891</span><br><span class="line">2892</span><br><span class="line">2893</span><br><span class="line">2894</span><br><span class="line">2895</span><br><span class="line">2896</span><br><span class="line">2897</span><br><span class="line">2898</span><br><span class="line">2899</span><br><span class="line">2900</span><br><span class="line">2901</span><br><span class="line">2902</span><br><span class="line">2903</span><br><span class="line">2904</span><br><span class="line">2905</span><br><span class="line">2906</span><br><span class="line">2907</span><br><span class="line">2908</span><br><span class="line">2909</span><br><span class="line">2910</span><br><span class="line">2911</span><br><span class="line">2912</span><br><span class="line">2913</span><br><span class="line">2914</span><br><span class="line">2915</span><br><span class="line">2916</span><br><span class="line">2917</span><br><span class="line">2918</span><br><span class="line">2919</span><br><span class="line">2920</span><br><span class="line">2921</span><br><span class="line">2922</span><br><span class="line">2923</span><br><span class="line">2924</span><br><span class="line">2925</span><br><span class="line">2926</span><br><span class="line">2927</span><br><span class="line">2928</span><br><span class="line">2929</span><br><span class="line">2930</span><br><span class="line">2931</span><br><span class="line">2932</span><br><span class="line">2933</span><br><span class="line">2934</span><br><span class="line">2935</span><br><span class="line">2936</span><br><span class="line">2937</span><br><span class="line">2938</span><br><span class="line">2939</span><br><span class="line">2940</span><br><span class="line">2941</span><br><span class="line">2942</span><br><span class="line">2943</span><br><span class="line">2944</span><br><span class="line">2945</span><br><span class="line">2946</span><br><span class="line">2947</span><br><span class="line">2948</span><br><span class="line">2949</span><br><span class="line">2950</span><br><span class="line">2951</span><br><span class="line">2952</span><br><span class="line">2953</span><br><span class="line">2954</span><br><span class="line">2955</span><br><span class="line">2956</span><br><span class="line">2957</span><br><span class="line">2958</span><br><span class="line">2959</span><br><span class="line">2960</span><br><span class="line">2961</span><br><span class="line">2962</span><br><span class="line">2963</span><br><span class="line">2964</span><br><span class="line">2965</span><br><span class="line">2966</span><br><span class="line">2967</span><br><span class="line">2968</span><br><span class="line">2969</span><br><span class="line">2970</span><br><span class="line">2971</span><br><span class="line">2972</span><br><span class="line">2973</span><br><span class="line">2974</span><br><span class="line">2975</span><br><span class="line">2976</span><br><span class="line">2977</span><br><span class="line">2978</span><br><span class="line">2979</span><br><span class="line">2980</span><br><span class="line">2981</span><br><span class="line">2982</span><br><span class="line">2983</span><br><span class="line">2984</span><br><span class="line">2985</span><br><span class="line">2986</span><br><span class="line">2987</span><br><span class="line">2988</span><br><span class="line">2989</span><br><span class="line">2990</span><br><span class="line">2991</span><br><span class="line">2992</span><br><span class="line">2993</span><br><span class="line">2994</span><br><span class="line">2995</span><br><span class="line">2996</span><br><span class="line">2997</span><br><span class="line">2998</span><br><span class="line">2999</span><br><span class="line">3000</span><br><span class="line">3001</span><br><span class="line">3002</span><br><span class="line">3003</span><br><span class="line">3004</span><br><span class="line">3005</span><br><span class="line">3006</span><br><span class="line">3007</span><br><span class="line">3008</span><br><span class="line">3009</span><br><span class="line">3010</span><br><span class="line">3011</span><br><span class="line">3012</span><br><span class="line">3013</span><br><span class="line">3014</span><br><span class="line">3015</span><br><span class="line">3016</span><br><span class="line">3017</span><br><span class="line">3018</span><br><span class="line">3019</span><br><span class="line">3020</span><br><span class="line">3021</span><br><span class="line">3022</span><br><span class="line">3023</span><br><span class="line">3024</span><br><span class="line">3025</span><br><span class="line">3026</span><br><span class="line">3027</span><br><span class="line">3028</span><br><span class="line">3029</span><br><span class="line">3030</span><br><span class="line">3031</span><br><span class="line">3032</span><br><span class="line">3033</span><br><span class="line">3034</span><br><span class="line">3035</span><br><span class="line">3036</span><br><span class="line">3037</span><br><span class="line">3038</span><br><span class="line">3039</span><br><span class="line">3040</span><br><span class="line">3041</span><br><span class="line">3042</span><br><span class="line">3043</span><br><span class="line">3044</span><br><span class="line">3045</span><br><span class="line">3046</span><br><span class="line">3047</span><br><span class="line">3048</span><br><span class="line">3049</span><br><span class="line">3050</span><br><span class="line">3051</span><br><span class="line">3052</span><br><span class="line">3053</span><br><span class="line">3054</span><br><span class="line">3055</span><br><span class="line">3056</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">  CryptoJS = e();</span><br><span class="line">  <span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">exports</span></span><br><span class="line">    ? (<span class="built_in">module</span>.exports = <span class="built_in">exports</span> = e())</span><br><span class="line">    : <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> define &amp;&amp; define.amd</span><br><span class="line">    ? define([], e)</span><br><span class="line">    : (t.CryptoJS = e());</span><br><span class="line">&#125;)(<span class="built_in">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> h,</span><br><span class="line">    t,</span><br><span class="line">    e,</span><br><span class="line">    r,</span><br><span class="line">    i,</span><br><span class="line">    n,</span><br><span class="line">    f,</span><br><span class="line">    o,</span><br><span class="line">    s,</span><br><span class="line">    c,</span><br><span class="line">    a,</span><br><span class="line">    l,</span><br><span class="line">    d,</span><br><span class="line">    m,</span><br><span class="line">    x,</span><br><span class="line">    b,</span><br><span class="line">    H,</span><br><span class="line">    z,</span><br><span class="line">    A,</span><br><span class="line">    u,</span><br><span class="line">    p,</span><br><span class="line">    _,</span><br><span class="line">    v,</span><br><span class="line">    y,</span><br><span class="line">    g,</span><br><span class="line">    B,</span><br><span class="line">    w,</span><br><span class="line">    k,</span><br><span class="line">    S,</span><br><span class="line">    C,</span><br><span class="line">    D,</span><br><span class="line">    E,</span><br><span class="line">    R,</span><br><span class="line">    M,</span><br><span class="line">    F,</span><br><span class="line">    P,</span><br><span class="line">    W,</span><br><span class="line">    O,</span><br><span class="line">    I,</span><br><span class="line">    U,</span><br><span class="line">    K,</span><br><span class="line">    X,</span><br><span class="line">    L,</span><br><span class="line">    j,</span><br><span class="line">    N,</span><br><span class="line">    T,</span><br><span class="line">    q,</span><br><span class="line">    Z,</span><br><span class="line">    V,</span><br><span class="line">    G,</span><br><span class="line">    J,</span><br><span class="line">    $,</span><br><span class="line">    Q,</span><br><span class="line">    Y,</span><br><span class="line">    tt,</span><br><span class="line">    et,</span><br><span class="line">    rt,</span><br><span class="line">    it,</span><br><span class="line">    nt,</span><br><span class="line">    ot,</span><br><span class="line">    st,</span><br><span class="line">    ct,</span><br><span class="line">    at,</span><br><span class="line">    ht,</span><br><span class="line">    lt,</span><br><span class="line">    ft,</span><br><span class="line">    dt,</span><br><span class="line">    ut,</span><br><span class="line">    pt,</span><br><span class="line">    _t,</span><br><span class="line">    vt,</span><br><span class="line">    yt,</span><br><span class="line">    gt,</span><br><span class="line">    Bt,</span><br><span class="line">    wt,</span><br><span class="line">    kt,</span><br><span class="line">    St,</span><br><span class="line">    bt =</span><br><span class="line">      bt ||</span><br><span class="line">      (<span class="function"><span class="keyword">function</span> (<span class="params">l</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">window</span> &amp;&amp; <span class="built_in">window</span>.crypto &amp;&amp; (t = <span class="built_in">window</span>.crypto),</span><br><span class="line">          !t &amp;&amp;</span><br><span class="line">            <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">window</span> &amp;&amp;</span><br><span class="line">            <span class="built_in">window</span>.msCrypto &amp;&amp;</span><br><span class="line">            (t = <span class="built_in">window</span>.msCrypto),</span><br><span class="line">          !t &amp;&amp;</span><br><span class="line">            <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">global</span> &amp;&amp;</span><br><span class="line">            <span class="built_in">global</span>.crypto &amp;&amp;</span><br><span class="line">            (t = <span class="built_in">global</span>.crypto),</span><br><span class="line">          !t &amp;&amp; <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">require</span>)</span><br><span class="line">        )</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            t = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (t) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> t.getRandomValues)</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> t.getRandomValues(<span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">1</span>))[<span class="number">0</span>];</span><br><span class="line">              &#125; <span class="keyword">catch</span> (t) &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> t.randomBytes)</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> t.randomBytes(<span class="number">4</span>).readInt32LE();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (t) &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">            <span class="string">&quot;Native crypto module could not be used to get secure random number.&quot;</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> r =</span><br><span class="line">          <span class="built_in">Object</span>.create ||</span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e;</span><br><span class="line">            <span class="keyword">return</span> (n.prototype = t), (e = <span class="keyword">new</span> n()), (n.prototype = <span class="literal">null</span>), e;</span><br><span class="line">          &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> e = &#123;&#125;,</span><br><span class="line">          o = (e.lib = &#123;&#125;),</span><br><span class="line">          s = (o.Base = &#123;</span><br><span class="line">            <span class="attr">extend</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> e = r(<span class="built_in">this</span>);</span><br><span class="line">              <span class="keyword">return</span> (</span><br><span class="line">                t &amp;&amp; e.mixIn(t),</span><br><span class="line">                (e.hasOwnProperty(<span class="string">&quot;init&quot;</span>) &amp;&amp; <span class="built_in">this</span>.init !== e.init) ||</span><br><span class="line">                  (e.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    e.$super.init.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                  &#125;),</span><br><span class="line">                ((e.init.prototype = e).$super = <span class="built_in">this</span>),</span><br><span class="line">                e</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">create</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> t = <span class="built_in">this</span>.extend();</span><br><span class="line">              <span class="keyword">return</span> t.init.apply(t, <span class="built_in">arguments</span>), t;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">            <span class="attr">mixIn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> e <span class="keyword">in</span> t) t.hasOwnProperty(e) &amp;&amp; (<span class="built_in">this</span>[e] = t[e]);</span><br><span class="line">              t.hasOwnProperty(<span class="string">&quot;toString&quot;</span>) &amp;&amp; (<span class="built_in">this</span>.toString = t.toString);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.init.prototype.extend(<span class="built_in">this</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">          f = (o.WordArray = s.extend(&#123;</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              (t = <span class="built_in">this</span>.words = t || []),</span><br><span class="line">                (<span class="built_in">this</span>.sigBytes = <span class="literal">null</span> != e ? e : <span class="number">4</span> * t.length);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> (t || a).stringify(<span class="built_in">this</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">concat</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> e = <span class="built_in">this</span>.words,</span><br><span class="line">                r = t.words,</span><br><span class="line">                i = <span class="built_in">this</span>.sigBytes,</span><br><span class="line">                n = t.sigBytes;</span><br><span class="line">              <span class="keyword">if</span> ((<span class="built_in">this</span>.clamp(), i % <span class="number">4</span>))</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; o &lt; n; o++) &#123;</span><br><span class="line">                  <span class="keyword">var</span> s = (r[o &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (o % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>;</span><br><span class="line">                  e[(i + o) &gt;&gt;&gt; <span class="number">2</span>] |= s &lt;&lt; (<span class="number">24</span> - ((i + o) % <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">for</span> (o = <span class="number">0</span>; o &lt; n; o += <span class="number">4</span>) e[(i + o) &gt;&gt;&gt; <span class="number">2</span>] = r[o &gt;&gt;&gt; <span class="number">2</span>];</span><br><span class="line">              <span class="keyword">return</span> (<span class="built_in">this</span>.sigBytes += n), <span class="built_in">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clamp</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> t = <span class="built_in">this</span>.words,</span><br><span class="line">                e = <span class="built_in">this</span>.sigBytes;</span><br><span class="line">              (t[e &gt;&gt;&gt; <span class="number">2</span>] &amp;= <span class="number">4294967295</span> &lt;&lt; (<span class="number">32</span> - (e % <span class="number">4</span>) * <span class="number">8</span>)),</span><br><span class="line">                (t.length = l.ceil(e / <span class="number">4</span>));</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> t = s.clone.call(<span class="built_in">this</span>);</span><br><span class="line">              <span class="keyword">return</span> (t.words = <span class="built_in">this</span>.words.slice(<span class="number">0</span>)), t;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">random</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> e = [], r = <span class="number">0</span>; r &lt; t; r += <span class="number">4</span>) e.push(i());</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> f.init(e, t);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)),</span><br><span class="line">          c = (e.enc = &#123;&#125;),</span><br><span class="line">          a = (c.Hex = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> e = t.words, r = t.sigBytes, i = [], n = <span class="number">0</span>; n &lt; r; n++) &#123;</span><br><span class="line">                <span class="keyword">var</span> o = (e[n &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (n % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>;</span><br><span class="line">                i.push((o &gt;&gt;&gt; <span class="number">4</span>).toString(<span class="number">16</span>)), i.push((<span class="number">15</span> &amp; o).toString(<span class="number">16</span>));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> i.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> e = t.length, r = [], i = <span class="number">0</span>; i &lt; e; i += <span class="number">2</span>)</span><br><span class="line">                r[i &gt;&gt;&gt; <span class="number">3</span>] |=</span><br><span class="line">                  <span class="built_in">parseInt</span>(t.substr(i, <span class="number">2</span>), <span class="number">16</span>) &lt;&lt; (<span class="number">24</span> - (i % <span class="number">8</span>) * <span class="number">4</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> f.init(r, e / <span class="number">2</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">          h = (c.Latin1 = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> e = t.words, r = t.sigBytes, i = [], n = <span class="number">0</span>; n &lt; r; n++) &#123;</span><br><span class="line">                <span class="keyword">var</span> o = (e[n &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (n % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>;</span><br><span class="line">                i.push(<span class="built_in">String</span>.fromCharCode(o));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> i.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> e = t.length, r = [], i = <span class="number">0</span>; i &lt; e; i++)</span><br><span class="line">                r[i &gt;&gt;&gt; <span class="number">2</span>] |= (<span class="number">255</span> &amp; t.charCodeAt(i)) &lt;&lt; (<span class="number">24</span> - (i % <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> f.init(r, e);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">          d = (c.Utf8 = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(h.stringify(t)));</span><br><span class="line">              &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Malformed UTF-8 data&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> h.parse(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(t)));</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">          u = (o.BufferedBlockAlgorithm = s.extend(&#123;</span><br><span class="line">            <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              (<span class="built_in">this</span>._data = <span class="keyword">new</span> f.init()), (<span class="built_in">this</span>._nDataBytes = <span class="number">0</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_append</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t &amp;&amp; (t = d.parse(t)),</span><br><span class="line">                <span class="built_in">this</span>._data.concat(t),</span><br><span class="line">                (<span class="built_in">this</span>._nDataBytes += t.sigBytes);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_process</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> e,</span><br><span class="line">                r = <span class="built_in">this</span>._data,</span><br><span class="line">                i = r.words,</span><br><span class="line">                n = r.sigBytes,</span><br><span class="line">                o = <span class="built_in">this</span>.blockSize,</span><br><span class="line">                s = n / (<span class="number">4</span> * o),</span><br><span class="line">                c =</span><br><span class="line">                  (s = t</span><br><span class="line">                    ? l.ceil(s)</span><br><span class="line">                    : l.max((<span class="number">0</span> | s) - <span class="built_in">this</span>._minBufferSize, <span class="number">0</span>)) * o,</span><br><span class="line">                a = l.min(<span class="number">4</span> * c, n);</span><br><span class="line">              <span class="keyword">if</span> (c) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> h = <span class="number">0</span>; h &lt; c; h += o) <span class="built_in">this</span>._doProcessBlock(i, h);</span><br><span class="line">                (e = i.splice(<span class="number">0</span>, c)), (r.sigBytes -= a);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> f.init(e, a);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> t = s.clone.call(<span class="built_in">this</span>);</span><br><span class="line">              <span class="keyword">return</span> (t._data = <span class="built_in">this</span>._data.clone()), t;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_minBufferSize</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;)),</span><br><span class="line">          p =</span><br><span class="line">            ((o.Hasher = u.extend(&#123;</span><br><span class="line">              <span class="attr">cfg</span>: s.extend(),</span><br><span class="line">              <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                (<span class="built_in">this</span>.cfg = <span class="built_in">this</span>.cfg.extend(t)), <span class="built_in">this</span>.reset();</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                u.reset.call(<span class="built_in">this</span>), <span class="built_in">this</span>._doReset();</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>._append(t), <span class="built_in">this</span>._process(), <span class="built_in">this</span>;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">finalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> t &amp;&amp; <span class="built_in">this</span>._append(t), <span class="built_in">this</span>._doFinalize();</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">blockSize</span>: <span class="number">16</span>,</span><br><span class="line">              <span class="attr">_createHelper</span>: <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> r.init(e).finalize(t);</span><br><span class="line">                &#125;;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">_createHmacHelper</span>: <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> p.HMAC.init(r, e).finalize(t);</span><br><span class="line">                &#125;;</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;)),</span><br><span class="line">            (e.algo = &#123;&#125;));</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">      &#125;)(<span class="built_in">Math</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mt</span>(<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t ^ e ^ r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xt</span>(<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t &amp; e) | (~t &amp; r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Ht</span>(<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t | ~e) ^ r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">zt</span>(<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t &amp; r) | (e &amp; ~r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">At</span>(<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t ^ (e | ~r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Ct</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t &lt;&lt; e) | (t &gt;&gt;&gt; (<span class="number">32</span> - e));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dt</span>(<span class="params">t, e, r, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n,</span><br><span class="line">      o = <span class="built_in">this</span>._iv;</span><br><span class="line">    o ? ((n = o.slice(<span class="number">0</span>)), (<span class="built_in">this</span>._iv = <span class="keyword">void</span> <span class="number">0</span>)) : (n = <span class="built_in">this</span>._prevBlock),</span><br><span class="line">      i.encryptBlock(n, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt; r; s++) t[e + s] ^= n[s];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Et</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">255</span> == ((t &gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>)) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = (t &gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>,</span><br><span class="line">        r = (t &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>,</span><br><span class="line">        i = <span class="number">255</span> &amp; t;</span><br><span class="line">      <span class="number">255</span> === e</span><br><span class="line">        ? ((e = <span class="number">0</span>), <span class="number">255</span> === r ? ((r = <span class="number">0</span>), <span class="number">255</span> === i ? (i = <span class="number">0</span>) : ++i) : ++r)</span><br><span class="line">        : ++e,</span><br><span class="line">        (t = <span class="number">0</span>),</span><br><span class="line">        (t += e &lt;&lt; <span class="number">16</span>),</span><br><span class="line">        (t += r &lt;&lt; <span class="number">8</span>),</span><br><span class="line">        (t += i);</span><br><span class="line">    &#125; <span class="keyword">else</span> t += <span class="number">1</span> &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Rt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">this</span>._X, e = <span class="built_in">this</span>._C, r = <span class="number">0</span>; r &lt; <span class="number">8</span>; r++) ft[r] = e[r];</span><br><span class="line">    (e[<span class="number">0</span>] = (e[<span class="number">0</span>] + <span class="number">1295307597</span> + <span class="built_in">this</span>._b) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">1</span>] = (e[<span class="number">1</span>] + <span class="number">3545052371</span> + (e[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">2</span>] = (e[<span class="number">2</span>] + <span class="number">886263092</span> + (e[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">3</span>] = (e[<span class="number">3</span>] + <span class="number">1295307597</span> + (e[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">4</span>] = (e[<span class="number">4</span>] + <span class="number">3545052371</span> + (e[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">5</span>] = (e[<span class="number">5</span>] + <span class="number">886263092</span> + (e[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">6</span>] = (e[<span class="number">6</span>] + <span class="number">1295307597</span> + (e[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">7</span>] = (e[<span class="number">7</span>] + <span class="number">3545052371</span> + (e[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (<span class="built_in">this</span>._b = e[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; ft[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">8</span>; r++) &#123;</span><br><span class="line">      <span class="keyword">var</span> i = t[r] + e[r],</span><br><span class="line">        n = <span class="number">65535</span> &amp; i,</span><br><span class="line">        o = i &gt;&gt;&gt; <span class="number">16</span>,</span><br><span class="line">        s = ((((n * n) &gt;&gt;&gt; <span class="number">17</span>) + n * o) &gt;&gt;&gt; <span class="number">15</span>) + o * o,</span><br><span class="line">        c = (((<span class="number">4294901760</span> &amp; i) * i) | <span class="number">0</span>) + (((<span class="number">65535</span> &amp; i) * i) | <span class="number">0</span>);</span><br><span class="line">      dt[r] = s ^ c;</span><br><span class="line">    &#125;</span><br><span class="line">    (t[<span class="number">0</span>] =</span><br><span class="line">      (dt[<span class="number">0</span>] +</span><br><span class="line">        ((dt[<span class="number">7</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">        ((dt[<span class="number">6</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">      <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">1</span>] = (dt[<span class="number">1</span>] + ((dt[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) | (dt[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">24</span>)) + dt[<span class="number">7</span>]) | <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">2</span>] =</span><br><span class="line">        (dt[<span class="number">2</span>] +</span><br><span class="line">          ((dt[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">          ((dt[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">        <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">3</span>] = (dt[<span class="number">3</span>] + ((dt[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (dt[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span>)) + dt[<span class="number">1</span>]) | <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">4</span>] =</span><br><span class="line">        (dt[<span class="number">4</span>] +</span><br><span class="line">          ((dt[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">          ((dt[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">        <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">5</span>] = (dt[<span class="number">5</span>] + ((dt[<span class="number">4</span>] &lt;&lt; <span class="number">8</span>) | (dt[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">24</span>)) + dt[<span class="number">3</span>]) | <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">6</span>] =</span><br><span class="line">        (dt[<span class="number">6</span>] +</span><br><span class="line">          ((dt[<span class="number">5</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">          ((dt[<span class="number">4</span>] &lt;&lt; <span class="number">16</span>) | (dt[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">        <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">7</span>] = (dt[<span class="number">7</span>] + ((dt[<span class="number">6</span>] &lt;&lt; <span class="number">8</span>) | (dt[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">24</span>)) + dt[<span class="number">5</span>]) | <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Mt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">this</span>._X, e = <span class="built_in">this</span>._C, r = <span class="number">0</span>; r &lt; <span class="number">8</span>; r++) wt[r] = e[r];</span><br><span class="line">    (e[<span class="number">0</span>] = (e[<span class="number">0</span>] + <span class="number">1295307597</span> + <span class="built_in">this</span>._b) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">1</span>] = (e[<span class="number">1</span>] + <span class="number">3545052371</span> + (e[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">2</span>] = (e[<span class="number">2</span>] + <span class="number">886263092</span> + (e[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">3</span>] = (e[<span class="number">3</span>] + <span class="number">1295307597</span> + (e[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">4</span>] = (e[<span class="number">4</span>] + <span class="number">3545052371</span> + (e[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">5</span>] = (e[<span class="number">5</span>] + <span class="number">886263092</span> + (e[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">6</span>] = (e[<span class="number">6</span>] + <span class="number">1295307597</span> + (e[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (e[<span class="number">7</span>] = (e[<span class="number">7</span>] + <span class="number">3545052371</span> + (e[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) | <span class="number">0</span>),</span><br><span class="line">      (<span class="built_in">this</span>._b = e[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">0</span> &lt; wt[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">8</span>; r++) &#123;</span><br><span class="line">      <span class="keyword">var</span> i = t[r] + e[r],</span><br><span class="line">        n = <span class="number">65535</span> &amp; i,</span><br><span class="line">        o = i &gt;&gt;&gt; <span class="number">16</span>,</span><br><span class="line">        s = ((((n * n) &gt;&gt;&gt; <span class="number">17</span>) + n * o) &gt;&gt;&gt; <span class="number">15</span>) + o * o,</span><br><span class="line">        c = (((<span class="number">4294901760</span> &amp; i) * i) | <span class="number">0</span>) + (((<span class="number">65535</span> &amp; i) * i) | <span class="number">0</span>);</span><br><span class="line">      kt[r] = s ^ c;</span><br><span class="line">    &#125;</span><br><span class="line">    (t[<span class="number">0</span>] =</span><br><span class="line">      (kt[<span class="number">0</span>] +</span><br><span class="line">        ((kt[<span class="number">7</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">        ((kt[<span class="number">6</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">      <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">1</span>] = (kt[<span class="number">1</span>] + ((kt[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) | (kt[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">24</span>)) + kt[<span class="number">7</span>]) | <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">2</span>] =</span><br><span class="line">        (kt[<span class="number">2</span>] +</span><br><span class="line">          ((kt[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">          ((kt[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">        <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">3</span>] = (kt[<span class="number">3</span>] + ((kt[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (kt[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span>)) + kt[<span class="number">1</span>]) | <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">4</span>] =</span><br><span class="line">        (kt[<span class="number">4</span>] +</span><br><span class="line">          ((kt[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">          ((kt[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">        <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">5</span>] = (kt[<span class="number">5</span>] + ((kt[<span class="number">4</span>] &lt;&lt; <span class="number">8</span>) | (kt[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">24</span>)) + kt[<span class="number">3</span>]) | <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">6</span>] =</span><br><span class="line">        (kt[<span class="number">6</span>] +</span><br><span class="line">          ((kt[<span class="number">5</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">16</span>)) +</span><br><span class="line">          ((kt[<span class="number">4</span>] &lt;&lt; <span class="number">16</span>) | (kt[<span class="number">4</span>] &gt;&gt;&gt; <span class="number">16</span>))) |</span><br><span class="line">        <span class="number">0</span>),</span><br><span class="line">      (t[<span class="number">7</span>] = (kt[<span class="number">7</span>] + ((kt[<span class="number">6</span>] &lt;&lt; <span class="number">8</span>) | (kt[<span class="number">6</span>] &gt;&gt;&gt; <span class="number">24</span>)) + kt[<span class="number">5</span>]) | <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (h = bt.lib.WordArray),</span><br><span class="line">    (bt.enc.Base64 = &#123;</span><br><span class="line">      <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = t.words,</span><br><span class="line">          r = t.sigBytes,</span><br><span class="line">          i = <span class="built_in">this</span>._map;</span><br><span class="line">        t.clamp();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = [], o = <span class="number">0</span>; o &lt; r; o += <span class="number">3</span>)</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> s =</span><br><span class="line">                (((e[o &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (o % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                (((e[(o + <span class="number">1</span>) &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - ((o + <span class="number">1</span>) % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                ((e[(o + <span class="number">2</span>) &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - ((o + <span class="number">2</span>) % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>),</span><br><span class="line">              c = <span class="number">0</span>;</span><br><span class="line">            c &lt; <span class="number">4</span> &amp;&amp; o + <span class="number">0.75</span> * c &lt; r;</span><br><span class="line">            c++</span><br><span class="line">          )</span><br><span class="line">            n.push(i.charAt((s &gt;&gt;&gt; (<span class="number">6</span> * (<span class="number">3</span> - c))) &amp; <span class="number">63</span>));</span><br><span class="line">        <span class="keyword">var</span> a = i.charAt(<span class="number">64</span>);</span><br><span class="line">        <span class="keyword">if</span> (a) <span class="keyword">for</span> (; n.length % <span class="number">4</span>; ) n.push(a);</span><br><span class="line">        <span class="keyword">return</span> n.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = t.length,</span><br><span class="line">          r = <span class="built_in">this</span>._map,</span><br><span class="line">          i = <span class="built_in">this</span>._reverseMap;</span><br><span class="line">        <span class="keyword">if</span> (!i) &#123;</span><br><span class="line">          i = <span class="built_in">this</span>._reverseMap = [];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; r.length; n++) i[r.charCodeAt(n)] = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> o = r.charAt(<span class="number">64</span>);</span><br><span class="line">        <span class="keyword">if</span> (o) &#123;</span><br><span class="line">          <span class="keyword">var</span> s = t.indexOf(o);</span><br><span class="line">          -<span class="number">1</span> !== s &amp;&amp; (e = s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> (<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = [], n = <span class="number">0</span>, o = <span class="number">0</span>; o &lt; e; o++)</span><br><span class="line">            <span class="keyword">if</span> (o % <span class="number">4</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> s = r[t.charCodeAt(o - <span class="number">1</span>)] &lt;&lt; ((o % <span class="number">4</span>) * <span class="number">2</span>),</span><br><span class="line">                c = r[t.charCodeAt(o)] &gt;&gt;&gt; (<span class="number">6</span> - (o % <span class="number">4</span>) * <span class="number">2</span>),</span><br><span class="line">                a = s | c;</span><br><span class="line">              (i[n &gt;&gt;&gt; <span class="number">2</span>] |= a &lt;&lt; (<span class="number">24</span> - (n % <span class="number">4</span>) * <span class="number">8</span>)), n++;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">return</span> h.create(i, n);</span><br><span class="line">        &#125;)(t, e, i);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">_map</span>: <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">l</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t = bt,</span><br><span class="line">        e = t.lib,</span><br><span class="line">        r = e.WordArray,</span><br><span class="line">        i = e.Hasher,</span><br><span class="line">        n = t.algo,</span><br><span class="line">        H = [];</span><br><span class="line">      !(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; <span class="number">64</span>; t++)</span><br><span class="line">          H[t] = (<span class="number">4294967296</span> * l.abs(l.sin(t + <span class="number">1</span>))) | <span class="number">0</span>;</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="keyword">var</span> o = (n.MD5 = i.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._hash = <span class="keyword">new</span> r.init([</span><br><span class="line">            <span class="number">1732584193</span>, <span class="number">4023233417</span>, <span class="number">2562383102</span>, <span class="number">271733878</span>,</span><br><span class="line">          ]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; <span class="number">16</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">var</span> i = e + r,</span><br><span class="line">              n = t[i];</span><br><span class="line">            t[i] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((n &lt;&lt; <span class="number">8</span>) | (n &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((n &lt;&lt; <span class="number">24</span>) | (n &gt;&gt;&gt; <span class="number">8</span>)));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">var</span> o = <span class="built_in">this</span>._hash.words,</span><br><span class="line">            s = t[e + <span class="number">0</span>],</span><br><span class="line">            c = t[e + <span class="number">1</span>],</span><br><span class="line">            a = t[e + <span class="number">2</span>],</span><br><span class="line">            h = t[e + <span class="number">3</span>],</span><br><span class="line">            l = t[e + <span class="number">4</span>],</span><br><span class="line">            f = t[e + <span class="number">5</span>],</span><br><span class="line">            d = t[e + <span class="number">6</span>],</span><br><span class="line">            u = t[e + <span class="number">7</span>],</span><br><span class="line">            p = t[e + <span class="number">8</span>],</span><br><span class="line">            _ = t[e + <span class="number">9</span>],</span><br><span class="line">            v = t[e + <span class="number">10</span>],</span><br><span class="line">            y = t[e + <span class="number">11</span>],</span><br><span class="line">            g = t[e + <span class="number">12</span>],</span><br><span class="line">            B = t[e + <span class="number">13</span>],</span><br><span class="line">            w = t[e + <span class="number">14</span>],</span><br><span class="line">            k = t[e + <span class="number">15</span>],</span><br><span class="line">            S = o[<span class="number">0</span>],</span><br><span class="line">            m = o[<span class="number">1</span>],</span><br><span class="line">            x = o[<span class="number">2</span>],</span><br><span class="line">            b = o[<span class="number">3</span>];</span><br><span class="line">          (S = z(S, m, x, b, s, <span class="number">7</span>, H[<span class="number">0</span>])),</span><br><span class="line">            (b = z(b, S, m, x, c, <span class="number">12</span>, H[<span class="number">1</span>])),</span><br><span class="line">            (x = z(x, b, S, m, a, <span class="number">17</span>, H[<span class="number">2</span>])),</span><br><span class="line">            (m = z(m, x, b, S, h, <span class="number">22</span>, H[<span class="number">3</span>])),</span><br><span class="line">            (S = z(S, m, x, b, l, <span class="number">7</span>, H[<span class="number">4</span>])),</span><br><span class="line">            (b = z(b, S, m, x, f, <span class="number">12</span>, H[<span class="number">5</span>])),</span><br><span class="line">            (x = z(x, b, S, m, d, <span class="number">17</span>, H[<span class="number">6</span>])),</span><br><span class="line">            (m = z(m, x, b, S, u, <span class="number">22</span>, H[<span class="number">7</span>])),</span><br><span class="line">            (S = z(S, m, x, b, p, <span class="number">7</span>, H[<span class="number">8</span>])),</span><br><span class="line">            (b = z(b, S, m, x, _, <span class="number">12</span>, H[<span class="number">9</span>])),</span><br><span class="line">            (x = z(x, b, S, m, v, <span class="number">17</span>, H[<span class="number">10</span>])),</span><br><span class="line">            (m = z(m, x, b, S, y, <span class="number">22</span>, H[<span class="number">11</span>])),</span><br><span class="line">            (S = z(S, m, x, b, g, <span class="number">7</span>, H[<span class="number">12</span>])),</span><br><span class="line">            (b = z(b, S, m, x, B, <span class="number">12</span>, H[<span class="number">13</span>])),</span><br><span class="line">            (x = z(x, b, S, m, w, <span class="number">17</span>, H[<span class="number">14</span>])),</span><br><span class="line">            (S = A(S, (m = z(m, x, b, S, k, <span class="number">22</span>, H[<span class="number">15</span>])), x, b, c, <span class="number">5</span>, H[<span class="number">16</span>])),</span><br><span class="line">            (b = A(b, S, m, x, d, <span class="number">9</span>, H[<span class="number">17</span>])),</span><br><span class="line">            (x = A(x, b, S, m, y, <span class="number">14</span>, H[<span class="number">18</span>])),</span><br><span class="line">            (m = A(m, x, b, S, s, <span class="number">20</span>, H[<span class="number">19</span>])),</span><br><span class="line">            (S = A(S, m, x, b, f, <span class="number">5</span>, H[<span class="number">20</span>])),</span><br><span class="line">            (b = A(b, S, m, x, v, <span class="number">9</span>, H[<span class="number">21</span>])),</span><br><span class="line">            (x = A(x, b, S, m, k, <span class="number">14</span>, H[<span class="number">22</span>])),</span><br><span class="line">            (m = A(m, x, b, S, l, <span class="number">20</span>, H[<span class="number">23</span>])),</span><br><span class="line">            (S = A(S, m, x, b, _, <span class="number">5</span>, H[<span class="number">24</span>])),</span><br><span class="line">            (b = A(b, S, m, x, w, <span class="number">9</span>, H[<span class="number">25</span>])),</span><br><span class="line">            (x = A(x, b, S, m, h, <span class="number">14</span>, H[<span class="number">26</span>])),</span><br><span class="line">            (m = A(m, x, b, S, p, <span class="number">20</span>, H[<span class="number">27</span>])),</span><br><span class="line">            (S = A(S, m, x, b, B, <span class="number">5</span>, H[<span class="number">28</span>])),</span><br><span class="line">            (b = A(b, S, m, x, a, <span class="number">9</span>, H[<span class="number">29</span>])),</span><br><span class="line">            (x = A(x, b, S, m, u, <span class="number">14</span>, H[<span class="number">30</span>])),</span><br><span class="line">            (S = C(S, (m = A(m, x, b, S, g, <span class="number">20</span>, H[<span class="number">31</span>])), x, b, f, <span class="number">4</span>, H[<span class="number">32</span>])),</span><br><span class="line">            (b = C(b, S, m, x, p, <span class="number">11</span>, H[<span class="number">33</span>])),</span><br><span class="line">            (x = C(x, b, S, m, y, <span class="number">16</span>, H[<span class="number">34</span>])),</span><br><span class="line">            (m = C(m, x, b, S, w, <span class="number">23</span>, H[<span class="number">35</span>])),</span><br><span class="line">            (S = C(S, m, x, b, c, <span class="number">4</span>, H[<span class="number">36</span>])),</span><br><span class="line">            (b = C(b, S, m, x, l, <span class="number">11</span>, H[<span class="number">37</span>])),</span><br><span class="line">            (x = C(x, b, S, m, u, <span class="number">16</span>, H[<span class="number">38</span>])),</span><br><span class="line">            (m = C(m, x, b, S, v, <span class="number">23</span>, H[<span class="number">39</span>])),</span><br><span class="line">            (S = C(S, m, x, b, B, <span class="number">4</span>, H[<span class="number">40</span>])),</span><br><span class="line">            (b = C(b, S, m, x, s, <span class="number">11</span>, H[<span class="number">41</span>])),</span><br><span class="line">            (x = C(x, b, S, m, h, <span class="number">16</span>, H[<span class="number">42</span>])),</span><br><span class="line">            (m = C(m, x, b, S, d, <span class="number">23</span>, H[<span class="number">43</span>])),</span><br><span class="line">            (S = C(S, m, x, b, _, <span class="number">4</span>, H[<span class="number">44</span>])),</span><br><span class="line">            (b = C(b, S, m, x, g, <span class="number">11</span>, H[<span class="number">45</span>])),</span><br><span class="line">            (x = C(x, b, S, m, k, <span class="number">16</span>, H[<span class="number">46</span>])),</span><br><span class="line">            (S = D(S, (m = C(m, x, b, S, a, <span class="number">23</span>, H[<span class="number">47</span>])), x, b, s, <span class="number">6</span>, H[<span class="number">48</span>])),</span><br><span class="line">            (b = D(b, S, m, x, u, <span class="number">10</span>, H[<span class="number">49</span>])),</span><br><span class="line">            (x = D(x, b, S, m, w, <span class="number">15</span>, H[<span class="number">50</span>])),</span><br><span class="line">            (m = D(m, x, b, S, f, <span class="number">21</span>, H[<span class="number">51</span>])),</span><br><span class="line">            (S = D(S, m, x, b, g, <span class="number">6</span>, H[<span class="number">52</span>])),</span><br><span class="line">            (b = D(b, S, m, x, h, <span class="number">10</span>, H[<span class="number">53</span>])),</span><br><span class="line">            (x = D(x, b, S, m, v, <span class="number">15</span>, H[<span class="number">54</span>])),</span><br><span class="line">            (m = D(m, x, b, S, c, <span class="number">21</span>, H[<span class="number">55</span>])),</span><br><span class="line">            (S = D(S, m, x, b, p, <span class="number">6</span>, H[<span class="number">56</span>])),</span><br><span class="line">            (b = D(b, S, m, x, k, <span class="number">10</span>, H[<span class="number">57</span>])),</span><br><span class="line">            (x = D(x, b, S, m, d, <span class="number">15</span>, H[<span class="number">58</span>])),</span><br><span class="line">            (m = D(m, x, b, S, B, <span class="number">21</span>, H[<span class="number">59</span>])),</span><br><span class="line">            (S = D(S, m, x, b, l, <span class="number">6</span>, H[<span class="number">60</span>])),</span><br><span class="line">            (b = D(b, S, m, x, y, <span class="number">10</span>, H[<span class="number">61</span>])),</span><br><span class="line">            (x = D(x, b, S, m, a, <span class="number">15</span>, H[<span class="number">62</span>])),</span><br><span class="line">            (m = D(m, x, b, S, _, <span class="number">21</span>, H[<span class="number">63</span>])),</span><br><span class="line">            (o[<span class="number">0</span>] = (o[<span class="number">0</span>] + S) | <span class="number">0</span>),</span><br><span class="line">            (o[<span class="number">1</span>] = (o[<span class="number">1</span>] + m) | <span class="number">0</span>),</span><br><span class="line">            (o[<span class="number">2</span>] = (o[<span class="number">2</span>] + x) | <span class="number">0</span>),</span><br><span class="line">            (o[<span class="number">3</span>] = (o[<span class="number">3</span>] + b) | <span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = <span class="built_in">this</span>._data,</span><br><span class="line">            e = t.words,</span><br><span class="line">            r = <span class="number">8</span> * <span class="built_in">this</span>._nDataBytes,</span><br><span class="line">            i = <span class="number">8</span> * t.sigBytes;</span><br><span class="line">          e[i &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; (<span class="number">24</span> - (i % <span class="number">32</span>));</span><br><span class="line">          <span class="keyword">var</span> n = l.floor(r / <span class="number">4294967296</span>),</span><br><span class="line">            o = r;</span><br><span class="line">          (e[<span class="number">15</span> + (((<span class="number">64</span> + i) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>)] =</span><br><span class="line">            (<span class="number">16711935</span> &amp; ((n &lt;&lt; <span class="number">8</span>) | (n &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">            (<span class="number">4278255360</span> &amp; ((n &lt;&lt; <span class="number">24</span>) | (n &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">            (e[<span class="number">14</span> + (((<span class="number">64</span> + i) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>)] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((o &lt;&lt; <span class="number">8</span>) | (o &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((o &lt;&lt; <span class="number">24</span>) | (o &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">            (t.sigBytes = <span class="number">4</span> * (e.length + <span class="number">1</span>)),</span><br><span class="line">            <span class="built_in">this</span>._process();</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="built_in">this</span>._hash, c = s.words, a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">var</span> h = c[a];</span><br><span class="line">            c[a] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((h &lt;&lt; <span class="number">8</span>) | (h &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((h &lt;&lt; <span class="number">24</span>) | (h &gt;&gt;&gt; <span class="number">8</span>)));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> s;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = i.clone.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">return</span> (t._hash = <span class="built_in">this</span>._hash.clone()), t;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;));</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">z</span>(<span class="params">t, e, r, i, n, o, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = t + ((e &amp; r) | (~e &amp; i)) + n + s;</span><br><span class="line">        <span class="keyword">return</span> ((c &lt;&lt; o) | (c &gt;&gt;&gt; (<span class="number">32</span> - o))) + e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">t, e, r, i, n, o, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = t + ((e &amp; i) | (r &amp; ~i)) + n + s;</span><br><span class="line">        <span class="keyword">return</span> ((c &lt;&lt; o) | (c &gt;&gt;&gt; (<span class="number">32</span> - o))) + e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">t, e, r, i, n, o, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = t + (e ^ r ^ i) + n + s;</span><br><span class="line">        <span class="keyword">return</span> ((c &lt;&lt; o) | (c &gt;&gt;&gt; (<span class="number">32</span> - o))) + e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">t, e, r, i, n, o, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = t + (r ^ (e | ~i)) + n + s;</span><br><span class="line">        <span class="keyword">return</span> ((c &lt;&lt; o) | (c &gt;&gt;&gt; (<span class="number">32</span> - o))) + e;</span><br><span class="line">      &#125;</span><br><span class="line">      (t.MD5 = i._createHelper(o)), (t.HmacMD5 = i._createHmacHelper(o));</span><br><span class="line">    &#125;)(<span class="built_in">Math</span>),</span><br><span class="line">    (e = (t = bt).lib),</span><br><span class="line">    (r = e.WordArray),</span><br><span class="line">    (i = e.Hasher),</span><br><span class="line">    (n = t.algo),</span><br><span class="line">    (f = []),</span><br><span class="line">    (o = n.SHA1 =</span><br><span class="line">      i.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._hash = <span class="keyword">new</span> r.init([</span><br><span class="line">            <span class="number">1732584193</span>, <span class="number">4023233417</span>, <span class="number">2562383102</span>, <span class="number">271733878</span>, <span class="number">3285377520</span>,</span><br><span class="line">          ]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> r = <span class="built_in">this</span>._hash.words,</span><br><span class="line">              i = r[<span class="number">0</span>],</span><br><span class="line">              n = r[<span class="number">1</span>],</span><br><span class="line">              o = r[<span class="number">2</span>],</span><br><span class="line">              s = r[<span class="number">3</span>],</span><br><span class="line">              c = r[<span class="number">4</span>],</span><br><span class="line">              a = <span class="number">0</span>;</span><br><span class="line">            a &lt; <span class="number">80</span>;</span><br><span class="line">            a++</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">16</span>) f[a] = <span class="number">0</span> | t[e + a];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> h = f[a - <span class="number">3</span>] ^ f[a - <span class="number">8</span>] ^ f[a - <span class="number">14</span>] ^ f[a - <span class="number">16</span>];</span><br><span class="line">              f[a] = (h &lt;&lt; <span class="number">1</span>) | (h &gt;&gt;&gt; <span class="number">31</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> l = ((i &lt;&lt; <span class="number">5</span>) | (i &gt;&gt;&gt; <span class="number">27</span>)) + c + f[a];</span><br><span class="line">            (l +=</span><br><span class="line">              a &lt; <span class="number">20</span></span><br><span class="line">                ? <span class="number">1518500249</span> + ((n &amp; o) | (~n &amp; s))</span><br><span class="line">                : a &lt; <span class="number">40</span></span><br><span class="line">                ? <span class="number">1859775393</span> + (n ^ o ^ s)</span><br><span class="line">                : a &lt; <span class="number">60</span></span><br><span class="line">                ? ((n &amp; o) | (n &amp; s) | (o &amp; s)) - <span class="number">1894007588</span></span><br><span class="line">                : (n ^ o ^ s) - <span class="number">899497514</span>),</span><br><span class="line">              (c = s),</span><br><span class="line">              (s = o),</span><br><span class="line">              (o = (n &lt;&lt; <span class="number">30</span>) | (n &gt;&gt;&gt; <span class="number">2</span>)),</span><br><span class="line">              (n = i),</span><br><span class="line">              (i = l);</span><br><span class="line">          &#125;</span><br><span class="line">          (r[<span class="number">0</span>] = (r[<span class="number">0</span>] + i) | <span class="number">0</span>),</span><br><span class="line">            (r[<span class="number">1</span>] = (r[<span class="number">1</span>] + n) | <span class="number">0</span>),</span><br><span class="line">            (r[<span class="number">2</span>] = (r[<span class="number">2</span>] + o) | <span class="number">0</span>),</span><br><span class="line">            (r[<span class="number">3</span>] = (r[<span class="number">3</span>] + s) | <span class="number">0</span>),</span><br><span class="line">            (r[<span class="number">4</span>] = (r[<span class="number">4</span>] + c) | <span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = <span class="built_in">this</span>._data,</span><br><span class="line">            e = t.words,</span><br><span class="line">            r = <span class="number">8</span> * <span class="built_in">this</span>._nDataBytes,</span><br><span class="line">            i = <span class="number">8</span> * t.sigBytes;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            (e[i &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; (<span class="number">24</span> - (i % <span class="number">32</span>))),</span><br><span class="line">            (e[<span class="number">14</span> + (((<span class="number">64</span> + i) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>)] = <span class="built_in">Math</span>.floor(r / <span class="number">4294967296</span>)),</span><br><span class="line">            (e[<span class="number">15</span> + (((<span class="number">64</span> + i) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>)] = r),</span><br><span class="line">            (t.sigBytes = <span class="number">4</span> * e.length),</span><br><span class="line">            <span class="built_in">this</span>._process(),</span><br><span class="line">            <span class="built_in">this</span>._hash</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = i.clone.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">return</span> (t._hash = <span class="built_in">this</span>._hash.clone()), t;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (t.SHA1 = i._createHelper(o)),</span><br><span class="line">    (t.HmacSHA1 = i._createHmacHelper(o)),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t = bt,</span><br><span class="line">        e = t.lib,</span><br><span class="line">        r = e.WordArray,</span><br><span class="line">        i = e.Hasher,</span><br><span class="line">        o = t.algo,</span><br><span class="line">        s = [],</span><br><span class="line">        B = [];</span><br><span class="line">      !(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> e = n.sqrt(t), r = <span class="number">2</span>; r &lt;= e; r++) <span class="keyword">if</span> (!(t % r)) <span class="keyword">return</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="number">4294967296</span> * (t - (<span class="number">0</span> | t))) | <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">2</span>, i = <span class="number">0</span>; i &lt; <span class="number">64</span>; )</span><br><span class="line">          t(r) &amp;&amp;</span><br><span class="line">            (i &lt; <span class="number">8</span> &amp;&amp; (s[i] = e(n.pow(r, <span class="number">0.5</span>))),</span><br><span class="line">            (B[i] = e(n.pow(r, <span class="number">1</span> / <span class="number">3</span>))),</span><br><span class="line">            i++),</span><br><span class="line">            r++;</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="keyword">var</span> w = [],</span><br><span class="line">        c = (o.SHA256 = i.extend(&#123;</span><br><span class="line">          <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._hash = <span class="keyword">new</span> r.init(s.slice(<span class="number">0</span>));</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (</span><br><span class="line">              <span class="keyword">var</span> r = <span class="built_in">this</span>._hash.words,</span><br><span class="line">                i = r[<span class="number">0</span>],</span><br><span class="line">                n = r[<span class="number">1</span>],</span><br><span class="line">                o = r[<span class="number">2</span>],</span><br><span class="line">                s = r[<span class="number">3</span>],</span><br><span class="line">                c = r[<span class="number">4</span>],</span><br><span class="line">                a = r[<span class="number">5</span>],</span><br><span class="line">                h = r[<span class="number">6</span>],</span><br><span class="line">                l = r[<span class="number">7</span>],</span><br><span class="line">                f = <span class="number">0</span>;</span><br><span class="line">              f &lt; <span class="number">64</span>;</span><br><span class="line">              f++</span><br><span class="line">            ) &#123;</span><br><span class="line">              <span class="keyword">if</span> (f &lt; <span class="number">16</span>) w[f] = <span class="number">0</span> | t[e + f];</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> d = w[f - <span class="number">15</span>],</span><br><span class="line">                  u =</span><br><span class="line">                    ((d &lt;&lt; <span class="number">25</span>) | (d &gt;&gt;&gt; <span class="number">7</span>)) ^</span><br><span class="line">                    ((d &lt;&lt; <span class="number">14</span>) | (d &gt;&gt;&gt; <span class="number">18</span>)) ^</span><br><span class="line">                    (d &gt;&gt;&gt; <span class="number">3</span>),</span><br><span class="line">                  p = w[f - <span class="number">2</span>],</span><br><span class="line">                  _ =</span><br><span class="line">                    ((p &lt;&lt; <span class="number">15</span>) | (p &gt;&gt;&gt; <span class="number">17</span>)) ^</span><br><span class="line">                    ((p &lt;&lt; <span class="number">13</span>) | (p &gt;&gt;&gt; <span class="number">19</span>)) ^</span><br><span class="line">                    (p &gt;&gt;&gt; <span class="number">10</span>);</span><br><span class="line">                w[f] = u + w[f - <span class="number">7</span>] + _ + w[f - <span class="number">16</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">var</span> v = (i &amp; n) ^ (i &amp; o) ^ (n &amp; o),</span><br><span class="line">                y =</span><br><span class="line">                  ((i &lt;&lt; <span class="number">30</span>) | (i &gt;&gt;&gt; <span class="number">2</span>)) ^</span><br><span class="line">                  ((i &lt;&lt; <span class="number">19</span>) | (i &gt;&gt;&gt; <span class="number">13</span>)) ^</span><br><span class="line">                  ((i &lt;&lt; <span class="number">10</span>) | (i &gt;&gt;&gt; <span class="number">22</span>)),</span><br><span class="line">                g =</span><br><span class="line">                  l +</span><br><span class="line">                  (((c &lt;&lt; <span class="number">26</span>) | (c &gt;&gt;&gt; <span class="number">6</span>)) ^</span><br><span class="line">                    ((c &lt;&lt; <span class="number">21</span>) | (c &gt;&gt;&gt; <span class="number">11</span>)) ^</span><br><span class="line">                    ((c &lt;&lt; <span class="number">7</span>) | (c &gt;&gt;&gt; <span class="number">25</span>))) +</span><br><span class="line">                  ((c &amp; a) ^ (~c &amp; h)) +</span><br><span class="line">                  B[f] +</span><br><span class="line">                  w[f];</span><br><span class="line">              (l = h),</span><br><span class="line">                (h = a),</span><br><span class="line">                (a = c),</span><br><span class="line">                (c = (s + g) | <span class="number">0</span>),</span><br><span class="line">                (s = o),</span><br><span class="line">                (o = n),</span><br><span class="line">                (n = i),</span><br><span class="line">                (i = (g + (y + v)) | <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            (r[<span class="number">0</span>] = (r[<span class="number">0</span>] + i) | <span class="number">0</span>),</span><br><span class="line">              (r[<span class="number">1</span>] = (r[<span class="number">1</span>] + n) | <span class="number">0</span>),</span><br><span class="line">              (r[<span class="number">2</span>] = (r[<span class="number">2</span>] + o) | <span class="number">0</span>),</span><br><span class="line">              (r[<span class="number">3</span>] = (r[<span class="number">3</span>] + s) | <span class="number">0</span>),</span><br><span class="line">              (r[<span class="number">4</span>] = (r[<span class="number">4</span>] + c) | <span class="number">0</span>),</span><br><span class="line">              (r[<span class="number">5</span>] = (r[<span class="number">5</span>] + a) | <span class="number">0</span>),</span><br><span class="line">              (r[<span class="number">6</span>] = (r[<span class="number">6</span>] + h) | <span class="number">0</span>),</span><br><span class="line">              (r[<span class="number">7</span>] = (r[<span class="number">7</span>] + l) | <span class="number">0</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">this</span>._data,</span><br><span class="line">              e = t.words,</span><br><span class="line">              r = <span class="number">8</span> * <span class="built_in">this</span>._nDataBytes,</span><br><span class="line">              i = <span class="number">8</span> * t.sigBytes;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              (e[i &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; (<span class="number">24</span> - (i % <span class="number">32</span>))),</span><br><span class="line">              (e[<span class="number">14</span> + (((<span class="number">64</span> + i) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>)] = n.floor(r / <span class="number">4294967296</span>)),</span><br><span class="line">              (e[<span class="number">15</span> + (((<span class="number">64</span> + i) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>)] = r),</span><br><span class="line">              (t.sigBytes = <span class="number">4</span> * e.length),</span><br><span class="line">              <span class="built_in">this</span>._process(),</span><br><span class="line">              <span class="built_in">this</span>._hash</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = i.clone.call(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> (t._hash = <span class="built_in">this</span>._hash.clone()), t;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;));</span><br><span class="line">      (t.SHA256 = i._createHelper(c)), (t.HmacSHA256 = i._createHmacHelper(c));</span><br><span class="line">    &#125;)(<span class="built_in">Math</span>),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> n = bt.lib.WordArray,</span><br><span class="line">        t = bt.enc;</span><br><span class="line">      t.Utf16 = t.Utf16BE = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> e = t.words, r = t.sigBytes, i = [], n = <span class="number">0</span>; n &lt; r; n += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = (e[n &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">16</span> - (n % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">65535</span>;</span><br><span class="line">            i.push(<span class="built_in">String</span>.fromCharCode(o));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> i.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> e = t.length, r = [], i = <span class="number">0</span>; i &lt; e; i++)</span><br><span class="line">            r[i &gt;&gt;&gt; <span class="number">1</span>] |= t.charCodeAt(i) &lt;&lt; (<span class="number">16</span> - (i % <span class="number">2</span>) * <span class="number">16</span>);</span><br><span class="line">          <span class="keyword">return</span> n.create(r, <span class="number">2</span> * e);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((t &lt;&lt; <span class="number">8</span>) &amp; <span class="number">4278255360</span>) | ((t &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">16711935</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      t.Utf16LE = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> e = t.words, r = t.sigBytes, i = [], n = <span class="number">0</span>; n &lt; r; n += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = s((e[n &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">16</span> - (n % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">65535</span>);</span><br><span class="line">            i.push(<span class="built_in">String</span>.fromCharCode(o));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> i.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> e = t.length, r = [], i = <span class="number">0</span>; i &lt; e; i++)</span><br><span class="line">            r[i &gt;&gt;&gt; <span class="number">1</span>] |= s(t.charCodeAt(i) &lt;&lt; (<span class="number">16</span> - (i % <span class="number">2</span>) * <span class="number">16</span>));</span><br><span class="line">          <span class="keyword">return</span> n.create(r, <span class="number">2</span> * e);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">ArrayBuffer</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = bt.lib.WordArray,</span><br><span class="line">          n = t.init;</span><br><span class="line">        (t.init = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            (t <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span> &amp;&amp; (t = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(t)),</span><br><span class="line">            (t <span class="keyword">instanceof</span> <span class="built_in">Int8Array</span> ||</span><br><span class="line">              (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">Uint8ClampedArray</span> &amp;&amp;</span><br><span class="line">                t <span class="keyword">instanceof</span> <span class="built_in">Uint8ClampedArray</span>) ||</span><br><span class="line">              t <span class="keyword">instanceof</span> <span class="built_in">Int16Array</span> ||</span><br><span class="line">              t <span class="keyword">instanceof</span> <span class="built_in">Uint16Array</span> ||</span><br><span class="line">              t <span class="keyword">instanceof</span> <span class="built_in">Int32Array</span> ||</span><br><span class="line">              t <span class="keyword">instanceof</span> <span class="built_in">Uint32Array</span> ||</span><br><span class="line">              t <span class="keyword">instanceof</span> <span class="built_in">Float32Array</span> ||</span><br><span class="line">              t <span class="keyword">instanceof</span> <span class="built_in">Float64Array</span>) &amp;&amp;</span><br><span class="line">              (t = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(t.buffer, t.byteOffset, t.byteLength)),</span><br><span class="line">            t <span class="keyword">instanceof</span> <span class="built_in">Uint8Array</span>)</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> e = t.byteLength, r = [], i = <span class="number">0</span>; i &lt; e; i++)</span><br><span class="line">              r[i &gt;&gt;&gt; <span class="number">2</span>] |= t[i] &lt;&lt; (<span class="number">24</span> - (i % <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            n.call(<span class="built_in">this</span>, r, e);</span><br><span class="line">          &#125; <span class="keyword">else</span> n.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;).prototype = t;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    <span class="built_in">Math</span>,</span><br><span class="line">    (c = (s = bt).lib),</span><br><span class="line">    (a = c.WordArray),</span><br><span class="line">    (l = c.Hasher),</span><br><span class="line">    (d = s.algo),</span><br><span class="line">    (m = a.create([</span><br><span class="line">      <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>,</span><br><span class="line">      <span class="number">15</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">6</span>,</span><br><span class="line">      <span class="number">13</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">13</span>,</span><br><span class="line">    ])),</span><br><span class="line">    (x = a.create([</span><br><span class="line">      <span class="number">5</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">13</span>,</span><br><span class="line">      <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">2</span>,</span><br><span class="line">      <span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">12</span>,</span><br><span class="line">      <span class="number">15</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">11</span>,</span><br><span class="line">    ])),</span><br><span class="line">    (b = a.create([</span><br><span class="line">      <span class="number">11</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">11</span>,</span><br><span class="line">      <span class="number">9</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">8</span>,</span><br><span class="line">      <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>,</span><br><span class="line">      <span class="number">12</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">    ])),</span><br><span class="line">    (H = a.create([</span><br><span class="line">      <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">12</span>,</span><br><span class="line">      <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">      <span class="number">5</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">15</span>,</span><br><span class="line">      <span class="number">8</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">11</span>,</span><br><span class="line">    ])),</span><br><span class="line">    (z = a.create([<span class="number">0</span>, <span class="number">1518500249</span>, <span class="number">1859775393</span>, <span class="number">2400959708</span>, <span class="number">2840853838</span>])),</span><br><span class="line">    (A = a.create([<span class="number">1352829926</span>, <span class="number">1548603684</span>, <span class="number">1836072691</span>, <span class="number">2053994217</span>, <span class="number">0</span>])),</span><br><span class="line">    (u = d.RIPEMD160 =</span><br><span class="line">      l.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._hash = a.create([</span><br><span class="line">            <span class="number">1732584193</span>, <span class="number">4023233417</span>, <span class="number">2562383102</span>, <span class="number">271733878</span>, <span class="number">3285377520</span>,</span><br><span class="line">          ]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; <span class="number">16</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">var</span> i = e + r,</span><br><span class="line">              n = t[i];</span><br><span class="line">            t[i] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((n &lt;&lt; <span class="number">8</span>) | (n &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((n &lt;&lt; <span class="number">24</span>) | (n &gt;&gt;&gt; <span class="number">8</span>)));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">var</span> o,</span><br><span class="line">            s,</span><br><span class="line">            c,</span><br><span class="line">            a,</span><br><span class="line">            h,</span><br><span class="line">            l,</span><br><span class="line">            f,</span><br><span class="line">            d,</span><br><span class="line">            u,</span><br><span class="line">            p,</span><br><span class="line">            _,</span><br><span class="line">            v = <span class="built_in">this</span>._hash.words,</span><br><span class="line">            y = z.words,</span><br><span class="line">            g = A.words,</span><br><span class="line">            B = m.words,</span><br><span class="line">            w = x.words,</span><br><span class="line">            k = b.words,</span><br><span class="line">            S = H.words;</span><br><span class="line">          (l = o = v[<span class="number">0</span>]),</span><br><span class="line">            (f = s = v[<span class="number">1</span>]),</span><br><span class="line">            (d = c = v[<span class="number">2</span>]),</span><br><span class="line">            (u = a = v[<span class="number">3</span>]),</span><br><span class="line">            (p = h = v[<span class="number">4</span>]);</span><br><span class="line">          <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">80</span>; r += <span class="number">1</span>)</span><br><span class="line">            (_ = (o + t[e + B[r]]) | <span class="number">0</span>),</span><br><span class="line">              (_ +=</span><br><span class="line">                r &lt; <span class="number">16</span></span><br><span class="line">                  ? mt(s, c, a) + y[<span class="number">0</span>]</span><br><span class="line">                  : r &lt; <span class="number">32</span></span><br><span class="line">                  ? xt(s, c, a) + y[<span class="number">1</span>]</span><br><span class="line">                  : r &lt; <span class="number">48</span></span><br><span class="line">                  ? Ht(s, c, a) + y[<span class="number">2</span>]</span><br><span class="line">                  : r &lt; <span class="number">64</span></span><br><span class="line">                  ? zt(s, c, a) + y[<span class="number">3</span>]</span><br><span class="line">                  : At(s, c, a) + y[<span class="number">4</span>]),</span><br><span class="line">              (_ = ((_ = Ct((_ |= <span class="number">0</span>), k[r])) + h) | <span class="number">0</span>),</span><br><span class="line">              (o = h),</span><br><span class="line">              (h = a),</span><br><span class="line">              (a = Ct(c, <span class="number">10</span>)),</span><br><span class="line">              (c = s),</span><br><span class="line">              (s = _),</span><br><span class="line">              (_ = (l + t[e + w[r]]) | <span class="number">0</span>),</span><br><span class="line">              (_ +=</span><br><span class="line">                r &lt; <span class="number">16</span></span><br><span class="line">                  ? At(f, d, u) + g[<span class="number">0</span>]</span><br><span class="line">                  : r &lt; <span class="number">32</span></span><br><span class="line">                  ? zt(f, d, u) + g[<span class="number">1</span>]</span><br><span class="line">                  : r &lt; <span class="number">48</span></span><br><span class="line">                  ? Ht(f, d, u) + g[<span class="number">2</span>]</span><br><span class="line">                  : r &lt; <span class="number">64</span></span><br><span class="line">                  ? xt(f, d, u) + g[<span class="number">3</span>]</span><br><span class="line">                  : mt(f, d, u) + g[<span class="number">4</span>]),</span><br><span class="line">              (_ = ((_ = Ct((_ |= <span class="number">0</span>), S[r])) + p) | <span class="number">0</span>),</span><br><span class="line">              (l = p),</span><br><span class="line">              (p = u),</span><br><span class="line">              (u = Ct(d, <span class="number">10</span>)),</span><br><span class="line">              (d = f),</span><br><span class="line">              (f = _);</span><br><span class="line">          (_ = (v[<span class="number">1</span>] + c + u) | <span class="number">0</span>),</span><br><span class="line">            (v[<span class="number">1</span>] = (v[<span class="number">2</span>] + a + p) | <span class="number">0</span>),</span><br><span class="line">            (v[<span class="number">2</span>] = (v[<span class="number">3</span>] + h + l) | <span class="number">0</span>),</span><br><span class="line">            (v[<span class="number">3</span>] = (v[<span class="number">4</span>] + o + f) | <span class="number">0</span>),</span><br><span class="line">            (v[<span class="number">4</span>] = (v[<span class="number">0</span>] + s + d) | <span class="number">0</span>),</span><br><span class="line">            (v[<span class="number">0</span>] = _);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = <span class="built_in">this</span>._data,</span><br><span class="line">            e = t.words,</span><br><span class="line">            r = <span class="number">8</span> * <span class="built_in">this</span>._nDataBytes,</span><br><span class="line">            i = <span class="number">8</span> * t.sigBytes;</span><br><span class="line">          (e[i &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; (<span class="number">24</span> - (i % <span class="number">32</span>))),</span><br><span class="line">            (e[<span class="number">14</span> + (((<span class="number">64</span> + i) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>)] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((r &lt;&lt; <span class="number">8</span>) | (r &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((r &lt;&lt; <span class="number">24</span>) | (r &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">            (t.sigBytes = <span class="number">4</span> * (e.length + <span class="number">1</span>)),</span><br><span class="line">            <span class="built_in">this</span>._process();</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="built_in">this</span>._hash, o = n.words, s = <span class="number">0</span>; s &lt; <span class="number">5</span>; s++) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = o[s];</span><br><span class="line">            o[s] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((c &lt;&lt; <span class="number">8</span>) | (c &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((c &lt;&lt; <span class="number">24</span>) | (c &gt;&gt;&gt; <span class="number">8</span>)));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> n;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = l.clone.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">return</span> (t._hash = <span class="built_in">this</span>._hash.clone()), t;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (s.RIPEMD160 = l._createHelper(u)),</span><br><span class="line">    (s.HmacRIPEMD160 = l._createHmacHelper(u)),</span><br><span class="line">    (p = bt.lib.Base),</span><br><span class="line">    (_ = bt.enc.Utf8),</span><br><span class="line">    (bt.algo.HMAC = p.extend(&#123;</span><br><span class="line">      <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        (t = <span class="built_in">this</span>._hasher = <span class="keyword">new</span> t.init()),</span><br><span class="line">          <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> e &amp;&amp; (e = _.parse(e));</span><br><span class="line">        <span class="keyword">var</span> r = t.blockSize,</span><br><span class="line">          i = <span class="number">4</span> * r;</span><br><span class="line">        e.sigBytes &gt; i &amp;&amp; (e = t.finalize(e)), e.clamp();</span><br><span class="line">        <span class="keyword">for</span> (</span><br><span class="line">          <span class="keyword">var</span> n = (<span class="built_in">this</span>._oKey = e.clone()),</span><br><span class="line">            o = (<span class="built_in">this</span>._iKey = e.clone()),</span><br><span class="line">            s = n.words,</span><br><span class="line">            c = o.words,</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">          a &lt; r;</span><br><span class="line">          a++</span><br><span class="line">        )</span><br><span class="line">          (s[a] ^= <span class="number">1549556828</span>), (c[a] ^= <span class="number">909522486</span>);</span><br><span class="line">        (n.sigBytes = o.sigBytes = i), <span class="built_in">this</span>.reset();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">this</span>._hasher;</span><br><span class="line">        t.reset(), t.update(<span class="built_in">this</span>._iKey);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._hasher.update(t), <span class="built_in">this</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">finalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">this</span>._hasher,</span><br><span class="line">          r = e.finalize(t);</span><br><span class="line">        <span class="keyword">return</span> e.reset(), e.finalize(<span class="built_in">this</span>._oKey.clone().concat(r));</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)),</span><br><span class="line">    (y = (v = bt).lib),</span><br><span class="line">    (g = y.Base),</span><br><span class="line">    (B = y.WordArray),</span><br><span class="line">    (w = v.algo),</span><br><span class="line">    (k = w.SHA1),</span><br><span class="line">    (S = w.HMAC),</span><br><span class="line">    (C = w.PBKDF2 =</span><br><span class="line">      g.extend(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: g.extend(&#123; <span class="attr">keySize</span>: <span class="number">4</span>, <span class="attr">hasher</span>: k, <span class="attr">iterations</span>: <span class="number">1</span> &#125;),</span><br><span class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.cfg = <span class="built_in">this</span>.cfg.extend(t);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">compute</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> r = <span class="built_in">this</span>.cfg,</span><br><span class="line">              i = S.create(r.hasher, t),</span><br><span class="line">              n = B.create(),</span><br><span class="line">              o = B.create([<span class="number">1</span>]),</span><br><span class="line">              s = n.words,</span><br><span class="line">              c = o.words,</span><br><span class="line">              a = r.keySize,</span><br><span class="line">              h = r.iterations;</span><br><span class="line">            s.length &lt; a;</span><br><span class="line"></span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">var</span> l = i.update(e).finalize(o);</span><br><span class="line">            i.reset();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> f = l.words, d = f.length, u = l, p = <span class="number">1</span>; p &lt; h; p++) &#123;</span><br><span class="line">              (u = i.finalize(u)), i.reset();</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> _ = u.words, v = <span class="number">0</span>; v &lt; d; v++) f[v] ^= _[v];</span><br><span class="line">            &#125;</span><br><span class="line">            n.concat(l), c[<span class="number">0</span>]++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> (n.sigBytes = <span class="number">4</span> * a), n;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (v.PBKDF2 = <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> C.create(r).compute(t, e);</span><br><span class="line">    &#125;),</span><br><span class="line">    (E = (D = bt).lib),</span><br><span class="line">    (R = E.Base),</span><br><span class="line">    (M = E.WordArray),</span><br><span class="line">    (F = D.algo),</span><br><span class="line">    (P = F.MD5),</span><br><span class="line">    (W = F.EvpKDF =</span><br><span class="line">      R.extend(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: R.extend(&#123; <span class="attr">keySize</span>: <span class="number">4</span>, <span class="attr">hasher</span>: P, <span class="attr">iterations</span>: <span class="number">1</span> &#125;),</span><br><span class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.cfg = <span class="built_in">this</span>.cfg.extend(t);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">compute</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> r,</span><br><span class="line">              i = <span class="built_in">this</span>.cfg,</span><br><span class="line">              n = i.hasher.create(),</span><br><span class="line">              o = M.create(),</span><br><span class="line">              s = o.words,</span><br><span class="line">              c = i.keySize,</span><br><span class="line">              a = i.iterations;</span><br><span class="line">            s.length &lt; c;</span><br><span class="line"></span><br><span class="line">          ) &#123;</span><br><span class="line">            r &amp;&amp; n.update(r), (r = n.update(t).finalize(e)), n.reset();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> h = <span class="number">1</span>; h &lt; a; h++) (r = n.finalize(r)), n.reset();</span><br><span class="line">            o.concat(r);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> (o.sigBytes = <span class="number">4</span> * c), o;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (D.EvpKDF = <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> W.create(r).compute(t, e);</span><br><span class="line">    &#125;),</span><br><span class="line">    (I = (O = bt).lib.WordArray),</span><br><span class="line">    (U = O.algo),</span><br><span class="line">    (K = U.SHA256),</span><br><span class="line">    (X = U.SHA224 =</span><br><span class="line">      K.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._hash = <span class="keyword">new</span> I.init([</span><br><span class="line">            <span class="number">3238371032</span>, <span class="number">914150663</span>, <span class="number">812702999</span>, <span class="number">4144912697</span>, <span class="number">4290775857</span>,</span><br><span class="line">            <span class="number">1750603025</span>, <span class="number">1694076839</span>, <span class="number">3204075428</span>,</span><br><span class="line">          ]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = K._doFinalize.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">return</span> (t.sigBytes -= <span class="number">4</span>), t;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (O.SHA224 = K._createHelper(X)),</span><br><span class="line">    (O.HmacSHA224 = K._createHmacHelper(X)),</span><br><span class="line">    (L = bt.lib),</span><br><span class="line">    (j = L.Base),</span><br><span class="line">    (N = L.WordArray),</span><br><span class="line">    ((T = bt.x64 = &#123;&#125;).Word = j.extend(&#123;</span><br><span class="line">      <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        (<span class="built_in">this</span>.high = t), (<span class="built_in">this</span>.low = e);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)),</span><br><span class="line">    (T.WordArray = j.extend(&#123;</span><br><span class="line">      <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        (t = <span class="built_in">this</span>.words = t || []),</span><br><span class="line">          (<span class="built_in">this</span>.sigBytes = <span class="literal">null</span> != e ? e : <span class="number">8</span> * t.length);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">toX32</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">this</span>.words, e = t.length, r = [], i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> n = t[i];</span><br><span class="line">          r.push(n.high), r.push(n.low);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> N.create(r, <span class="built_in">this</span>.sigBytes);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (</span><br><span class="line">          <span class="keyword">var</span> t = j.clone.call(<span class="built_in">this</span>),</span><br><span class="line">            e = (t.words = <span class="built_in">this</span>.words.slice(<span class="number">0</span>)),</span><br><span class="line">            r = e.length,</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">          i &lt; r;</span><br><span class="line">          i++</span><br><span class="line">        )</span><br><span class="line">          e[i] = e[i].clone();</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t = bt,</span><br><span class="line">        e = t.lib,</span><br><span class="line">        u = e.WordArray,</span><br><span class="line">        i = e.Hasher,</span><br><span class="line">        l = t.x64.Word,</span><br><span class="line">        r = t.algo,</span><br><span class="line">        C = [],</span><br><span class="line">        D = [],</span><br><span class="line">        E = [];</span><br><span class="line">      !(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">1</span>, e = <span class="number">0</span>, r = <span class="number">0</span>; r &lt; <span class="number">24</span>; r++) &#123;</span><br><span class="line">          C[t + <span class="number">5</span> * e] = (((r + <span class="number">1</span>) * (r + <span class="number">2</span>)) / <span class="number">2</span>) % <span class="number">64</span>;</span><br><span class="line">          <span class="keyword">var</span> i = (<span class="number">2</span> * t + <span class="number">3</span> * e) % <span class="number">5</span>;</span><br><span class="line">          (t = e % <span class="number">5</span>), (e = i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; <span class="number">5</span>; t++)</span><br><span class="line">          <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; <span class="number">5</span>; e++) D[t + <span class="number">5</span> * e] = e + ((<span class="number">2</span> * t + <span class="number">3</span> * e) % <span class="number">5</span>) * <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">1</span>, o = <span class="number">0</span>; o &lt; <span class="number">24</span>; o++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>, c = <span class="number">0</span>, a = <span class="number">0</span>; a &lt; <span class="number">7</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> &amp; n) &#123;</span><br><span class="line">              <span class="keyword">var</span> h = (<span class="number">1</span> &lt;&lt; a) - <span class="number">1</span>;</span><br><span class="line">              h &lt; <span class="number">32</span> ? (c ^= <span class="number">1</span> &lt;&lt; h) : (s ^= <span class="number">1</span> &lt;&lt; (h - <span class="number">32</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="number">128</span> &amp; n ? (n = (n &lt;&lt; <span class="number">1</span>) ^ <span class="number">113</span>) : (n &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          E[o] = l.create(s, c);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="keyword">var</span> R = [];</span><br><span class="line">      !(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; <span class="number">25</span>; t++) R[t] = l.create();</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="keyword">var</span> n = (r.SHA3 = i.extend(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: i.cfg.extend(&#123; <span class="attr">outputLength</span>: <span class="number">512</span> &#125;),</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> t = (<span class="built_in">this</span>._state = []), e = <span class="number">0</span>; e &lt; <span class="number">25</span>; e++)</span><br><span class="line">            t[e] = <span class="keyword">new</span> l.init();</span><br><span class="line">          <span class="built_in">this</span>.blockSize = (<span class="number">1600</span> - <span class="number">2</span> * <span class="built_in">this</span>.cfg.outputLength) / <span class="number">32</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="built_in">this</span>._state, i = <span class="built_in">this</span>.blockSize / <span class="number">2</span>, n = <span class="number">0</span>; n &lt; i; n++) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = t[e + <span class="number">2</span> * n],</span><br><span class="line">              s = t[e + <span class="number">2</span> * n + <span class="number">1</span>];</span><br><span class="line">            (o =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((o &lt;&lt; <span class="number">8</span>) | (o &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((o &lt;&lt; <span class="number">24</span>) | (o &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">              (s =</span><br><span class="line">                (<span class="number">16711935</span> &amp; ((s &lt;&lt; <span class="number">8</span>) | (s &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">                (<span class="number">4278255360</span> &amp; ((s &lt;&lt; <span class="number">24</span>) | (s &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">              ((x = r[n]).high ^= s),</span><br><span class="line">              (x.low ^= o);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; <span class="number">24</span>; c++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; <span class="number">5</span>; a++) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> h = <span class="number">0</span>, l = <span class="number">0</span>, f = <span class="number">0</span>; f &lt; <span class="number">5</span>; f++) &#123;</span><br><span class="line">                (h ^= (x = r[a + <span class="number">5</span> * f]).high), (l ^= x.low);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">var</span> d = R[a];</span><br><span class="line">              (d.high = h), (d.low = l);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">5</span>; a++) &#123;</span><br><span class="line">              <span class="keyword">var</span> u = R[(a + <span class="number">4</span>) % <span class="number">5</span>],</span><br><span class="line">                p = R[(a + <span class="number">1</span>) % <span class="number">5</span>],</span><br><span class="line">                _ = p.high,</span><br><span class="line">                v = p.low;</span><br><span class="line">              <span class="keyword">for</span> (</span><br><span class="line">                h = u.high ^ ((_ &lt;&lt; <span class="number">1</span>) | (v &gt;&gt;&gt; <span class="number">31</span>)),</span><br><span class="line">                  l = u.low ^ ((v &lt;&lt; <span class="number">1</span>) | (_ &gt;&gt;&gt; <span class="number">31</span>)),</span><br><span class="line">                  f = <span class="number">0</span>;</span><br><span class="line">                f &lt; <span class="number">5</span>;</span><br><span class="line">                f++</span><br><span class="line">              ) &#123;</span><br><span class="line">                ((x = r[a + <span class="number">5</span> * f]).high ^= h), (x.low ^= l);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">1</span>; y &lt; <span class="number">25</span>; y++) &#123;</span><br><span class="line">              <span class="keyword">var</span> g = (x = r[y]).high,</span><br><span class="line">                B = x.low,</span><br><span class="line">                w = C[y];</span><br><span class="line">              l =</span><br><span class="line">                w &lt; <span class="number">32</span></span><br><span class="line">                  ? ((h = (g &lt;&lt; w) | (B &gt;&gt;&gt; (<span class="number">32</span> - w))),</span><br><span class="line">                    (B &lt;&lt; w) | (g &gt;&gt;&gt; (<span class="number">32</span> - w)))</span><br><span class="line">                  : ((h = (B &lt;&lt; (w - <span class="number">32</span>)) | (g &gt;&gt;&gt; (<span class="number">64</span> - w))),</span><br><span class="line">                    (g &lt;&lt; (w - <span class="number">32</span>)) | (B &gt;&gt;&gt; (<span class="number">64</span> - w)));</span><br><span class="line">              <span class="keyword">var</span> k = R[D[y]];</span><br><span class="line">              (k.high = h), (k.low = l);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> S = R[<span class="number">0</span>],</span><br><span class="line">              m = r[<span class="number">0</span>];</span><br><span class="line">            (S.high = m.high), (S.low = m.low);</span><br><span class="line">            <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">5</span>; a++)</span><br><span class="line">              <span class="keyword">for</span> (f = <span class="number">0</span>; f &lt; <span class="number">5</span>; f++) &#123;</span><br><span class="line">                <span class="keyword">var</span> x = r[(y = a + <span class="number">5</span> * f)],</span><br><span class="line">                  b = R[y],</span><br><span class="line">                  H = R[((a + <span class="number">1</span>) % <span class="number">5</span>) + <span class="number">5</span> * f],</span><br><span class="line">                  z = R[((a + <span class="number">2</span>) % <span class="number">5</span>) + <span class="number">5</span> * f];</span><br><span class="line">                (x.high = b.high ^ (~H.high &amp; z.high)),</span><br><span class="line">                  (x.low = b.low ^ (~H.low &amp; z.low));</span><br><span class="line">              &#125;</span><br><span class="line">            x = r[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> A = E[c];</span><br><span class="line">            (x.high ^= A.high), (x.low ^= A.low);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = <span class="built_in">this</span>._data,</span><br><span class="line">            e = t.words,</span><br><span class="line">            r = (<span class="built_in">this</span>._nDataBytes, <span class="number">8</span> * t.sigBytes),</span><br><span class="line">            i = <span class="number">32</span> * <span class="built_in">this</span>.blockSize;</span><br><span class="line">          (e[r &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">1</span> &lt;&lt; (<span class="number">24</span> - (r % <span class="number">32</span>))),</span><br><span class="line">            (e[((d.ceil((<span class="number">1</span> + r) / i) * i) &gt;&gt;&gt; <span class="number">5</span>) - <span class="number">1</span>] |= <span class="number">128</span>),</span><br><span class="line">            (t.sigBytes = <span class="number">4</span> * e.length),</span><br><span class="line">            <span class="built_in">this</span>._process();</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> n = <span class="built_in">this</span>._state,</span><br><span class="line">              o = <span class="built_in">this</span>.cfg.outputLength / <span class="number">8</span>,</span><br><span class="line">              s = o / <span class="number">8</span>,</span><br><span class="line">              c = [],</span><br><span class="line">              a = <span class="number">0</span>;</span><br><span class="line">            a &lt; s;</span><br><span class="line">            a++</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">var</span> h = n[a],</span><br><span class="line">              l = h.high,</span><br><span class="line">              f = h.low;</span><br><span class="line">            (l =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((l &lt;&lt; <span class="number">8</span>) | (l &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((l &lt;&lt; <span class="number">24</span>) | (l &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">              (f =</span><br><span class="line">                (<span class="number">16711935</span> &amp; ((f &lt;&lt; <span class="number">8</span>) | (f &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">                (<span class="number">4278255360</span> &amp; ((f &lt;&lt; <span class="number">24</span>) | (f &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">              c.push(f),</span><br><span class="line">              c.push(l);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> u.init(c, o);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> t = i.clone.call(<span class="built_in">this</span>),</span><br><span class="line">              e = (t._state = <span class="built_in">this</span>._state.slice(<span class="number">0</span>)),</span><br><span class="line">              r = <span class="number">0</span>;</span><br><span class="line">            r &lt; <span class="number">25</span>;</span><br><span class="line">            r++</span><br><span class="line">          )</span><br><span class="line">            e[r] = e[r].clone();</span><br><span class="line">          <span class="keyword">return</span> t;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;));</span><br><span class="line">      (t.SHA3 = i._createHelper(n)), (t.HmacSHA3 = i._createHmacHelper(n));</span><br><span class="line">    &#125;)(<span class="built_in">Math</span>),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t = bt,</span><br><span class="line">        e = t.lib.Hasher,</span><br><span class="line">        r = t.x64,</span><br><span class="line">        i = r.Word,</span><br><span class="line">        n = r.WordArray,</span><br><span class="line">        o = t.algo;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i.create.apply(i, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> mt = [</span><br><span class="line">          s(<span class="number">1116352408</span>, <span class="number">3609767458</span>),</span><br><span class="line">          s(<span class="number">1899447441</span>, <span class="number">602891725</span>),</span><br><span class="line">          s(<span class="number">3049323471</span>, <span class="number">3964484399</span>),</span><br><span class="line">          s(<span class="number">3921009573</span>, <span class="number">2173295548</span>),</span><br><span class="line">          s(<span class="number">961987163</span>, <span class="number">4081628472</span>),</span><br><span class="line">          s(<span class="number">1508970993</span>, <span class="number">3053834265</span>),</span><br><span class="line">          s(<span class="number">2453635748</span>, <span class="number">2937671579</span>),</span><br><span class="line">          s(<span class="number">2870763221</span>, <span class="number">3664609560</span>),</span><br><span class="line">          s(<span class="number">3624381080</span>, <span class="number">2734883394</span>),</span><br><span class="line">          s(<span class="number">310598401</span>, <span class="number">1164996542</span>),</span><br><span class="line">          s(<span class="number">607225278</span>, <span class="number">1323610764</span>),</span><br><span class="line">          s(<span class="number">1426881987</span>, <span class="number">3590304994</span>),</span><br><span class="line">          s(<span class="number">1925078388</span>, <span class="number">4068182383</span>),</span><br><span class="line">          s(<span class="number">2162078206</span>, <span class="number">991336113</span>),</span><br><span class="line">          s(<span class="number">2614888103</span>, <span class="number">633803317</span>),</span><br><span class="line">          s(<span class="number">3248222580</span>, <span class="number">3479774868</span>),</span><br><span class="line">          s(<span class="number">3835390401</span>, <span class="number">2666613458</span>),</span><br><span class="line">          s(<span class="number">4022224774</span>, <span class="number">944711139</span>),</span><br><span class="line">          s(<span class="number">264347078</span>, <span class="number">2341262773</span>),</span><br><span class="line">          s(<span class="number">604807628</span>, <span class="number">2007800933</span>),</span><br><span class="line">          s(<span class="number">770255983</span>, <span class="number">1495990901</span>),</span><br><span class="line">          s(<span class="number">1249150122</span>, <span class="number">1856431235</span>),</span><br><span class="line">          s(<span class="number">1555081692</span>, <span class="number">3175218132</span>),</span><br><span class="line">          s(<span class="number">1996064986</span>, <span class="number">2198950837</span>),</span><br><span class="line">          s(<span class="number">2554220882</span>, <span class="number">3999719339</span>),</span><br><span class="line">          s(<span class="number">2821834349</span>, <span class="number">766784016</span>),</span><br><span class="line">          s(<span class="number">2952996808</span>, <span class="number">2566594879</span>),</span><br><span class="line">          s(<span class="number">3210313671</span>, <span class="number">3203337956</span>),</span><br><span class="line">          s(<span class="number">3336571891</span>, <span class="number">1034457026</span>),</span><br><span class="line">          s(<span class="number">3584528711</span>, <span class="number">2466948901</span>),</span><br><span class="line">          s(<span class="number">113926993</span>, <span class="number">3758326383</span>),</span><br><span class="line">          s(<span class="number">338241895</span>, <span class="number">168717936</span>),</span><br><span class="line">          s(<span class="number">666307205</span>, <span class="number">1188179964</span>),</span><br><span class="line">          s(<span class="number">773529912</span>, <span class="number">1546045734</span>),</span><br><span class="line">          s(<span class="number">1294757372</span>, <span class="number">1522805485</span>),</span><br><span class="line">          s(<span class="number">1396182291</span>, <span class="number">2643833823</span>),</span><br><span class="line">          s(<span class="number">1695183700</span>, <span class="number">2343527390</span>),</span><br><span class="line">          s(<span class="number">1986661051</span>, <span class="number">1014477480</span>),</span><br><span class="line">          s(<span class="number">2177026350</span>, <span class="number">1206759142</span>),</span><br><span class="line">          s(<span class="number">2456956037</span>, <span class="number">344077627</span>),</span><br><span class="line">          s(<span class="number">2730485921</span>, <span class="number">1290863460</span>),</span><br><span class="line">          s(<span class="number">2820302411</span>, <span class="number">3158454273</span>),</span><br><span class="line">          s(<span class="number">3259730800</span>, <span class="number">3505952657</span>),</span><br><span class="line">          s(<span class="number">3345764771</span>, <span class="number">106217008</span>),</span><br><span class="line">          s(<span class="number">3516065817</span>, <span class="number">3606008344</span>),</span><br><span class="line">          s(<span class="number">3600352804</span>, <span class="number">1432725776</span>),</span><br><span class="line">          s(<span class="number">4094571909</span>, <span class="number">1467031594</span>),</span><br><span class="line">          s(<span class="number">275423344</span>, <span class="number">851169720</span>),</span><br><span class="line">          s(<span class="number">430227734</span>, <span class="number">3100823752</span>),</span><br><span class="line">          s(<span class="number">506948616</span>, <span class="number">1363258195</span>),</span><br><span class="line">          s(<span class="number">659060556</span>, <span class="number">3750685593</span>),</span><br><span class="line">          s(<span class="number">883997877</span>, <span class="number">3785050280</span>),</span><br><span class="line">          s(<span class="number">958139571</span>, <span class="number">3318307427</span>),</span><br><span class="line">          s(<span class="number">1322822218</span>, <span class="number">3812723403</span>),</span><br><span class="line">          s(<span class="number">1537002063</span>, <span class="number">2003034995</span>),</span><br><span class="line">          s(<span class="number">1747873779</span>, <span class="number">3602036899</span>),</span><br><span class="line">          s(<span class="number">1955562222</span>, <span class="number">1575990012</span>),</span><br><span class="line">          s(<span class="number">2024104815</span>, <span class="number">1125592928</span>),</span><br><span class="line">          s(<span class="number">2227730452</span>, <span class="number">2716904306</span>),</span><br><span class="line">          s(<span class="number">2361852424</span>, <span class="number">442776044</span>),</span><br><span class="line">          s(<span class="number">2428436474</span>, <span class="number">593698344</span>),</span><br><span class="line">          s(<span class="number">2756734187</span>, <span class="number">3733110249</span>),</span><br><span class="line">          s(<span class="number">3204031479</span>, <span class="number">2999351573</span>),</span><br><span class="line">          s(<span class="number">3329325298</span>, <span class="number">3815920427</span>),</span><br><span class="line">          s(<span class="number">3391569614</span>, <span class="number">3928383900</span>),</span><br><span class="line">          s(<span class="number">3515267271</span>, <span class="number">566280711</span>),</span><br><span class="line">          s(<span class="number">3940187606</span>, <span class="number">3454069534</span>),</span><br><span class="line">          s(<span class="number">4118630271</span>, <span class="number">4000239992</span>),</span><br><span class="line">          s(<span class="number">116418474</span>, <span class="number">1914138554</span>),</span><br><span class="line">          s(<span class="number">174292421</span>, <span class="number">2731055270</span>),</span><br><span class="line">          s(<span class="number">289380356</span>, <span class="number">3203993006</span>),</span><br><span class="line">          s(<span class="number">460393269</span>, <span class="number">320620315</span>),</span><br><span class="line">          s(<span class="number">685471733</span>, <span class="number">587496836</span>),</span><br><span class="line">          s(<span class="number">852142971</span>, <span class="number">1086792851</span>),</span><br><span class="line">          s(<span class="number">1017036298</span>, <span class="number">365543100</span>),</span><br><span class="line">          s(<span class="number">1126000580</span>, <span class="number">2618297676</span>),</span><br><span class="line">          s(<span class="number">1288033470</span>, <span class="number">3409855158</span>),</span><br><span class="line">          s(<span class="number">1501505948</span>, <span class="number">4234509866</span>),</span><br><span class="line">          s(<span class="number">1607167915</span>, <span class="number">987167468</span>),</span><br><span class="line">          s(<span class="number">1816402316</span>, <span class="number">1246189591</span>),</span><br><span class="line">        ],</span><br><span class="line">        xt = [];</span><br><span class="line">      !(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; <span class="number">80</span>; t++) xt[t] = s();</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="keyword">var</span> c = (o.SHA512 = e.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._hash = <span class="keyword">new</span> n.init([</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">1779033703</span>, <span class="number">4089235720</span>),</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">3144134277</span>, <span class="number">2227873595</span>),</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">1013904242</span>, <span class="number">4271175723</span>),</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">2773480762</span>, <span class="number">1595750129</span>),</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">1359893119</span>, <span class="number">2917565137</span>),</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">2600822924</span>, <span class="number">725511199</span>),</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">528734635</span>, <span class="number">4215389547</span>),</span><br><span class="line">            <span class="keyword">new</span> i.init(<span class="number">1541459225</span>, <span class="number">327033209</span>),</span><br><span class="line">          ]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> r = <span class="built_in">this</span>._hash.words,</span><br><span class="line">              i = r[<span class="number">0</span>],</span><br><span class="line">              n = r[<span class="number">1</span>],</span><br><span class="line">              o = r[<span class="number">2</span>],</span><br><span class="line">              s = r[<span class="number">3</span>],</span><br><span class="line">              c = r[<span class="number">4</span>],</span><br><span class="line">              a = r[<span class="number">5</span>],</span><br><span class="line">              h = r[<span class="number">6</span>],</span><br><span class="line">              l = r[<span class="number">7</span>],</span><br><span class="line">              f = i.high,</span><br><span class="line">              d = i.low,</span><br><span class="line">              u = n.high,</span><br><span class="line">              p = n.low,</span><br><span class="line">              _ = o.high,</span><br><span class="line">              v = o.low,</span><br><span class="line">              y = s.high,</span><br><span class="line">              g = s.low,</span><br><span class="line">              B = c.high,</span><br><span class="line">              w = c.low,</span><br><span class="line">              k = a.high,</span><br><span class="line">              S = a.low,</span><br><span class="line">              m = h.high,</span><br><span class="line">              x = h.low,</span><br><span class="line">              b = l.high,</span><br><span class="line">              H = l.low,</span><br><span class="line">              z = f,</span><br><span class="line">              A = d,</span><br><span class="line">              C = u,</span><br><span class="line">              D = p,</span><br><span class="line">              E = _,</span><br><span class="line">              R = v,</span><br><span class="line">              M = y,</span><br><span class="line">              F = g,</span><br><span class="line">              P = B,</span><br><span class="line">              W = w,</span><br><span class="line">              O = k,</span><br><span class="line">              I = S,</span><br><span class="line">              U = m,</span><br><span class="line">              K = x,</span><br><span class="line">              X = b,</span><br><span class="line">              L = H,</span><br><span class="line">              j = <span class="number">0</span>;</span><br><span class="line">            j &lt; <span class="number">80</span>;</span><br><span class="line">            j++</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">var</span> N,</span><br><span class="line">              T,</span><br><span class="line">              q = xt[j];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">16</span>)</span><br><span class="line">              (T = q.high = <span class="number">0</span> | t[e + <span class="number">2</span> * j]),</span><br><span class="line">                (N = q.low = <span class="number">0</span> | t[e + <span class="number">2</span> * j + <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> Z = xt[j - <span class="number">15</span>],</span><br><span class="line">                V = Z.high,</span><br><span class="line">                G = Z.low,</span><br><span class="line">                J =</span><br><span class="line">                  ((V &gt;&gt;&gt; <span class="number">1</span>) | (G &lt;&lt; <span class="number">31</span>)) ^ ((V &gt;&gt;&gt; <span class="number">8</span>) | (G &lt;&lt; <span class="number">24</span>)) ^ (V &gt;&gt;&gt; <span class="number">7</span>),</span><br><span class="line">                $ =</span><br><span class="line">                  ((G &gt;&gt;&gt; <span class="number">1</span>) | (V &lt;&lt; <span class="number">31</span>)) ^</span><br><span class="line">                  ((G &gt;&gt;&gt; <span class="number">8</span>) | (V &lt;&lt; <span class="number">24</span>)) ^</span><br><span class="line">                  ((G &gt;&gt;&gt; <span class="number">7</span>) | (V &lt;&lt; <span class="number">25</span>)),</span><br><span class="line">                Q = xt[j - <span class="number">2</span>],</span><br><span class="line">                Y = Q.high,</span><br><span class="line">                tt = Q.low,</span><br><span class="line">                et =</span><br><span class="line">                  ((Y &gt;&gt;&gt; <span class="number">19</span>) | (tt &lt;&lt; <span class="number">13</span>)) ^</span><br><span class="line">                  ((Y &lt;&lt; <span class="number">3</span>) | (tt &gt;&gt;&gt; <span class="number">29</span>)) ^</span><br><span class="line">                  (Y &gt;&gt;&gt; <span class="number">6</span>),</span><br><span class="line">                rt =</span><br><span class="line">                  ((tt &gt;&gt;&gt; <span class="number">19</span>) | (Y &lt;&lt; <span class="number">13</span>)) ^</span><br><span class="line">                  ((tt &lt;&lt; <span class="number">3</span>) | (Y &gt;&gt;&gt; <span class="number">29</span>)) ^</span><br><span class="line">                  ((tt &gt;&gt;&gt; <span class="number">6</span>) | (Y &lt;&lt; <span class="number">26</span>)),</span><br><span class="line">                it = xt[j - <span class="number">7</span>],</span><br><span class="line">                nt = it.high,</span><br><span class="line">                ot = it.low,</span><br><span class="line">                st = xt[j - <span class="number">16</span>],</span><br><span class="line">                ct = st.high,</span><br><span class="line">                at = st.low;</span><br><span class="line">              (T =</span><br><span class="line">                (T =</span><br><span class="line">                  (T = J + nt + ((N = $ + ot) &gt;&gt;&gt; <span class="number">0</span> &lt; $ &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) +</span><br><span class="line">                  et +</span><br><span class="line">                  ((N += rt) &gt;&gt;&gt; <span class="number">0</span> &lt; rt &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) +</span><br><span class="line">                ct +</span><br><span class="line">                ((N += at) &gt;&gt;&gt; <span class="number">0</span> &lt; at &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">                (q.high = T),</span><br><span class="line">                (q.low = N);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> ht,</span><br><span class="line">              lt = (P &amp; O) ^ (~P &amp; U),</span><br><span class="line">              ft = (W &amp; I) ^ (~W &amp; K),</span><br><span class="line">              dt = (z &amp; C) ^ (z &amp; E) ^ (C &amp; E),</span><br><span class="line">              ut = (A &amp; D) ^ (A &amp; R) ^ (D &amp; R),</span><br><span class="line">              pt =</span><br><span class="line">                ((z &gt;&gt;&gt; <span class="number">28</span>) | (A &lt;&lt; <span class="number">4</span>)) ^</span><br><span class="line">                ((z &lt;&lt; <span class="number">30</span>) | (A &gt;&gt;&gt; <span class="number">2</span>)) ^</span><br><span class="line">                ((z &lt;&lt; <span class="number">25</span>) | (A &gt;&gt;&gt; <span class="number">7</span>)),</span><br><span class="line">              _t =</span><br><span class="line">                ((A &gt;&gt;&gt; <span class="number">28</span>) | (z &lt;&lt; <span class="number">4</span>)) ^</span><br><span class="line">                ((A &lt;&lt; <span class="number">30</span>) | (z &gt;&gt;&gt; <span class="number">2</span>)) ^</span><br><span class="line">                ((A &lt;&lt; <span class="number">25</span>) | (z &gt;&gt;&gt; <span class="number">7</span>)),</span><br><span class="line">              vt =</span><br><span class="line">                ((P &gt;&gt;&gt; <span class="number">14</span>) | (W &lt;&lt; <span class="number">18</span>)) ^</span><br><span class="line">                ((P &gt;&gt;&gt; <span class="number">18</span>) | (W &lt;&lt; <span class="number">14</span>)) ^</span><br><span class="line">                ((P &lt;&lt; <span class="number">23</span>) | (W &gt;&gt;&gt; <span class="number">9</span>)),</span><br><span class="line">              yt =</span><br><span class="line">                ((W &gt;&gt;&gt; <span class="number">14</span>) | (P &lt;&lt; <span class="number">18</span>)) ^</span><br><span class="line">                ((W &gt;&gt;&gt; <span class="number">18</span>) | (P &lt;&lt; <span class="number">14</span>)) ^</span><br><span class="line">                ((W &lt;&lt; <span class="number">23</span>) | (P &gt;&gt;&gt; <span class="number">9</span>)),</span><br><span class="line">              gt = mt[j],</span><br><span class="line">              Bt = gt.high,</span><br><span class="line">              wt = gt.low,</span><br><span class="line">              kt = X + vt + ((ht = L + yt) &gt;&gt;&gt; <span class="number">0</span> &lt; L &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>),</span><br><span class="line">              St = _t + ut;</span><br><span class="line">            (X = U),</span><br><span class="line">              (L = K),</span><br><span class="line">              (U = O),</span><br><span class="line">              (K = I),</span><br><span class="line">              (O = P),</span><br><span class="line">              (I = W),</span><br><span class="line">              (P =</span><br><span class="line">                (M +</span><br><span class="line">                  (kt =</span><br><span class="line">                    (kt =</span><br><span class="line">                      (kt =</span><br><span class="line">                        kt + lt + ((ht = ht + ft) &gt;&gt;&gt; <span class="number">0</span> &lt; ft &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) +</span><br><span class="line">                      Bt +</span><br><span class="line">                      ((ht = ht + wt) &gt;&gt;&gt; <span class="number">0</span> &lt; wt &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) +</span><br><span class="line">                    T +</span><br><span class="line">                    ((ht = ht + N) &gt;&gt;&gt; <span class="number">0</span> &lt; N &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) +</span><br><span class="line">                  ((W = (F + ht) | <span class="number">0</span>) &gt;&gt;&gt; <span class="number">0</span> &lt; F &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) |</span><br><span class="line">                <span class="number">0</span>),</span><br><span class="line">              (M = E),</span><br><span class="line">              (F = R),</span><br><span class="line">              (E = C),</span><br><span class="line">              (R = D),</span><br><span class="line">              (C = z),</span><br><span class="line">              (D = A),</span><br><span class="line">              (z =</span><br><span class="line">                (kt +</span><br><span class="line">                  (pt + dt + (St &gt;&gt;&gt; <span class="number">0</span> &lt; _t &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) +</span><br><span class="line">                  ((A = (ht + St) | <span class="number">0</span>) &gt;&gt;&gt; <span class="number">0</span> &lt; ht &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)) |</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          (d = i.low = d + A),</span><br><span class="line">            (i.high = f + z + (d &gt;&gt;&gt; <span class="number">0</span> &lt; A &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">            (p = n.low = p + D),</span><br><span class="line">            (n.high = u + C + (p &gt;&gt;&gt; <span class="number">0</span> &lt; D &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">            (v = o.low = v + R),</span><br><span class="line">            (o.high = _ + E + (v &gt;&gt;&gt; <span class="number">0</span> &lt; R &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">            (g = s.low = g + F),</span><br><span class="line">            (s.high = y + M + (g &gt;&gt;&gt; <span class="number">0</span> &lt; F &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">            (w = c.low = w + W),</span><br><span class="line">            (c.high = B + P + (w &gt;&gt;&gt; <span class="number">0</span> &lt; W &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">            (S = a.low = S + I),</span><br><span class="line">            (a.high = k + O + (S &gt;&gt;&gt; <span class="number">0</span> &lt; I &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">            (x = h.low = x + K),</span><br><span class="line">            (h.high = m + U + (x &gt;&gt;&gt; <span class="number">0</span> &lt; K &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">            (H = l.low = H + L),</span><br><span class="line">            (l.high = b + X + (H &gt;&gt;&gt; <span class="number">0</span> &lt; L &gt;&gt;&gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = <span class="built_in">this</span>._data,</span><br><span class="line">            e = t.words,</span><br><span class="line">            r = <span class="number">8</span> * <span class="built_in">this</span>._nDataBytes,</span><br><span class="line">            i = <span class="number">8</span> * t.sigBytes;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            (e[i &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; (<span class="number">24</span> - (i % <span class="number">32</span>))),</span><br><span class="line">            (e[<span class="number">30</span> + (((<span class="number">128</span> + i) &gt;&gt;&gt; <span class="number">10</span>) &lt;&lt; <span class="number">5</span>)] = <span class="built_in">Math</span>.floor(r / <span class="number">4294967296</span>)),</span><br><span class="line">            (e[<span class="number">31</span> + (((<span class="number">128</span> + i) &gt;&gt;&gt; <span class="number">10</span>) &lt;&lt; <span class="number">5</span>)] = r),</span><br><span class="line">            (t.sigBytes = <span class="number">4</span> * e.length),</span><br><span class="line">            <span class="built_in">this</span>._process(),</span><br><span class="line">            <span class="built_in">this</span>._hash.toX32()</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = e.clone.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">return</span> (t._hash = <span class="built_in">this</span>._hash.clone()), t;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">32</span>,</span><br><span class="line">      &#125;));</span><br><span class="line">      (t.SHA512 = e._createHelper(c)), (t.HmacSHA512 = e._createHmacHelper(c));</span><br><span class="line">    &#125;)(),</span><br><span class="line">    (Z = (q = bt).x64),</span><br><span class="line">    (V = Z.Word),</span><br><span class="line">    (G = Z.WordArray),</span><br><span class="line">    (J = q.algo),</span><br><span class="line">    ($ = J.SHA512),</span><br><span class="line">    (Q = J.SHA384 =</span><br><span class="line">      $.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._hash = <span class="keyword">new</span> G.init([</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">3418070365</span>, <span class="number">3238371032</span>),</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">1654270250</span>, <span class="number">914150663</span>),</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">2438529370</span>, <span class="number">812702999</span>),</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">355462360</span>, <span class="number">4144912697</span>),</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">1731405415</span>, <span class="number">4290775857</span>),</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">2394180231</span>, <span class="number">1750603025</span>),</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">3675008525</span>, <span class="number">1694076839</span>),</span><br><span class="line">            <span class="keyword">new</span> V.init(<span class="number">1203062813</span>, <span class="number">3204075428</span>),</span><br><span class="line">          ]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = $._doFinalize.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">return</span> (t.sigBytes -= <span class="number">16</span>), t;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (q.SHA384 = $._createHelper(Q)),</span><br><span class="line">    (q.HmacSHA384 = $._createHmacHelper(Q)),</span><br><span class="line">    bt.lib.Cipher ||</span><br><span class="line">      (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = bt,</span><br><span class="line">          e = t.lib,</span><br><span class="line">          r = e.Base,</span><br><span class="line">          a = e.WordArray,</span><br><span class="line">          i = e.BufferedBlockAlgorithm,</span><br><span class="line">          n = t.enc,</span><br><span class="line">          o = (n.Utf8, n.Base64),</span><br><span class="line">          s = t.algo.EvpKDF,</span><br><span class="line">          c = (e.Cipher = i.extend(&#123;</span><br><span class="line">            <span class="attr">cfg</span>: r.extend(),</span><br><span class="line">            <span class="attr">createEncryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.create(<span class="built_in">this</span>._ENC_XFORM_MODE, t, e);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">createDecryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.create(<span class="built_in">this</span>._DEC_XFORM_MODE, t, e);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">              (<span class="built_in">this</span>.cfg = <span class="built_in">this</span>.cfg.extend(r)),</span><br><span class="line">                (<span class="built_in">this</span>._xformMode = t),</span><br><span class="line">                (<span class="built_in">this</span>._key = e),</span><br><span class="line">                <span class="built_in">this</span>.reset();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              i.reset.call(<span class="built_in">this</span>), <span class="built_in">this</span>._doReset();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">process</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>._append(t), <span class="built_in">this</span>._process();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">finalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> t &amp;&amp; <span class="built_in">this</span>._append(t), <span class="built_in">this</span>._doFinalize();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">keySize</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">ivSize</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">_ENC_XFORM_MODE</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">_DEC_XFORM_MODE</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">_createHelper</span>: <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">encrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> h(e).encrypt(i, t, e, r);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">decrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> h(e).decrypt(i, t, e, r);</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;));</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t ? w : g;</span><br><span class="line">        &#125;</span><br><span class="line">        e.StreamCipher = c.extend(&#123;</span><br><span class="line">          <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._process(!<span class="number">0</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">blockSize</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> l,</span><br><span class="line">          f = (t.mode = &#123;&#125;),</span><br><span class="line">          d = (e.BlockCipherMode = r.extend(&#123;</span><br><span class="line">            <span class="attr">createEncryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.Encryptor.create(t, e);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">createDecryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.Decryptor.create(t, e);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              (<span class="built_in">this</span>._cipher = t), (<span class="built_in">this</span>._iv = e);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)),</span><br><span class="line">          u = (f.CBC =</span><br><span class="line">            (((l = d.extend()).Encryptor = l.extend(&#123;</span><br><span class="line">              <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> r = <span class="built_in">this</span>._cipher,</span><br><span class="line">                  i = r.blockSize;</span><br><span class="line">                p.call(<span class="built_in">this</span>, t, e, i),</span><br><span class="line">                  r.encryptBlock(t, e),</span><br><span class="line">                  (<span class="built_in">this</span>._prevBlock = t.slice(e, e + i));</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;)),</span><br><span class="line">            (l.Decryptor = l.extend(&#123;</span><br><span class="line">              <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> r = <span class="built_in">this</span>._cipher,</span><br><span class="line">                  i = r.blockSize,</span><br><span class="line">                  n = t.slice(e, e + i);</span><br><span class="line">                r.decryptBlock(t, e),</span><br><span class="line">                  p.call(<span class="built_in">this</span>, t, e, i),</span><br><span class="line">                  (<span class="built_in">this</span>._prevBlock = n);</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;)),</span><br><span class="line">            l));</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> i,</span><br><span class="line">            n = <span class="built_in">this</span>._iv;</span><br><span class="line">          n ? ((i = n), (<span class="built_in">this</span>._iv = <span class="keyword">void</span> <span class="number">0</span>)) : (i = <span class="built_in">this</span>._prevBlock);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; o &lt; r; o++) t[e + o] ^= i[o];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> _ = ((t.pad = &#123;&#125;).Pkcs7 = &#123;</span><br><span class="line">            <span class="attr">pad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (</span><br><span class="line">                <span class="keyword">var</span> r = <span class="number">4</span> * e,</span><br><span class="line">                  i = r - (t.sigBytes % r),</span><br><span class="line">                  n = (i &lt;&lt; <span class="number">24</span>) | (i &lt;&lt; <span class="number">16</span>) | (i &lt;&lt; <span class="number">8</span>) | i,</span><br><span class="line">                  o = [],</span><br><span class="line">                  s = <span class="number">0</span>;</span><br><span class="line">                s &lt; i;</span><br><span class="line">                s += <span class="number">4</span></span><br><span class="line">              )</span><br><span class="line">                o.push(n);</span><br><span class="line">              <span class="keyword">var</span> c = a.create(o, i);</span><br><span class="line">              t.concat(c);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">unpad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> e = <span class="number">255</span> &amp; t.words[(t.sigBytes - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">2</span>];</span><br><span class="line">              t.sigBytes -= e;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">          v =</span><br><span class="line">            ((e.BlockCipher = c.extend(&#123;</span><br><span class="line">              <span class="attr">cfg</span>: c.cfg.extend(&#123; <span class="attr">mode</span>: u, <span class="attr">padding</span>: _ &#125;),</span><br><span class="line">              <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> t;</span><br><span class="line">                c.reset.call(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">var</span> e = <span class="built_in">this</span>.cfg,</span><br><span class="line">                  r = e.iv,</span><br><span class="line">                  i = e.mode;</span><br><span class="line">                <span class="built_in">this</span>._xformMode == <span class="built_in">this</span>._ENC_XFORM_MODE</span><br><span class="line">                  ? (t = i.createEncryptor)</span><br><span class="line">                  : ((t = i.createDecryptor), (<span class="built_in">this</span>._minBufferSize = <span class="number">1</span>)),</span><br><span class="line">                  <span class="built_in">this</span>._mode &amp;&amp; <span class="built_in">this</span>._mode.__creator == t</span><br><span class="line">                    ? <span class="built_in">this</span>._mode.init(<span class="built_in">this</span>, r &amp;&amp; r.words)</span><br><span class="line">                    : ((<span class="built_in">this</span>._mode = t.call(i, <span class="built_in">this</span>, r &amp;&amp; r.words)),</span><br><span class="line">                      (<span class="built_in">this</span>._mode.__creator = t));</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>._mode.processBlock(t, e);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> t,</span><br><span class="line">                  e = <span class="built_in">this</span>.cfg.padding;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                  <span class="built_in">this</span>._xformMode == <span class="built_in">this</span>._ENC_XFORM_MODE</span><br><span class="line">                    ? (e.pad(<span class="built_in">this</span>._data, <span class="built_in">this</span>.blockSize),</span><br><span class="line">                      (t = <span class="built_in">this</span>._process(!<span class="number">0</span>)))</span><br><span class="line">                    : ((t = <span class="built_in">this</span>._process(!<span class="number">0</span>)), e.unpad(t)),</span><br><span class="line">                  t</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">blockSize</span>: <span class="number">4</span>,</span><br><span class="line">            &#125;)),</span><br><span class="line">            (e.CipherParams = r.extend(&#123;</span><br><span class="line">              <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.mixIn(t);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (t || <span class="built_in">this</span>.formatter).stringify(<span class="built_in">this</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;))),</span><br><span class="line">          y = ((t.format = &#123;&#125;).OpenSSL = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> e = t.ciphertext,</span><br><span class="line">                r = t.salt;</span><br><span class="line">              <span class="keyword">return</span> (</span><br><span class="line">                r ? a.create([<span class="number">1398893684</span>, <span class="number">1701076831</span>]).concat(r).concat(e) : e</span><br><span class="line">              ).toString(o);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> e,</span><br><span class="line">                r = o.parse(t),</span><br><span class="line">                i = r.words;</span><br><span class="line">              <span class="keyword">return</span> (</span><br><span class="line">                <span class="number">1398893684</span> == i[<span class="number">0</span>] &amp;&amp;</span><br><span class="line">                  <span class="number">1701076831</span> == i[<span class="number">1</span>] &amp;&amp;</span><br><span class="line">                  ((e = a.create(i.slice(<span class="number">2</span>, <span class="number">4</span>))),</span><br><span class="line">                  i.splice(<span class="number">0</span>, <span class="number">4</span>),</span><br><span class="line">                  (r.sigBytes -= <span class="number">16</span>)),</span><br><span class="line">                v.create(&#123; <span class="attr">ciphertext</span>: r, <span class="attr">salt</span>: e &#125;)</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">          g = (e.SerializableCipher = r.extend(&#123;</span><br><span class="line">            <span class="attr">cfg</span>: r.extend(&#123; <span class="attr">format</span>: y &#125;),</span><br><span class="line">            <span class="attr">encrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r, i</span>) </span>&#123;</span><br><span class="line">              i = <span class="built_in">this</span>.cfg.extend(i);</span><br><span class="line">              <span class="keyword">var</span> n = t.createEncryptor(r, i),</span><br><span class="line">                o = n.finalize(e),</span><br><span class="line">                s = n.cfg;</span><br><span class="line">              <span class="keyword">return</span> v.create(&#123;</span><br><span class="line">                <span class="attr">ciphertext</span>: o,</span><br><span class="line">                <span class="attr">key</span>: r,</span><br><span class="line">                <span class="attr">iv</span>: s.iv,</span><br><span class="line">                <span class="attr">algorithm</span>: t,</span><br><span class="line">                <span class="attr">mode</span>: s.mode,</span><br><span class="line">                <span class="attr">padding</span>: s.padding,</span><br><span class="line">                <span class="attr">blockSize</span>: t.blockSize,</span><br><span class="line">                <span class="attr">formatter</span>: i.format,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">decrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r, i</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> (</span><br><span class="line">                (i = <span class="built_in">this</span>.cfg.extend(i)),</span><br><span class="line">                (e = <span class="built_in">this</span>._parse(e, i.format)),</span><br><span class="line">                t.createDecryptor(r, i).finalize(e.ciphertext)</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t ? e.parse(t, <span class="built_in">this</span>) : t;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)),</span><br><span class="line">          B = ((t.kdf = &#123;&#125;).OpenSSL = &#123;</span><br><span class="line">            <span class="attr">execute</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r, i</span>) </span>&#123;</span><br><span class="line">              i = i || a.random(<span class="number">8</span>);</span><br><span class="line">              <span class="keyword">var</span> n = s.create(&#123; <span class="attr">keySize</span>: e + r &#125;).compute(t, i),</span><br><span class="line">                o = a.create(n.words.slice(e), <span class="number">4</span> * r);</span><br><span class="line">              <span class="keyword">return</span> (n.sigBytes = <span class="number">4</span> * e), v.create(&#123; <span class="attr">key</span>: n, <span class="attr">iv</span>: o, <span class="attr">salt</span>: i &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">          w = (e.PasswordBasedCipher = g.extend(&#123;</span><br><span class="line">            <span class="attr">cfg</span>: g.cfg.extend(&#123; <span class="attr">kdf</span>: B &#125;),</span><br><span class="line">            <span class="attr">encrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r, i</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> n = (i = <span class="built_in">this</span>.cfg.extend(i)).kdf.execute(</span><br><span class="line">                r,</span><br><span class="line">                t.keySize,</span><br><span class="line">                t.ivSize</span><br><span class="line">              );</span><br><span class="line">              i.iv = n.iv;</span><br><span class="line">              <span class="keyword">var</span> o = g.encrypt.call(<span class="built_in">this</span>, t, e, n.key, i);</span><br><span class="line">              <span class="keyword">return</span> o.mixIn(n), o;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">decrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r, i</span>) </span>&#123;</span><br><span class="line">              (i = <span class="built_in">this</span>.cfg.extend(i)), (e = <span class="built_in">this</span>._parse(e, i.format));</span><br><span class="line">              <span class="keyword">var</span> n = i.kdf.execute(r, t.keySize, t.ivSize, e.salt);</span><br><span class="line">              <span class="keyword">return</span> (i.iv = n.iv), g.decrypt.call(<span class="built_in">this</span>, t, e, n.key, i);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;));</span><br><span class="line">      &#125;)(),</span><br><span class="line">    (bt.mode.CFB =</span><br><span class="line">      (((Y = bt.lib.BlockCipherMode.extend()).Encryptor = Y.extend(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> r = <span class="built_in">this</span>._cipher,</span><br><span class="line">            i = r.blockSize;</span><br><span class="line">          Dt.call(<span class="built_in">this</span>, t, e, i, r), (<span class="built_in">this</span>._prevBlock = t.slice(e, e + i));</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">      (Y.Decryptor = Y.extend(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> r = <span class="built_in">this</span>._cipher,</span><br><span class="line">            i = r.blockSize,</span><br><span class="line">            n = t.slice(e, e + i);</span><br><span class="line">          Dt.call(<span class="built_in">this</span>, t, e, i, r), (<span class="built_in">this</span>._prevBlock = n);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">      Y)),</span><br><span class="line">    (bt.mode.ECB =</span><br><span class="line">      (((tt = bt.lib.BlockCipherMode.extend()).Encryptor = tt.extend(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._cipher.encryptBlock(t, e);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">      (tt.Decryptor = tt.extend(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._cipher.decryptBlock(t, e);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)),</span><br><span class="line">      tt)),</span><br><span class="line">    (bt.pad.AnsiX923 = &#123;</span><br><span class="line">      <span class="attr">pad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = t.sigBytes,</span><br><span class="line">          i = <span class="number">4</span> * e,</span><br><span class="line">          n = i - (r % i),</span><br><span class="line">          o = r + n - <span class="number">1</span>;</span><br><span class="line">        t.clamp(),</span><br><span class="line">          (t.words[o &gt;&gt;&gt; <span class="number">2</span>] |= n &lt;&lt; (<span class="number">24</span> - (o % <span class="number">4</span>) * <span class="number">8</span>)),</span><br><span class="line">          (t.sigBytes += n);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">unpad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">255</span> &amp; t.words[(t.sigBytes - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">2</span>];</span><br><span class="line">        t.sigBytes -= e;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    (bt.pad.Iso10126 = &#123;</span><br><span class="line">      <span class="attr">pad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="number">4</span> * e,</span><br><span class="line">          i = r - (t.sigBytes % r);</span><br><span class="line">        t.concat(bt.lib.WordArray.random(i - <span class="number">1</span>)).concat(</span><br><span class="line">          bt.lib.WordArray.create([i &lt;&lt; <span class="number">24</span>], <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">unpad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">255</span> &amp; t.words[(t.sigBytes - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">2</span>];</span><br><span class="line">        t.sigBytes -= e;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    (bt.pad.Iso97971 = &#123;</span><br><span class="line">      <span class="attr">pad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        t.concat(bt.lib.WordArray.create([<span class="number">2147483648</span>], <span class="number">1</span>)),</span><br><span class="line">          bt.pad.ZeroPadding.pad(t, e);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">unpad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        bt.pad.ZeroPadding.unpad(t), t.sigBytes--;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    (bt.mode.OFB =</span><br><span class="line">      ((et = bt.lib.BlockCipherMode.extend()),</span><br><span class="line">      (rt = et.Encryptor =</span><br><span class="line">        et.extend(&#123;</span><br><span class="line">          <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="built_in">this</span>._cipher,</span><br><span class="line">              i = r.blockSize,</span><br><span class="line">              n = <span class="built_in">this</span>._iv,</span><br><span class="line">              o = <span class="built_in">this</span>._keystream;</span><br><span class="line">            n &amp;&amp; ((o = <span class="built_in">this</span>._keystream = n.slice(<span class="number">0</span>)), (<span class="built_in">this</span>._iv = <span class="keyword">void</span> <span class="number">0</span>)),</span><br><span class="line">              r.encryptBlock(o, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt; i; s++) t[e + s] ^= o[s];</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)),</span><br><span class="line">      (et.Decryptor = rt),</span><br><span class="line">      et)),</span><br><span class="line">    (bt.pad.NoPadding = &#123; <span class="attr">pad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="attr">unpad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;),</span><br><span class="line">    (it = bt.lib.CipherParams),</span><br><span class="line">    (nt = bt.enc.Hex),</span><br><span class="line">    (bt.format.Hex = &#123;</span><br><span class="line">      <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.ciphertext.toString(nt);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = nt.parse(t);</span><br><span class="line">        <span class="keyword">return</span> it.create(&#123; <span class="attr">ciphertext</span>: e &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t = bt,</span><br><span class="line">        e = t.lib.BlockCipher,</span><br><span class="line">        r = t.algo,</span><br><span class="line">        h = [],</span><br><span class="line">        l = [],</span><br><span class="line">        f = [],</span><br><span class="line">        d = [],</span><br><span class="line">        u = [],</span><br><span class="line">        p = [],</span><br><span class="line">        _ = [],</span><br><span class="line">        v = [],</span><br><span class="line">        y = [],</span><br><span class="line">        g = [];</span><br><span class="line">      !(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = [], e = <span class="number">0</span>; e &lt; <span class="number">256</span>; e++)</span><br><span class="line">          t[e] = e &lt; <span class="number">128</span> ? e &lt;&lt; <span class="number">1</span> : (e &lt;&lt; <span class="number">1</span>) ^ <span class="number">283</span>;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="number">0</span>,</span><br><span class="line">          i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; <span class="number">256</span>; e++) &#123;</span><br><span class="line">          <span class="keyword">var</span> n = i ^ (i &lt;&lt; <span class="number">1</span>) ^ (i &lt;&lt; <span class="number">2</span>) ^ (i &lt;&lt; <span class="number">3</span>) ^ (i &lt;&lt; <span class="number">4</span>);</span><br><span class="line">          (n = (n &gt;&gt;&gt; <span class="number">8</span>) ^ (<span class="number">255</span> &amp; n) ^ <span class="number">99</span>), (h[r] = n);</span><br><span class="line">          <span class="keyword">var</span> o = t[(l[n] = r)],</span><br><span class="line">            s = t[o],</span><br><span class="line">            c = t[s],</span><br><span class="line">            a = (<span class="number">257</span> * t[n]) ^ (<span class="number">16843008</span> * n);</span><br><span class="line">          (f[r] = (a &lt;&lt; <span class="number">24</span>) | (a &gt;&gt;&gt; <span class="number">8</span>)),</span><br><span class="line">            (d[r] = (a &lt;&lt; <span class="number">16</span>) | (a &gt;&gt;&gt; <span class="number">16</span>)),</span><br><span class="line">            (u[r] = (a &lt;&lt; <span class="number">8</span>) | (a &gt;&gt;&gt; <span class="number">24</span>)),</span><br><span class="line">            (p[r] = a);</span><br><span class="line">          a = (<span class="number">16843009</span> * c) ^ (<span class="number">65537</span> * s) ^ (<span class="number">257</span> * o) ^ (<span class="number">16843008</span> * r);</span><br><span class="line">          (_[n] = (a &lt;&lt; <span class="number">24</span>) | (a &gt;&gt;&gt; <span class="number">8</span>)),</span><br><span class="line">            (v[n] = (a &lt;&lt; <span class="number">16</span>) | (a &gt;&gt;&gt; <span class="number">16</span>)),</span><br><span class="line">            (y[n] = (a &lt;&lt; <span class="number">8</span>) | (a &gt;&gt;&gt; <span class="number">24</span>)),</span><br><span class="line">            (g[n] = a),</span><br><span class="line">            r ? ((r = o ^ t[t[t[c ^ o]]]), (i ^= t[t[i]])) : (r = i = <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="keyword">var</span> B = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">27</span>, <span class="number">54</span>],</span><br><span class="line">        i = (r.AES = e.extend(&#123;</span><br><span class="line">          <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>._nRounds || <span class="built_in">this</span>._keyPriorReset !== <span class="built_in">this</span>._key) &#123;</span><br><span class="line">              <span class="keyword">for</span> (</span><br><span class="line">                <span class="keyword">var</span> t = (<span class="built_in">this</span>._keyPriorReset = <span class="built_in">this</span>._key),</span><br><span class="line">                  e = t.words,</span><br><span class="line">                  r = t.sigBytes / <span class="number">4</span>,</span><br><span class="line">                  i = <span class="number">4</span> * (<span class="number">1</span> + (<span class="built_in">this</span>._nRounds = <span class="number">6</span> + r)),</span><br><span class="line">                  n = (<span class="built_in">this</span>._keySchedule = []),</span><br><span class="line">                  o = <span class="number">0</span>;</span><br><span class="line">                o &lt; i;</span><br><span class="line">                o++</span><br><span class="line">              )</span><br><span class="line">                o &lt; r</span><br><span class="line">                  ? (n[o] = e[o])</span><br><span class="line">                  : ((a = n[o - <span class="number">1</span>]),</span><br><span class="line">                    o % r</span><br><span class="line">                      ? <span class="number">6</span> &lt; r &amp;&amp;</span><br><span class="line">                        o % r == <span class="number">4</span> &amp;&amp;</span><br><span class="line">                        (a =</span><br><span class="line">                          (h[a &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">                          (h[(a &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                          (h[(a &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                          h[<span class="number">255</span> &amp; a])</span><br><span class="line">                      : ((a =</span><br><span class="line">                          (h[(a = (a &lt;&lt; <span class="number">8</span>) | (a &gt;&gt;&gt; <span class="number">24</span>)) &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">                          (h[(a &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                          (h[(a &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                          h[<span class="number">255</span> &amp; a]),</span><br><span class="line">                        (a ^= B[(o / r) | <span class="number">0</span>] &lt;&lt; <span class="number">24</span>)),</span><br><span class="line">                    (n[o] = n[o - r] ^ a));</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> s = (<span class="built_in">this</span>._invKeySchedule = []), c = <span class="number">0</span>; c &lt; i; c++) &#123;</span><br><span class="line">                o = i - c;</span><br><span class="line">                <span class="keyword">if</span> (c % <span class="number">4</span>) <span class="keyword">var</span> a = n[o];</span><br><span class="line">                <span class="keyword">else</span> a = n[o - <span class="number">4</span>];</span><br><span class="line">                s[c] =</span><br><span class="line">                  c &lt; <span class="number">4</span> || o &lt;= <span class="number">4</span></span><br><span class="line">                    ? a</span><br><span class="line">                    : _[h[a &gt;&gt;&gt; <span class="number">24</span>]] ^</span><br><span class="line">                      v[h[(a &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>]] ^</span><br><span class="line">                      y[h[(a &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>]] ^</span><br><span class="line">                      g[h[<span class="number">255</span> &amp; a]];</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">encryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._doCryptBlock(t, e, <span class="built_in">this</span>._keySchedule, f, d, u, p, h);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">decryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> r = t[e + <span class="number">1</span>];</span><br><span class="line">            (t[e + <span class="number">1</span>] = t[e + <span class="number">3</span>]),</span><br><span class="line">              (t[e + <span class="number">3</span>] = r),</span><br><span class="line">              <span class="built_in">this</span>._doCryptBlock(t, e, <span class="built_in">this</span>._invKeySchedule, _, v, y, g, l);</span><br><span class="line">            r = t[e + <span class="number">1</span>];</span><br><span class="line">            (t[e + <span class="number">1</span>] = t[e + <span class="number">3</span>]), (t[e + <span class="number">3</span>] = r);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">_doCryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r, i, n, o, s, c</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (</span><br><span class="line">              <span class="keyword">var</span> a = <span class="built_in">this</span>._nRounds,</span><br><span class="line">                h = t[e] ^ r[<span class="number">0</span>],</span><br><span class="line">                l = t[e + <span class="number">1</span>] ^ r[<span class="number">1</span>],</span><br><span class="line">                f = t[e + <span class="number">2</span>] ^ r[<span class="number">2</span>],</span><br><span class="line">                d = t[e + <span class="number">3</span>] ^ r[<span class="number">3</span>],</span><br><span class="line">                u = <span class="number">4</span>,</span><br><span class="line">                p = <span class="number">1</span>;</span><br><span class="line">              p &lt; a;</span><br><span class="line">              p++</span><br><span class="line">            ) &#123;</span><br><span class="line">              <span class="keyword">var</span> _ =</span><br><span class="line">                  i[h &gt;&gt;&gt; <span class="number">24</span>] ^</span><br><span class="line">                  n[(l &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  o[(f &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  s[<span class="number">255</span> &amp; d] ^</span><br><span class="line">                  r[u++],</span><br><span class="line">                v =</span><br><span class="line">                  i[l &gt;&gt;&gt; <span class="number">24</span>] ^</span><br><span class="line">                  n[(f &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  o[(d &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  s[<span class="number">255</span> &amp; h] ^</span><br><span class="line">                  r[u++],</span><br><span class="line">                y =</span><br><span class="line">                  i[f &gt;&gt;&gt; <span class="number">24</span>] ^</span><br><span class="line">                  n[(d &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  o[(h &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  s[<span class="number">255</span> &amp; l] ^</span><br><span class="line">                  r[u++],</span><br><span class="line">                g =</span><br><span class="line">                  i[d &gt;&gt;&gt; <span class="number">24</span>] ^</span><br><span class="line">                  n[(h &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  o[(l &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] ^</span><br><span class="line">                  s[<span class="number">255</span> &amp; f] ^</span><br><span class="line">                  r[u++];</span><br><span class="line">              (h = _), (l = v), (f = y), (d = g);</span><br><span class="line">            &#125;</span><br><span class="line">            (_ =</span><br><span class="line">              ((c[h &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">                (c[(l &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                (c[(f &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                c[<span class="number">255</span> &amp; d]) ^</span><br><span class="line">              r[u++]),</span><br><span class="line">              (v =</span><br><span class="line">                ((c[l &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">                  (c[(f &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                  (c[(d &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                  c[<span class="number">255</span> &amp; h]) ^</span><br><span class="line">                r[u++]),</span><br><span class="line">              (y =</span><br><span class="line">                ((c[f &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">                  (c[(d &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                  (c[(h &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                  c[<span class="number">255</span> &amp; l]) ^</span><br><span class="line">                r[u++]),</span><br><span class="line">              (g =</span><br><span class="line">                ((c[d &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">                  (c[(h &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                  (c[(l &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                  c[<span class="number">255</span> &amp; f]) ^</span><br><span class="line">                r[u++]);</span><br><span class="line">            (t[e] = _), (t[e + <span class="number">1</span>] = v), (t[e + <span class="number">2</span>] = y), (t[e + <span class="number">3</span>] = g);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">keySize</span>: <span class="number">8</span>,</span><br><span class="line">        &#125;));</span><br><span class="line">      t.AES = e._createHelper(i);</span><br><span class="line">    &#125;)(),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t = bt,</span><br><span class="line">        e = t.lib,</span><br><span class="line">        n = e.WordArray,</span><br><span class="line">        r = e.BlockCipher,</span><br><span class="line">        i = t.algo,</span><br><span class="line">        h = [</span><br><span class="line">          <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>,</span><br><span class="line">          <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>,</span><br><span class="line">          <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>,</span><br><span class="line">          <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">        ],</span><br><span class="line">        l = [</span><br><span class="line">          <span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>,</span><br><span class="line">          <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>,</span><br><span class="line">          <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>,</span><br><span class="line">        ],</span><br><span class="line">        f = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">        d = [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">8421888</span>,</span><br><span class="line">            <span class="number">268435456</span>: <span class="number">32768</span>,</span><br><span class="line">            <span class="number">536870912</span>: <span class="number">8421378</span>,</span><br><span class="line">            <span class="number">805306368</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="number">1073741824</span>: <span class="number">512</span>,</span><br><span class="line">            <span class="number">1342177280</span>: <span class="number">8421890</span>,</span><br><span class="line">            <span class="number">1610612736</span>: <span class="number">8389122</span>,</span><br><span class="line">            <span class="number">1879048192</span>: <span class="number">8388608</span>,</span><br><span class="line">            <span class="number">2147483648</span>: <span class="number">514</span>,</span><br><span class="line">            <span class="number">2415919104</span>: <span class="number">8389120</span>,</span><br><span class="line">            <span class="number">2684354560</span>: <span class="number">33280</span>,</span><br><span class="line">            <span class="number">2952790016</span>: <span class="number">8421376</span>,</span><br><span class="line">            <span class="number">3221225472</span>: <span class="number">32770</span>,</span><br><span class="line">            <span class="number">3489660928</span>: <span class="number">8388610</span>,</span><br><span class="line">            <span class="number">3758096384</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">4026531840</span>: <span class="number">33282</span>,</span><br><span class="line">            <span class="number">134217728</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">402653184</span>: <span class="number">8421890</span>,</span><br><span class="line">            <span class="number">671088640</span>: <span class="number">33282</span>,</span><br><span class="line">            <span class="number">939524096</span>: <span class="number">32768</span>,</span><br><span class="line">            <span class="number">1207959552</span>: <span class="number">8421888</span>,</span><br><span class="line">            <span class="number">1476395008</span>: <span class="number">512</span>,</span><br><span class="line">            <span class="number">1744830464</span>: <span class="number">8421378</span>,</span><br><span class="line">            <span class="number">2013265920</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="number">2281701376</span>: <span class="number">8389120</span>,</span><br><span class="line">            <span class="number">2550136832</span>: <span class="number">33280</span>,</span><br><span class="line">            <span class="number">2818572288</span>: <span class="number">8421376</span>,</span><br><span class="line">            <span class="number">3087007744</span>: <span class="number">8389122</span>,</span><br><span class="line">            <span class="number">3355443200</span>: <span class="number">8388610</span>,</span><br><span class="line">            <span class="number">3623878656</span>: <span class="number">32770</span>,</span><br><span class="line">            <span class="number">3892314112</span>: <span class="number">514</span>,</span><br><span class="line">            <span class="number">4160749568</span>: <span class="number">8388608</span>,</span><br><span class="line">            <span class="number">1</span>: <span class="number">32768</span>,</span><br><span class="line">            <span class="number">268435457</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="number">536870913</span>: <span class="number">8421888</span>,</span><br><span class="line">            <span class="number">805306369</span>: <span class="number">8388608</span>,</span><br><span class="line">            <span class="number">1073741825</span>: <span class="number">8421378</span>,</span><br><span class="line">            <span class="number">1342177281</span>: <span class="number">33280</span>,</span><br><span class="line">            <span class="number">1610612737</span>: <span class="number">512</span>,</span><br><span class="line">            <span class="number">1879048193</span>: <span class="number">8389122</span>,</span><br><span class="line">            <span class="number">2147483649</span>: <span class="number">8421890</span>,</span><br><span class="line">            <span class="number">2415919105</span>: <span class="number">8421376</span>,</span><br><span class="line">            <span class="number">2684354561</span>: <span class="number">8388610</span>,</span><br><span class="line">            <span class="number">2952790017</span>: <span class="number">33282</span>,</span><br><span class="line">            <span class="number">3221225473</span>: <span class="number">514</span>,</span><br><span class="line">            <span class="number">3489660929</span>: <span class="number">8389120</span>,</span><br><span class="line">            <span class="number">3758096385</span>: <span class="number">32770</span>,</span><br><span class="line">            <span class="number">4026531841</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">134217729</span>: <span class="number">8421890</span>,</span><br><span class="line">            <span class="number">402653185</span>: <span class="number">8421376</span>,</span><br><span class="line">            <span class="number">671088641</span>: <span class="number">8388608</span>,</span><br><span class="line">            <span class="number">939524097</span>: <span class="number">512</span>,</span><br><span class="line">            <span class="number">1207959553</span>: <span class="number">32768</span>,</span><br><span class="line">            <span class="number">1476395009</span>: <span class="number">8388610</span>,</span><br><span class="line">            <span class="number">1744830465</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="number">2013265921</span>: <span class="number">33282</span>,</span><br><span class="line">            <span class="number">2281701377</span>: <span class="number">32770</span>,</span><br><span class="line">            <span class="number">2550136833</span>: <span class="number">8389122</span>,</span><br><span class="line">            <span class="number">2818572289</span>: <span class="number">514</span>,</span><br><span class="line">            <span class="number">3087007745</span>: <span class="number">8421888</span>,</span><br><span class="line">            <span class="number">3355443201</span>: <span class="number">8389120</span>,</span><br><span class="line">            <span class="number">3623878657</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">3892314113</span>: <span class="number">33280</span>,</span><br><span class="line">            <span class="number">4160749569</span>: <span class="number">8421378</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">1074282512</span>,</span><br><span class="line">            <span class="number">16777216</span>: <span class="number">16384</span>,</span><br><span class="line">            <span class="number">33554432</span>: <span class="number">524288</span>,</span><br><span class="line">            <span class="number">50331648</span>: <span class="number">1074266128</span>,</span><br><span class="line">            <span class="number">67108864</span>: <span class="number">1073741840</span>,</span><br><span class="line">            <span class="number">83886080</span>: <span class="number">1074282496</span>,</span><br><span class="line">            <span class="number">100663296</span>: <span class="number">1073758208</span>,</span><br><span class="line">            <span class="number">117440512</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="number">134217728</span>: <span class="number">540672</span>,</span><br><span class="line">            <span class="number">150994944</span>: <span class="number">1073758224</span>,</span><br><span class="line">            <span class="number">167772160</span>: <span class="number">1073741824</span>,</span><br><span class="line">            <span class="number">184549376</span>: <span class="number">540688</span>,</span><br><span class="line">            <span class="number">201326592</span>: <span class="number">524304</span>,</span><br><span class="line">            <span class="number">218103808</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">234881024</span>: <span class="number">16400</span>,</span><br><span class="line">            <span class="number">251658240</span>: <span class="number">1074266112</span>,</span><br><span class="line">            <span class="number">8388608</span>: <span class="number">1073758208</span>,</span><br><span class="line">            <span class="number">25165824</span>: <span class="number">540688</span>,</span><br><span class="line">            <span class="number">41943040</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="number">58720256</span>: <span class="number">1073758224</span>,</span><br><span class="line">            <span class="number">75497472</span>: <span class="number">1074282512</span>,</span><br><span class="line">            <span class="number">92274688</span>: <span class="number">1073741824</span>,</span><br><span class="line">            <span class="number">109051904</span>: <span class="number">524288</span>,</span><br><span class="line">            <span class="number">125829120</span>: <span class="number">1074266128</span>,</span><br><span class="line">            <span class="number">142606336</span>: <span class="number">524304</span>,</span><br><span class="line">            <span class="number">159383552</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">176160768</span>: <span class="number">16384</span>,</span><br><span class="line">            <span class="number">192937984</span>: <span class="number">1074266112</span>,</span><br><span class="line">            <span class="number">209715200</span>: <span class="number">1073741840</span>,</span><br><span class="line">            <span class="number">226492416</span>: <span class="number">540672</span>,</span><br><span class="line">            <span class="number">243269632</span>: <span class="number">1074282496</span>,</span><br><span class="line">            <span class="number">260046848</span>: <span class="number">16400</span>,</span><br><span class="line">            <span class="number">268435456</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">285212672</span>: <span class="number">1074266128</span>,</span><br><span class="line">            <span class="number">301989888</span>: <span class="number">1073758224</span>,</span><br><span class="line">            <span class="number">318767104</span>: <span class="number">1074282496</span>,</span><br><span class="line">            <span class="number">335544320</span>: <span class="number">1074266112</span>,</span><br><span class="line">            <span class="number">352321536</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="number">369098752</span>: <span class="number">540688</span>,</span><br><span class="line">            <span class="number">385875968</span>: <span class="number">16384</span>,</span><br><span class="line">            <span class="number">402653184</span>: <span class="number">16400</span>,</span><br><span class="line">            <span class="number">419430400</span>: <span class="number">524288</span>,</span><br><span class="line">            <span class="number">436207616</span>: <span class="number">524304</span>,</span><br><span class="line">            <span class="number">452984832</span>: <span class="number">1073741840</span>,</span><br><span class="line">            <span class="number">469762048</span>: <span class="number">540672</span>,</span><br><span class="line">            <span class="number">486539264</span>: <span class="number">1073758208</span>,</span><br><span class="line">            <span class="number">503316480</span>: <span class="number">1073741824</span>,</span><br><span class="line">            <span class="number">520093696</span>: <span class="number">1074282512</span>,</span><br><span class="line">            <span class="number">276824064</span>: <span class="number">540688</span>,</span><br><span class="line">            <span class="number">293601280</span>: <span class="number">524288</span>,</span><br><span class="line">            <span class="number">310378496</span>: <span class="number">1074266112</span>,</span><br><span class="line">            <span class="number">327155712</span>: <span class="number">16384</span>,</span><br><span class="line">            <span class="number">343932928</span>: <span class="number">1073758208</span>,</span><br><span class="line">            <span class="number">360710144</span>: <span class="number">1074282512</span>,</span><br><span class="line">            <span class="number">377487360</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="number">394264576</span>: <span class="number">1073741824</span>,</span><br><span class="line">            <span class="number">411041792</span>: <span class="number">1074282496</span>,</span><br><span class="line">            <span class="number">427819008</span>: <span class="number">1073741840</span>,</span><br><span class="line">            <span class="number">444596224</span>: <span class="number">1073758224</span>,</span><br><span class="line">            <span class="number">461373440</span>: <span class="number">524304</span>,</span><br><span class="line">            <span class="number">478150656</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">494927872</span>: <span class="number">16400</span>,</span><br><span class="line">            <span class="number">511705088</span>: <span class="number">1074266128</span>,</span><br><span class="line">            <span class="number">528482304</span>: <span class="number">540672</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="number">1048576</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">2097152</span>: <span class="number">67109120</span>,</span><br><span class="line">            <span class="number">3145728</span>: <span class="number">65796</span>,</span><br><span class="line">            <span class="number">4194304</span>: <span class="number">65540</span>,</span><br><span class="line">            <span class="number">5242880</span>: <span class="number">67108868</span>,</span><br><span class="line">            <span class="number">6291456</span>: <span class="number">67174660</span>,</span><br><span class="line">            <span class="number">7340032</span>: <span class="number">67174400</span>,</span><br><span class="line">            <span class="number">8388608</span>: <span class="number">67108864</span>,</span><br><span class="line">            <span class="number">9437184</span>: <span class="number">67174656</span>,</span><br><span class="line">            <span class="number">10485760</span>: <span class="number">65792</span>,</span><br><span class="line">            <span class="number">11534336</span>: <span class="number">67174404</span>,</span><br><span class="line">            <span class="number">12582912</span>: <span class="number">67109124</span>,</span><br><span class="line">            <span class="number">13631488</span>: <span class="number">65536</span>,</span><br><span class="line">            <span class="number">14680064</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="number">15728640</span>: <span class="number">256</span>,</span><br><span class="line">            <span class="number">524288</span>: <span class="number">67174656</span>,</span><br><span class="line">            <span class="number">1572864</span>: <span class="number">67174404</span>,</span><br><span class="line">            <span class="number">2621440</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">3670016</span>: <span class="number">67109120</span>,</span><br><span class="line">            <span class="number">4718592</span>: <span class="number">67108868</span>,</span><br><span class="line">            <span class="number">5767168</span>: <span class="number">65536</span>,</span><br><span class="line">            <span class="number">6815744</span>: <span class="number">65540</span>,</span><br><span class="line">            <span class="number">7864320</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="number">8912896</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="number">9961472</span>: <span class="number">256</span>,</span><br><span class="line">            <span class="number">11010048</span>: <span class="number">67174400</span>,</span><br><span class="line">            <span class="number">12058624</span>: <span class="number">65796</span>,</span><br><span class="line">            <span class="number">13107200</span>: <span class="number">65792</span>,</span><br><span class="line">            <span class="number">14155776</span>: <span class="number">67109124</span>,</span><br><span class="line">            <span class="number">15204352</span>: <span class="number">67174660</span>,</span><br><span class="line">            <span class="number">16252928</span>: <span class="number">67108864</span>,</span><br><span class="line">            <span class="number">16777216</span>: <span class="number">67174656</span>,</span><br><span class="line">            <span class="number">17825792</span>: <span class="number">65540</span>,</span><br><span class="line">            <span class="number">18874368</span>: <span class="number">65536</span>,</span><br><span class="line">            <span class="number">19922944</span>: <span class="number">67109120</span>,</span><br><span class="line">            <span class="number">20971520</span>: <span class="number">256</span>,</span><br><span class="line">            <span class="number">22020096</span>: <span class="number">67174660</span>,</span><br><span class="line">            <span class="number">23068672</span>: <span class="number">67108868</span>,</span><br><span class="line">            <span class="number">24117248</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">25165824</span>: <span class="number">67109124</span>,</span><br><span class="line">            <span class="number">26214400</span>: <span class="number">67108864</span>,</span><br><span class="line">            <span class="number">27262976</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="number">28311552</span>: <span class="number">65792</span>,</span><br><span class="line">            <span class="number">29360128</span>: <span class="number">67174400</span>,</span><br><span class="line">            <span class="number">30408704</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="number">31457280</span>: <span class="number">65796</span>,</span><br><span class="line">            <span class="number">32505856</span>: <span class="number">67174404</span>,</span><br><span class="line">            <span class="number">17301504</span>: <span class="number">67108864</span>,</span><br><span class="line">            <span class="number">18350080</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="number">19398656</span>: <span class="number">67174656</span>,</span><br><span class="line">            <span class="number">20447232</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">21495808</span>: <span class="number">65540</span>,</span><br><span class="line">            <span class="number">22544384</span>: <span class="number">67109120</span>,</span><br><span class="line">            <span class="number">23592960</span>: <span class="number">256</span>,</span><br><span class="line">            <span class="number">24641536</span>: <span class="number">67174404</span>,</span><br><span class="line">            <span class="number">25690112</span>: <span class="number">65536</span>,</span><br><span class="line">            <span class="number">26738688</span>: <span class="number">67174660</span>,</span><br><span class="line">            <span class="number">27787264</span>: <span class="number">65796</span>,</span><br><span class="line">            <span class="number">28835840</span>: <span class="number">67108868</span>,</span><br><span class="line">            <span class="number">29884416</span>: <span class="number">67109124</span>,</span><br><span class="line">            <span class="number">30932992</span>: <span class="number">67174400</span>,</span><br><span class="line">            <span class="number">31981568</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="number">33030144</span>: <span class="number">65792</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">2151682048</span>,</span><br><span class="line">            <span class="number">65536</span>: <span class="number">2147487808</span>,</span><br><span class="line">            <span class="number">131072</span>: <span class="number">4198464</span>,</span><br><span class="line">            <span class="number">196608</span>: <span class="number">2151677952</span>,</span><br><span class="line">            <span class="number">262144</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">327680</span>: <span class="number">4198400</span>,</span><br><span class="line">            <span class="number">393216</span>: <span class="number">2147483712</span>,</span><br><span class="line">            <span class="number">458752</span>: <span class="number">4194368</span>,</span><br><span class="line">            <span class="number">524288</span>: <span class="number">2147483648</span>,</span><br><span class="line">            <span class="number">589824</span>: <span class="number">4194304</span>,</span><br><span class="line">            <span class="number">655360</span>: <span class="number">64</span>,</span><br><span class="line">            <span class="number">720896</span>: <span class="number">2147487744</span>,</span><br><span class="line">            <span class="number">786432</span>: <span class="number">2151678016</span>,</span><br><span class="line">            <span class="number">851968</span>: <span class="number">4160</span>,</span><br><span class="line">            <span class="number">917504</span>: <span class="number">4096</span>,</span><br><span class="line">            <span class="number">983040</span>: <span class="number">2151682112</span>,</span><br><span class="line">            <span class="number">32768</span>: <span class="number">2147487808</span>,</span><br><span class="line">            <span class="number">98304</span>: <span class="number">64</span>,</span><br><span class="line">            <span class="number">163840</span>: <span class="number">2151678016</span>,</span><br><span class="line">            <span class="number">229376</span>: <span class="number">2147487744</span>,</span><br><span class="line">            <span class="number">294912</span>: <span class="number">4198400</span>,</span><br><span class="line">            <span class="number">360448</span>: <span class="number">2151682112</span>,</span><br><span class="line">            <span class="number">425984</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">491520</span>: <span class="number">2151677952</span>,</span><br><span class="line">            <span class="number">557056</span>: <span class="number">4096</span>,</span><br><span class="line">            <span class="number">622592</span>: <span class="number">2151682048</span>,</span><br><span class="line">            <span class="number">688128</span>: <span class="number">4194304</span>,</span><br><span class="line">            <span class="number">753664</span>: <span class="number">4160</span>,</span><br><span class="line">            <span class="number">819200</span>: <span class="number">2147483648</span>,</span><br><span class="line">            <span class="number">884736</span>: <span class="number">4194368</span>,</span><br><span class="line">            <span class="number">950272</span>: <span class="number">4198464</span>,</span><br><span class="line">            <span class="number">1015808</span>: <span class="number">2147483712</span>,</span><br><span class="line">            <span class="number">1048576</span>: <span class="number">4194368</span>,</span><br><span class="line">            <span class="number">1114112</span>: <span class="number">4198400</span>,</span><br><span class="line">            <span class="number">1179648</span>: <span class="number">2147483712</span>,</span><br><span class="line">            <span class="number">1245184</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">1310720</span>: <span class="number">4160</span>,</span><br><span class="line">            <span class="number">1376256</span>: <span class="number">2151678016</span>,</span><br><span class="line">            <span class="number">1441792</span>: <span class="number">2151682048</span>,</span><br><span class="line">            <span class="number">1507328</span>: <span class="number">2147487808</span>,</span><br><span class="line">            <span class="number">1572864</span>: <span class="number">2151682112</span>,</span><br><span class="line">            <span class="number">1638400</span>: <span class="number">2147483648</span>,</span><br><span class="line">            <span class="number">1703936</span>: <span class="number">2151677952</span>,</span><br><span class="line">            <span class="number">1769472</span>: <span class="number">4198464</span>,</span><br><span class="line">            <span class="number">1835008</span>: <span class="number">2147487744</span>,</span><br><span class="line">            <span class="number">1900544</span>: <span class="number">4194304</span>,</span><br><span class="line">            <span class="number">1966080</span>: <span class="number">64</span>,</span><br><span class="line">            <span class="number">2031616</span>: <span class="number">4096</span>,</span><br><span class="line">            <span class="number">1081344</span>: <span class="number">2151677952</span>,</span><br><span class="line">            <span class="number">1146880</span>: <span class="number">2151682112</span>,</span><br><span class="line">            <span class="number">1212416</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">1277952</span>: <span class="number">4198400</span>,</span><br><span class="line">            <span class="number">1343488</span>: <span class="number">4194368</span>,</span><br><span class="line">            <span class="number">1409024</span>: <span class="number">2147483648</span>,</span><br><span class="line">            <span class="number">1474560</span>: <span class="number">2147487808</span>,</span><br><span class="line">            <span class="number">1540096</span>: <span class="number">64</span>,</span><br><span class="line">            <span class="number">1605632</span>: <span class="number">2147483712</span>,</span><br><span class="line">            <span class="number">1671168</span>: <span class="number">4096</span>,</span><br><span class="line">            <span class="number">1736704</span>: <span class="number">2147487744</span>,</span><br><span class="line">            <span class="number">1802240</span>: <span class="number">2151678016</span>,</span><br><span class="line">            <span class="number">1867776</span>: <span class="number">4160</span>,</span><br><span class="line">            <span class="number">1933312</span>: <span class="number">2151682048</span>,</span><br><span class="line">            <span class="number">1998848</span>: <span class="number">4194304</span>,</span><br><span class="line">            <span class="number">2064384</span>: <span class="number">4198464</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">128</span>,</span><br><span class="line">            <span class="number">4096</span>: <span class="number">17039360</span>,</span><br><span class="line">            <span class="number">8192</span>: <span class="number">262144</span>,</span><br><span class="line">            <span class="number">12288</span>: <span class="number">536870912</span>,</span><br><span class="line">            <span class="number">16384</span>: <span class="number">537133184</span>,</span><br><span class="line">            <span class="number">20480</span>: <span class="number">16777344</span>,</span><br><span class="line">            <span class="number">24576</span>: <span class="number">553648256</span>,</span><br><span class="line">            <span class="number">28672</span>: <span class="number">262272</span>,</span><br><span class="line">            <span class="number">32768</span>: <span class="number">16777216</span>,</span><br><span class="line">            <span class="number">36864</span>: <span class="number">537133056</span>,</span><br><span class="line">            <span class="number">40960</span>: <span class="number">536871040</span>,</span><br><span class="line">            <span class="number">45056</span>: <span class="number">553910400</span>,</span><br><span class="line">            <span class="number">49152</span>: <span class="number">553910272</span>,</span><br><span class="line">            <span class="number">53248</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">57344</span>: <span class="number">17039488</span>,</span><br><span class="line">            <span class="number">61440</span>: <span class="number">553648128</span>,</span><br><span class="line">            <span class="number">2048</span>: <span class="number">17039488</span>,</span><br><span class="line">            <span class="number">6144</span>: <span class="number">553648256</span>,</span><br><span class="line">            <span class="number">10240</span>: <span class="number">128</span>,</span><br><span class="line">            <span class="number">14336</span>: <span class="number">17039360</span>,</span><br><span class="line">            <span class="number">18432</span>: <span class="number">262144</span>,</span><br><span class="line">            <span class="number">22528</span>: <span class="number">537133184</span>,</span><br><span class="line">            <span class="number">26624</span>: <span class="number">553910272</span>,</span><br><span class="line">            <span class="number">30720</span>: <span class="number">536870912</span>,</span><br><span class="line">            <span class="number">34816</span>: <span class="number">537133056</span>,</span><br><span class="line">            <span class="number">38912</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">43008</span>: <span class="number">553910400</span>,</span><br><span class="line">            <span class="number">47104</span>: <span class="number">16777344</span>,</span><br><span class="line">            <span class="number">51200</span>: <span class="number">536871040</span>,</span><br><span class="line">            <span class="number">55296</span>: <span class="number">553648128</span>,</span><br><span class="line">            <span class="number">59392</span>: <span class="number">16777216</span>,</span><br><span class="line">            <span class="number">63488</span>: <span class="number">262272</span>,</span><br><span class="line">            <span class="number">65536</span>: <span class="number">262144</span>,</span><br><span class="line">            <span class="number">69632</span>: <span class="number">128</span>,</span><br><span class="line">            <span class="number">73728</span>: <span class="number">536870912</span>,</span><br><span class="line">            <span class="number">77824</span>: <span class="number">553648256</span>,</span><br><span class="line">            <span class="number">81920</span>: <span class="number">16777344</span>,</span><br><span class="line">            <span class="number">86016</span>: <span class="number">553910272</span>,</span><br><span class="line">            <span class="number">90112</span>: <span class="number">537133184</span>,</span><br><span class="line">            <span class="number">94208</span>: <span class="number">16777216</span>,</span><br><span class="line">            <span class="number">98304</span>: <span class="number">553910400</span>,</span><br><span class="line">            <span class="number">102400</span>: <span class="number">553648128</span>,</span><br><span class="line">            <span class="number">106496</span>: <span class="number">17039360</span>,</span><br><span class="line">            <span class="number">110592</span>: <span class="number">537133056</span>,</span><br><span class="line">            <span class="number">114688</span>: <span class="number">262272</span>,</span><br><span class="line">            <span class="number">118784</span>: <span class="number">536871040</span>,</span><br><span class="line">            <span class="number">122880</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">126976</span>: <span class="number">17039488</span>,</span><br><span class="line">            <span class="number">67584</span>: <span class="number">553648256</span>,</span><br><span class="line">            <span class="number">71680</span>: <span class="number">16777216</span>,</span><br><span class="line">            <span class="number">75776</span>: <span class="number">17039360</span>,</span><br><span class="line">            <span class="number">79872</span>: <span class="number">537133184</span>,</span><br><span class="line">            <span class="number">83968</span>: <span class="number">536870912</span>,</span><br><span class="line">            <span class="number">88064</span>: <span class="number">17039488</span>,</span><br><span class="line">            <span class="number">92160</span>: <span class="number">128</span>,</span><br><span class="line">            <span class="number">96256</span>: <span class="number">553910272</span>,</span><br><span class="line">            <span class="number">100352</span>: <span class="number">262272</span>,</span><br><span class="line">            <span class="number">104448</span>: <span class="number">553910400</span>,</span><br><span class="line">            <span class="number">108544</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">112640</span>: <span class="number">553648128</span>,</span><br><span class="line">            <span class="number">116736</span>: <span class="number">16777344</span>,</span><br><span class="line">            <span class="number">120832</span>: <span class="number">262144</span>,</span><br><span class="line">            <span class="number">124928</span>: <span class="number">537133056</span>,</span><br><span class="line">            <span class="number">129024</span>: <span class="number">536871040</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">268435464</span>,</span><br><span class="line">            <span class="number">256</span>: <span class="number">8192</span>,</span><br><span class="line">            <span class="number">512</span>: <span class="number">270532608</span>,</span><br><span class="line">            <span class="number">768</span>: <span class="number">270540808</span>,</span><br><span class="line">            <span class="number">1024</span>: <span class="number">268443648</span>,</span><br><span class="line">            <span class="number">1280</span>: <span class="number">2097152</span>,</span><br><span class="line">            <span class="number">1536</span>: <span class="number">2097160</span>,</span><br><span class="line">            <span class="number">1792</span>: <span class="number">268435456</span>,</span><br><span class="line">            <span class="number">2048</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">2304</span>: <span class="number">268443656</span>,</span><br><span class="line">            <span class="number">2560</span>: <span class="number">2105344</span>,</span><br><span class="line">            <span class="number">2816</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="number">3072</span>: <span class="number">270532616</span>,</span><br><span class="line">            <span class="number">3328</span>: <span class="number">2105352</span>,</span><br><span class="line">            <span class="number">3584</span>: <span class="number">8200</span>,</span><br><span class="line">            <span class="number">3840</span>: <span class="number">270540800</span>,</span><br><span class="line">            <span class="number">128</span>: <span class="number">270532608</span>,</span><br><span class="line">            <span class="number">384</span>: <span class="number">270540808</span>,</span><br><span class="line">            <span class="number">640</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="number">896</span>: <span class="number">2097152</span>,</span><br><span class="line">            <span class="number">1152</span>: <span class="number">2105352</span>,</span><br><span class="line">            <span class="number">1408</span>: <span class="number">268435464</span>,</span><br><span class="line">            <span class="number">1664</span>: <span class="number">268443648</span>,</span><br><span class="line">            <span class="number">1920</span>: <span class="number">8200</span>,</span><br><span class="line">            <span class="number">2176</span>: <span class="number">2097160</span>,</span><br><span class="line">            <span class="number">2432</span>: <span class="number">8192</span>,</span><br><span class="line">            <span class="number">2688</span>: <span class="number">268443656</span>,</span><br><span class="line">            <span class="number">2944</span>: <span class="number">270532616</span>,</span><br><span class="line">            <span class="number">3200</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">3456</span>: <span class="number">270540800</span>,</span><br><span class="line">            <span class="number">3712</span>: <span class="number">2105344</span>,</span><br><span class="line">            <span class="number">3968</span>: <span class="number">268435456</span>,</span><br><span class="line">            <span class="number">4096</span>: <span class="number">268443648</span>,</span><br><span class="line">            <span class="number">4352</span>: <span class="number">270532616</span>,</span><br><span class="line">            <span class="number">4608</span>: <span class="number">270540808</span>,</span><br><span class="line">            <span class="number">4864</span>: <span class="number">8200</span>,</span><br><span class="line">            <span class="number">5120</span>: <span class="number">2097152</span>,</span><br><span class="line">            <span class="number">5376</span>: <span class="number">268435456</span>,</span><br><span class="line">            <span class="number">5632</span>: <span class="number">268435464</span>,</span><br><span class="line">            <span class="number">5888</span>: <span class="number">2105344</span>,</span><br><span class="line">            <span class="number">6144</span>: <span class="number">2105352</span>,</span><br><span class="line">            <span class="number">6400</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">6656</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="number">6912</span>: <span class="number">270532608</span>,</span><br><span class="line">            <span class="number">7168</span>: <span class="number">8192</span>,</span><br><span class="line">            <span class="number">7424</span>: <span class="number">268443656</span>,</span><br><span class="line">            <span class="number">7680</span>: <span class="number">270540800</span>,</span><br><span class="line">            <span class="number">7936</span>: <span class="number">2097160</span>,</span><br><span class="line">            <span class="number">4224</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="number">4480</span>: <span class="number">2105344</span>,</span><br><span class="line">            <span class="number">4736</span>: <span class="number">2097152</span>,</span><br><span class="line">            <span class="number">4992</span>: <span class="number">268435464</span>,</span><br><span class="line">            <span class="number">5248</span>: <span class="number">268443648</span>,</span><br><span class="line">            <span class="number">5504</span>: <span class="number">8200</span>,</span><br><span class="line">            <span class="number">5760</span>: <span class="number">270540808</span>,</span><br><span class="line">            <span class="number">6016</span>: <span class="number">270532608</span>,</span><br><span class="line">            <span class="number">6272</span>: <span class="number">270540800</span>,</span><br><span class="line">            <span class="number">6528</span>: <span class="number">270532616</span>,</span><br><span class="line">            <span class="number">6784</span>: <span class="number">8192</span>,</span><br><span class="line">            <span class="number">7040</span>: <span class="number">2105352</span>,</span><br><span class="line">            <span class="number">7296</span>: <span class="number">2097160</span>,</span><br><span class="line">            <span class="number">7552</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">7808</span>: <span class="number">268435456</span>,</span><br><span class="line">            <span class="number">8064</span>: <span class="number">268443656</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">1048576</span>,</span><br><span class="line">            <span class="number">16</span>: <span class="number">33555457</span>,</span><br><span class="line">            <span class="number">32</span>: <span class="number">1024</span>,</span><br><span class="line">            <span class="number">48</span>: <span class="number">1049601</span>,</span><br><span class="line">            <span class="number">64</span>: <span class="number">34604033</span>,</span><br><span class="line">            <span class="number">80</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">96</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="number">112</span>: <span class="number">34603009</span>,</span><br><span class="line">            <span class="number">128</span>: <span class="number">33555456</span>,</span><br><span class="line">            <span class="number">144</span>: <span class="number">1048577</span>,</span><br><span class="line">            <span class="number">160</span>: <span class="number">33554433</span>,</span><br><span class="line">            <span class="number">176</span>: <span class="number">34604032</span>,</span><br><span class="line">            <span class="number">192</span>: <span class="number">34603008</span>,</span><br><span class="line">            <span class="number">208</span>: <span class="number">1025</span>,</span><br><span class="line">            <span class="number">224</span>: <span class="number">1049600</span>,</span><br><span class="line">            <span class="number">240</span>: <span class="number">33554432</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="number">34603009</span>,</span><br><span class="line">            <span class="number">24</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">40</span>: <span class="number">33555457</span>,</span><br><span class="line">            <span class="number">56</span>: <span class="number">34604032</span>,</span><br><span class="line">            <span class="number">72</span>: <span class="number">1048576</span>,</span><br><span class="line">            <span class="number">88</span>: <span class="number">33554433</span>,</span><br><span class="line">            <span class="number">104</span>: <span class="number">33554432</span>,</span><br><span class="line">            <span class="number">120</span>: <span class="number">1025</span>,</span><br><span class="line">            <span class="number">136</span>: <span class="number">1049601</span>,</span><br><span class="line">            <span class="number">152</span>: <span class="number">33555456</span>,</span><br><span class="line">            <span class="number">168</span>: <span class="number">34603008</span>,</span><br><span class="line">            <span class="number">184</span>: <span class="number">1048577</span>,</span><br><span class="line">            <span class="number">200</span>: <span class="number">1024</span>,</span><br><span class="line">            <span class="number">216</span>: <span class="number">34604033</span>,</span><br><span class="line">            <span class="number">232</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="number">248</span>: <span class="number">1049600</span>,</span><br><span class="line">            <span class="number">256</span>: <span class="number">33554432</span>,</span><br><span class="line">            <span class="number">272</span>: <span class="number">1048576</span>,</span><br><span class="line">            <span class="number">288</span>: <span class="number">33555457</span>,</span><br><span class="line">            <span class="number">304</span>: <span class="number">34603009</span>,</span><br><span class="line">            <span class="number">320</span>: <span class="number">1048577</span>,</span><br><span class="line">            <span class="number">336</span>: <span class="number">33555456</span>,</span><br><span class="line">            <span class="number">352</span>: <span class="number">34604032</span>,</span><br><span class="line">            <span class="number">368</span>: <span class="number">1049601</span>,</span><br><span class="line">            <span class="number">384</span>: <span class="number">1025</span>,</span><br><span class="line">            <span class="number">400</span>: <span class="number">34604033</span>,</span><br><span class="line">            <span class="number">416</span>: <span class="number">1049600</span>,</span><br><span class="line">            <span class="number">432</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="number">448</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">464</span>: <span class="number">34603008</span>,</span><br><span class="line">            <span class="number">480</span>: <span class="number">33554433</span>,</span><br><span class="line">            <span class="number">496</span>: <span class="number">1024</span>,</span><br><span class="line">            <span class="number">264</span>: <span class="number">1049600</span>,</span><br><span class="line">            <span class="number">280</span>: <span class="number">33555457</span>,</span><br><span class="line">            <span class="number">296</span>: <span class="number">34603009</span>,</span><br><span class="line">            <span class="number">312</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="number">328</span>: <span class="number">33554432</span>,</span><br><span class="line">            <span class="number">344</span>: <span class="number">1048576</span>,</span><br><span class="line">            <span class="number">360</span>: <span class="number">1025</span>,</span><br><span class="line">            <span class="number">376</span>: <span class="number">34604032</span>,</span><br><span class="line">            <span class="number">392</span>: <span class="number">33554433</span>,</span><br><span class="line">            <span class="number">408</span>: <span class="number">34603008</span>,</span><br><span class="line">            <span class="number">424</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">440</span>: <span class="number">34604033</span>,</span><br><span class="line">            <span class="number">456</span>: <span class="number">1049601</span>,</span><br><span class="line">            <span class="number">472</span>: <span class="number">1024</span>,</span><br><span class="line">            <span class="number">488</span>: <span class="number">33555456</span>,</span><br><span class="line">            <span class="number">504</span>: <span class="number">1048577</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">134219808</span>,</span><br><span class="line">            <span class="number">1</span>: <span class="number">131072</span>,</span><br><span class="line">            <span class="number">2</span>: <span class="number">134217728</span>,</span><br><span class="line">            <span class="number">3</span>: <span class="number">32</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="number">131104</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="number">134350880</span>,</span><br><span class="line">            <span class="number">6</span>: <span class="number">134350848</span>,</span><br><span class="line">            <span class="number">7</span>: <span class="number">2048</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="number">134348800</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="number">134219776</span>,</span><br><span class="line">            <span class="number">10</span>: <span class="number">133120</span>,</span><br><span class="line">            <span class="number">11</span>: <span class="number">134348832</span>,</span><br><span class="line">            <span class="number">12</span>: <span class="number">2080</span>,</span><br><span class="line">            <span class="number">13</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">14</span>: <span class="number">134217760</span>,</span><br><span class="line">            <span class="number">15</span>: <span class="number">133152</span>,</span><br><span class="line">            <span class="number">2147483648</span>: <span class="number">2048</span>,</span><br><span class="line">            <span class="number">2147483649</span>: <span class="number">134350880</span>,</span><br><span class="line">            <span class="number">2147483650</span>: <span class="number">134219808</span>,</span><br><span class="line">            <span class="number">2147483651</span>: <span class="number">134217728</span>,</span><br><span class="line">            <span class="number">2147483652</span>: <span class="number">134348800</span>,</span><br><span class="line">            <span class="number">2147483653</span>: <span class="number">133120</span>,</span><br><span class="line">            <span class="number">2147483654</span>: <span class="number">133152</span>,</span><br><span class="line">            <span class="number">2147483655</span>: <span class="number">32</span>,</span><br><span class="line">            <span class="number">2147483656</span>: <span class="number">134217760</span>,</span><br><span class="line">            <span class="number">2147483657</span>: <span class="number">2080</span>,</span><br><span class="line">            <span class="number">2147483658</span>: <span class="number">131104</span>,</span><br><span class="line">            <span class="number">2147483659</span>: <span class="number">134350848</span>,</span><br><span class="line">            <span class="number">2147483660</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">2147483661</span>: <span class="number">134348832</span>,</span><br><span class="line">            <span class="number">2147483662</span>: <span class="number">134219776</span>,</span><br><span class="line">            <span class="number">2147483663</span>: <span class="number">131072</span>,</span><br><span class="line">            <span class="number">16</span>: <span class="number">133152</span>,</span><br><span class="line">            <span class="number">17</span>: <span class="number">134350848</span>,</span><br><span class="line">            <span class="number">18</span>: <span class="number">32</span>,</span><br><span class="line">            <span class="number">19</span>: <span class="number">2048</span>,</span><br><span class="line">            <span class="number">20</span>: <span class="number">134219776</span>,</span><br><span class="line">            <span class="number">21</span>: <span class="number">134217760</span>,</span><br><span class="line">            <span class="number">22</span>: <span class="number">134348832</span>,</span><br><span class="line">            <span class="number">23</span>: <span class="number">131072</span>,</span><br><span class="line">            <span class="number">24</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">25</span>: <span class="number">131104</span>,</span><br><span class="line">            <span class="number">26</span>: <span class="number">134348800</span>,</span><br><span class="line">            <span class="number">27</span>: <span class="number">134219808</span>,</span><br><span class="line">            <span class="number">28</span>: <span class="number">134350880</span>,</span><br><span class="line">            <span class="number">29</span>: <span class="number">133120</span>,</span><br><span class="line">            <span class="number">30</span>: <span class="number">2080</span>,</span><br><span class="line">            <span class="number">31</span>: <span class="number">134217728</span>,</span><br><span class="line">            <span class="number">2147483664</span>: <span class="number">131072</span>,</span><br><span class="line">            <span class="number">2147483665</span>: <span class="number">2048</span>,</span><br><span class="line">            <span class="number">2147483666</span>: <span class="number">134348832</span>,</span><br><span class="line">            <span class="number">2147483667</span>: <span class="number">133152</span>,</span><br><span class="line">            <span class="number">2147483668</span>: <span class="number">32</span>,</span><br><span class="line">            <span class="number">2147483669</span>: <span class="number">134348800</span>,</span><br><span class="line">            <span class="number">2147483670</span>: <span class="number">134217728</span>,</span><br><span class="line">            <span class="number">2147483671</span>: <span class="number">134219808</span>,</span><br><span class="line">            <span class="number">2147483672</span>: <span class="number">134350880</span>,</span><br><span class="line">            <span class="number">2147483673</span>: <span class="number">134217760</span>,</span><br><span class="line">            <span class="number">2147483674</span>: <span class="number">134219776</span>,</span><br><span class="line">            <span class="number">2147483675</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="number">2147483676</span>: <span class="number">133120</span>,</span><br><span class="line">            <span class="number">2147483677</span>: <span class="number">2080</span>,</span><br><span class="line">            <span class="number">2147483678</span>: <span class="number">131104</span>,</span><br><span class="line">            <span class="number">2147483679</span>: <span class="number">134350848</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        u = [</span><br><span class="line">          <span class="number">4160749569</span>, <span class="number">528482304</span>, <span class="number">33030144</span>, <span class="number">2064384</span>, <span class="number">129024</span>, <span class="number">8064</span>, <span class="number">504</span>,</span><br><span class="line">          <span class="number">2147483679</span>,</span><br><span class="line">        ],</span><br><span class="line">        o = (i.DES = r.extend(&#123;</span><br><span class="line">          <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">this</span>._key.words, e = [], r = <span class="number">0</span>; r &lt; <span class="number">56</span>; r++) &#123;</span><br><span class="line">              <span class="keyword">var</span> i = h[r] - <span class="number">1</span>;</span><br><span class="line">              e[r] = (t[i &gt;&gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (<span class="number">31</span> - (i % <span class="number">32</span>))) &amp; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> n = (<span class="built_in">this</span>._subKeys = []), o = <span class="number">0</span>; o &lt; <span class="number">16</span>; o++) &#123;</span><br><span class="line">              <span class="keyword">var</span> s = (n[o] = []),</span><br><span class="line">                c = f[o];</span><br><span class="line">              <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">24</span>; r++)</span><br><span class="line">                (s[(r / <span class="number">6</span>) | <span class="number">0</span>] |= e[(l[r] - <span class="number">1</span> + c) % <span class="number">28</span>] &lt;&lt; (<span class="number">31</span> - (r % <span class="number">6</span>))),</span><br><span class="line">                  (s[<span class="number">4</span> + ((r / <span class="number">6</span>) | <span class="number">0</span>)] |=</span><br><span class="line">                    e[<span class="number">28</span> + ((l[r + <span class="number">24</span>] - <span class="number">1</span> + c) % <span class="number">28</span>)] &lt;&lt; (<span class="number">31</span> - (r % <span class="number">6</span>)));</span><br><span class="line">              s[<span class="number">0</span>] = (s[<span class="number">0</span>] &lt;&lt; <span class="number">1</span>) | (s[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">31</span>);</span><br><span class="line">              <span class="keyword">for</span> (r = <span class="number">1</span>; r &lt; <span class="number">7</span>; r++) s[r] = s[r] &gt;&gt;&gt; (<span class="number">4</span> * (r - <span class="number">1</span>) + <span class="number">3</span>);</span><br><span class="line">              s[<span class="number">7</span>] = (s[<span class="number">7</span>] &lt;&lt; <span class="number">5</span>) | (s[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">27</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> a = (<span class="built_in">this</span>._invSubKeys = []);</span><br><span class="line">            <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">16</span>; r++) a[r] = n[<span class="number">15</span> - r];</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">encryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._doCryptBlock(t, e, <span class="built_in">this</span>._subKeys);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">decryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._doCryptBlock(t, e, <span class="built_in">this</span>._invSubKeys);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">_doCryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, r</span>) </span>&#123;</span><br><span class="line">            (<span class="built_in">this</span>._lBlock = t[e]),</span><br><span class="line">              (<span class="built_in">this</span>._rBlock = t[e + <span class="number">1</span>]),</span><br><span class="line">              p.call(<span class="built_in">this</span>, <span class="number">4</span>, <span class="number">252645135</span>),</span><br><span class="line">              p.call(<span class="built_in">this</span>, <span class="number">16</span>, <span class="number">65535</span>),</span><br><span class="line">              _.call(<span class="built_in">this</span>, <span class="number">2</span>, <span class="number">858993459</span>),</span><br><span class="line">              _.call(<span class="built_in">this</span>, <span class="number">8</span>, <span class="number">16711935</span>),</span><br><span class="line">              p.call(<span class="built_in">this</span>, <span class="number">1</span>, <span class="number">1431655765</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">              <span class="keyword">for</span> (</span><br><span class="line">                <span class="keyword">var</span> n = r[i], o = <span class="built_in">this</span>._lBlock, s = <span class="built_in">this</span>._rBlock, c = <span class="number">0</span>, a = <span class="number">0</span>;</span><br><span class="line">                a &lt; <span class="number">8</span>;</span><br><span class="line">                a++</span><br><span class="line">              )</span><br><span class="line">                c |= d[a][((s ^ n[a]) &amp; u[a]) &gt;&gt;&gt; <span class="number">0</span>];</span><br><span class="line">              (<span class="built_in">this</span>._lBlock = s), (<span class="built_in">this</span>._rBlock = o ^ c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> h = <span class="built_in">this</span>._lBlock;</span><br><span class="line">            (<span class="built_in">this</span>._lBlock = <span class="built_in">this</span>._rBlock),</span><br><span class="line">              (<span class="built_in">this</span>._rBlock = h),</span><br><span class="line">              p.call(<span class="built_in">this</span>, <span class="number">1</span>, <span class="number">1431655765</span>),</span><br><span class="line">              _.call(<span class="built_in">this</span>, <span class="number">8</span>, <span class="number">16711935</span>),</span><br><span class="line">              _.call(<span class="built_in">this</span>, <span class="number">2</span>, <span class="number">858993459</span>),</span><br><span class="line">              p.call(<span class="built_in">this</span>, <span class="number">16</span>, <span class="number">65535</span>),</span><br><span class="line">              p.call(<span class="built_in">this</span>, <span class="number">4</span>, <span class="number">252645135</span>),</span><br><span class="line">              (t[e] = <span class="built_in">this</span>._lBlock),</span><br><span class="line">              (t[e + <span class="number">1</span>] = <span class="built_in">this</span>._rBlock);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">keySize</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">ivSize</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">blockSize</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;));</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = ((<span class="built_in">this</span>._lBlock &gt;&gt;&gt; t) ^ <span class="built_in">this</span>._rBlock) &amp; e;</span><br><span class="line">        (<span class="built_in">this</span>._rBlock ^= r), (<span class="built_in">this</span>._lBlock ^= r &lt;&lt; t);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">_</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = ((<span class="built_in">this</span>._rBlock &gt;&gt;&gt; t) ^ <span class="built_in">this</span>._lBlock) &amp; e;</span><br><span class="line">        (<span class="built_in">this</span>._lBlock ^= r), (<span class="built_in">this</span>._rBlock ^= r &lt;&lt; t);</span><br><span class="line">      &#125;</span><br><span class="line">      t.DES = r._createHelper(o);</span><br><span class="line">      <span class="keyword">var</span> s = (i.TripleDES = r.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> t = <span class="built_in">this</span>._key.words;</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">2</span> !== t.length &amp;&amp; <span class="number">4</span> !== t.length &amp;&amp; t.length &lt; <span class="number">6</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">              <span class="string">&quot;Invalid key length - 3DES requires the key length to be 64, 128, 192 or &gt;192.&quot;</span></span><br><span class="line">            );</span><br><span class="line">          <span class="keyword">var</span> e = t.slice(<span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">            r = t.length &lt; <span class="number">4</span> ? t.slice(<span class="number">0</span>, <span class="number">2</span>) : t.slice(<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">            i = t.length &lt; <span class="number">6</span> ? t.slice(<span class="number">0</span>, <span class="number">2</span>) : t.slice(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">          (<span class="built_in">this</span>._des1 = o.createEncryptor(n.create(e))),</span><br><span class="line">            (<span class="built_in">this</span>._des2 = o.createEncryptor(n.create(r))),</span><br><span class="line">            (<span class="built_in">this</span>._des3 = o.createEncryptor(n.create(i)));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">encryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._des1.encryptBlock(t, e),</span><br><span class="line">            <span class="built_in">this</span>._des2.decryptBlock(t, e),</span><br><span class="line">            <span class="built_in">this</span>._des3.encryptBlock(t, e);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>._des3.decryptBlock(t, e),</span><br><span class="line">            <span class="built_in">this</span>._des2.encryptBlock(t, e),</span><br><span class="line">            <span class="built_in">this</span>._des1.decryptBlock(t, e);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">keySize</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">ivSize</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">2</span>,</span><br><span class="line">      &#125;));</span><br><span class="line">      t.TripleDES = r._createHelper(s);</span><br><span class="line">    &#125;)(),</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t = bt,</span><br><span class="line">        e = t.lib.StreamCipher,</span><br><span class="line">        r = t.algo,</span><br><span class="line">        i = (r.RC4 = e.extend(&#123;</span><br><span class="line">          <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (</span><br><span class="line">              <span class="keyword">var</span> t = <span class="built_in">this</span>._key,</span><br><span class="line">                e = t.words,</span><br><span class="line">                r = t.sigBytes,</span><br><span class="line">                i = (<span class="built_in">this</span>._S = []),</span><br><span class="line">                n = <span class="number">0</span>;</span><br><span class="line">              n &lt; <span class="number">256</span>;</span><br><span class="line">              n++</span><br><span class="line">            )</span><br><span class="line">              i[n] = n;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; n &lt; <span class="number">256</span>; n++) &#123;</span><br><span class="line">              <span class="keyword">var</span> s = n % r,</span><br><span class="line">                c = (e[s &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (s % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>;</span><br><span class="line">              o = (o + i[n] + c) % <span class="number">256</span>;</span><br><span class="line">              <span class="keyword">var</span> a = i[n];</span><br><span class="line">              (i[n] = i[o]), (i[o] = a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>._i = <span class="built_in">this</span>._j = <span class="number">0</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            t[e] ^= n.call(<span class="built_in">this</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">keySize</span>: <span class="number">8</span>,</span><br><span class="line">          <span class="attr">ivSize</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;));</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (</span><br><span class="line">          <span class="keyword">var</span> t = <span class="built_in">this</span>._S, e = <span class="built_in">this</span>._i, r = <span class="built_in">this</span>._j, i = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">          n &lt; <span class="number">4</span>;</span><br><span class="line">          n++</span><br><span class="line">        ) &#123;</span><br><span class="line">          r = (r + t[(e = (e + <span class="number">1</span>) % <span class="number">256</span>)]) % <span class="number">256</span>;</span><br><span class="line">          <span class="keyword">var</span> o = t[e];</span><br><span class="line">          (t[e] = t[r]),</span><br><span class="line">            (t[r] = o),</span><br><span class="line">            (i |= t[(t[e] + t[r]) % <span class="number">256</span>] &lt;&lt; (<span class="number">24</span> - <span class="number">8</span> * n));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>._i = e), (<span class="built_in">this</span>._j = r), i;</span><br><span class="line">      &#125;</span><br><span class="line">      t.RC4 = e._createHelper(i);</span><br><span class="line">      <span class="keyword">var</span> o = (r.RC4Drop = i.extend(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: i.cfg.extend(&#123; <span class="attr">drop</span>: <span class="number">192</span> &#125;),</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          i._doReset.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">this</span>.cfg.drop; <span class="number">0</span> &lt; t; t--) n.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;));</span><br><span class="line">      t.RC4Drop = e._createHelper(o);</span><br><span class="line">    &#125;)(),</span><br><span class="line">    (bt.mode.CTRGladman =</span><br><span class="line">      ((ot = bt.lib.BlockCipherMode.extend()),</span><br><span class="line">      (st = ot.Encryptor =</span><br><span class="line">        ot.extend(&#123;</span><br><span class="line">          <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> r,</span><br><span class="line">              i = <span class="built_in">this</span>._cipher,</span><br><span class="line">              n = i.blockSize,</span><br><span class="line">              o = <span class="built_in">this</span>._iv,</span><br><span class="line">              s = <span class="built_in">this</span>._counter;</span><br><span class="line">            o &amp;&amp; ((s = <span class="built_in">this</span>._counter = o.slice(<span class="number">0</span>)), (<span class="built_in">this</span>._iv = <span class="keyword">void</span> <span class="number">0</span>)),</span><br><span class="line">              <span class="number">0</span> === ((r = s)[<span class="number">0</span>] = Et(r[<span class="number">0</span>])) &amp;&amp; (r[<span class="number">1</span>] = Et(r[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">var</span> c = s.slice(<span class="number">0</span>);</span><br><span class="line">            i.encryptBlock(c, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; n; a++) t[e + a] ^= c[a];</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)),</span><br><span class="line">      (ot.Decryptor = st),</span><br><span class="line">      ot)),</span><br><span class="line">    (at = (ct = bt).lib.StreamCipher),</span><br><span class="line">    (ht = ct.algo),</span><br><span class="line">    (lt = []),</span><br><span class="line">    (ft = []),</span><br><span class="line">    (dt = []),</span><br><span class="line">    (ut = ht.Rabbit =</span><br><span class="line">      at.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">this</span>._key.words, e = <span class="built_in">this</span>.cfg.iv, r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++)</span><br><span class="line">            t[r] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((t[r] &lt;&lt; <span class="number">8</span>) | (t[r] &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((t[r] &lt;&lt; <span class="number">24</span>) | (t[r] &gt;&gt;&gt; <span class="number">8</span>)));</span><br><span class="line">          <span class="keyword">var</span> i = (<span class="built_in">this</span>._X = [</span><br><span class="line">              t[<span class="number">0</span>],</span><br><span class="line">              (t[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              t[<span class="number">1</span>],</span><br><span class="line">              (t[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              t[<span class="number">2</span>],</span><br><span class="line">              (t[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              t[<span class="number">3</span>],</span><br><span class="line">              (t[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">            ]),</span><br><span class="line">            n = (<span class="built_in">this</span>._C = [</span><br><span class="line">              (t[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              (<span class="number">4294901760</span> &amp; t[<span class="number">0</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">1</span>]),</span><br><span class="line">              (t[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              (<span class="number">4294901760</span> &amp; t[<span class="number">1</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">2</span>]),</span><br><span class="line">              (t[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              (<span class="number">4294901760</span> &amp; t[<span class="number">2</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">3</span>]),</span><br><span class="line">              (t[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              (<span class="number">4294901760</span> &amp; t[<span class="number">3</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">0</span>]),</span><br><span class="line">            ]);</span><br><span class="line">          <span class="keyword">for</span> (r = <span class="built_in">this</span>._b = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) Rt.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">8</span>; r++) n[r] ^= i[(r + <span class="number">4</span>) &amp; <span class="number">7</span>];</span><br><span class="line">          <span class="keyword">if</span> (e) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = e.words,</span><br><span class="line">              s = o[<span class="number">0</span>],</span><br><span class="line">              c = o[<span class="number">1</span>],</span><br><span class="line">              a =</span><br><span class="line">                (<span class="number">16711935</span> &amp; ((s &lt;&lt; <span class="number">8</span>) | (s &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">                (<span class="number">4278255360</span> &amp; ((s &lt;&lt; <span class="number">24</span>) | (s &gt;&gt;&gt; <span class="number">8</span>))),</span><br><span class="line">              h =</span><br><span class="line">                (<span class="number">16711935</span> &amp; ((c &lt;&lt; <span class="number">8</span>) | (c &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">                (<span class="number">4278255360</span> &amp; ((c &lt;&lt; <span class="number">24</span>) | (c &gt;&gt;&gt; <span class="number">8</span>))),</span><br><span class="line">              l = (a &gt;&gt;&gt; <span class="number">16</span>) | (<span class="number">4294901760</span> &amp; h),</span><br><span class="line">              f = (h &lt;&lt; <span class="number">16</span>) | (<span class="number">65535</span> &amp; a);</span><br><span class="line">            (n[<span class="number">0</span>] ^= a),</span><br><span class="line">              (n[<span class="number">1</span>] ^= l),</span><br><span class="line">              (n[<span class="number">2</span>] ^= h),</span><br><span class="line">              (n[<span class="number">3</span>] ^= f),</span><br><span class="line">              (n[<span class="number">4</span>] ^= a),</span><br><span class="line">              (n[<span class="number">5</span>] ^= l),</span><br><span class="line">              (n[<span class="number">6</span>] ^= h),</span><br><span class="line">              (n[<span class="number">7</span>] ^= f);</span><br><span class="line">            <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) Rt.call(<span class="built_in">this</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> r = <span class="built_in">this</span>._X;</span><br><span class="line">          Rt.call(<span class="built_in">this</span>),</span><br><span class="line">            (lt[<span class="number">0</span>] = r[<span class="number">0</span>] ^ (r[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>)),</span><br><span class="line">            (lt[<span class="number">1</span>] = r[<span class="number">2</span>] ^ (r[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">5</span>] &lt;&lt; <span class="number">16</span>)),</span><br><span class="line">            (lt[<span class="number">2</span>] = r[<span class="number">4</span>] ^ (r[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">7</span>] &lt;&lt; <span class="number">16</span>)),</span><br><span class="line">            (lt[<span class="number">3</span>] = r[<span class="number">6</span>] ^ (r[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>));</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            (lt[i] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((lt[i] &lt;&lt; <span class="number">8</span>) | (lt[i] &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((lt[i] &lt;&lt; <span class="number">24</span>) | (lt[i] &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">              (t[e + i] ^= lt[i]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">ivSize</span>: <span class="number">2</span>,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (ct.Rabbit = at._createHelper(ut)),</span><br><span class="line">    (bt.mode.CTR =</span><br><span class="line">      ((pt = bt.lib.BlockCipherMode.extend()),</span><br><span class="line">      (_t = pt.Encryptor =</span><br><span class="line">        pt.extend(&#123;</span><br><span class="line">          <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="built_in">this</span>._cipher,</span><br><span class="line">              i = r.blockSize,</span><br><span class="line">              n = <span class="built_in">this</span>._iv,</span><br><span class="line">              o = <span class="built_in">this</span>._counter;</span><br><span class="line">            n &amp;&amp; ((o = <span class="built_in">this</span>._counter = n.slice(<span class="number">0</span>)), (<span class="built_in">this</span>._iv = <span class="keyword">void</span> <span class="number">0</span>));</span><br><span class="line">            <span class="keyword">var</span> s = o.slice(<span class="number">0</span>);</span><br><span class="line">            r.encryptBlock(s, <span class="number">0</span>), (o[i - <span class="number">1</span>] = (o[i - <span class="number">1</span>] + <span class="number">1</span>) | <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; i; c++) t[e + c] ^= s[c];</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)),</span><br><span class="line">      (pt.Decryptor = _t),</span><br><span class="line">      pt)),</span><br><span class="line">    (yt = (vt = bt).lib.StreamCipher),</span><br><span class="line">    (gt = vt.algo),</span><br><span class="line">    (Bt = []),</span><br><span class="line">    (wt = []),</span><br><span class="line">    (kt = []),</span><br><span class="line">    (St = gt.RabbitLegacy =</span><br><span class="line">      yt.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (</span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">this</span>._key.words,</span><br><span class="line">              e = <span class="built_in">this</span>.cfg.iv,</span><br><span class="line">              r = (<span class="built_in">this</span>._X = [</span><br><span class="line">                t[<span class="number">0</span>],</span><br><span class="line">                (t[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">                t[<span class="number">1</span>],</span><br><span class="line">                (t[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">                t[<span class="number">2</span>],</span><br><span class="line">                (t[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">                t[<span class="number">3</span>],</span><br><span class="line">                (t[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">              ]),</span><br><span class="line">              i = (<span class="built_in">this</span>._C = [</span><br><span class="line">                (t[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">2</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">                (<span class="number">4294901760</span> &amp; t[<span class="number">0</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">1</span>]),</span><br><span class="line">                (t[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">                (<span class="number">4294901760</span> &amp; t[<span class="number">1</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">2</span>]),</span><br><span class="line">                (t[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">                (<span class="number">4294901760</span> &amp; t[<span class="number">2</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">3</span>]),</span><br><span class="line">                (t[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (t[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>),</span><br><span class="line">                (<span class="number">4294901760</span> &amp; t[<span class="number">3</span>]) | (<span class="number">65535</span> &amp; t[<span class="number">0</span>]),</span><br><span class="line">              ]),</span><br><span class="line">              n = (<span class="built_in">this</span>._b = <span class="number">0</span>);</span><br><span class="line">            n &lt; <span class="number">4</span>;</span><br><span class="line">            n++</span><br><span class="line">          )</span><br><span class="line">            Mt.call(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="number">8</span>; n++) i[n] ^= r[(n + <span class="number">4</span>) &amp; <span class="number">7</span>];</span><br><span class="line">          <span class="keyword">if</span> (e) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = e.words,</span><br><span class="line">              s = o[<span class="number">0</span>],</span><br><span class="line">              c = o[<span class="number">1</span>],</span><br><span class="line">              a =</span><br><span class="line">                (<span class="number">16711935</span> &amp; ((s &lt;&lt; <span class="number">8</span>) | (s &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">                (<span class="number">4278255360</span> &amp; ((s &lt;&lt; <span class="number">24</span>) | (s &gt;&gt;&gt; <span class="number">8</span>))),</span><br><span class="line">              h =</span><br><span class="line">                (<span class="number">16711935</span> &amp; ((c &lt;&lt; <span class="number">8</span>) | (c &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">                (<span class="number">4278255360</span> &amp; ((c &lt;&lt; <span class="number">24</span>) | (c &gt;&gt;&gt; <span class="number">8</span>))),</span><br><span class="line">              l = (a &gt;&gt;&gt; <span class="number">16</span>) | (<span class="number">4294901760</span> &amp; h),</span><br><span class="line">              f = (h &lt;&lt; <span class="number">16</span>) | (<span class="number">65535</span> &amp; a);</span><br><span class="line">            (i[<span class="number">0</span>] ^= a),</span><br><span class="line">              (i[<span class="number">1</span>] ^= l),</span><br><span class="line">              (i[<span class="number">2</span>] ^= h),</span><br><span class="line">              (i[<span class="number">3</span>] ^= f),</span><br><span class="line">              (i[<span class="number">4</span>] ^= a),</span><br><span class="line">              (i[<span class="number">5</span>] ^= l),</span><br><span class="line">              (i[<span class="number">6</span>] ^= h),</span><br><span class="line">              (i[<span class="number">7</span>] ^= f);</span><br><span class="line">            <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++) Mt.call(<span class="built_in">this</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> r = <span class="built_in">this</span>._X;</span><br><span class="line">          Mt.call(<span class="built_in">this</span>),</span><br><span class="line">            (Bt[<span class="number">0</span>] = r[<span class="number">0</span>] ^ (r[<span class="number">5</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>)),</span><br><span class="line">            (Bt[<span class="number">1</span>] = r[<span class="number">2</span>] ^ (r[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">5</span>] &lt;&lt; <span class="number">16</span>)),</span><br><span class="line">            (Bt[<span class="number">2</span>] = r[<span class="number">4</span>] ^ (r[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">7</span>] &lt;&lt; <span class="number">16</span>)),</span><br><span class="line">            (Bt[<span class="number">3</span>] = r[<span class="number">6</span>] ^ (r[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">16</span>) ^ (r[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>));</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            (Bt[i] =</span><br><span class="line">              (<span class="number">16711935</span> &amp; ((Bt[i] &lt;&lt; <span class="number">8</span>) | (Bt[i] &gt;&gt;&gt; <span class="number">24</span>))) |</span><br><span class="line">              (<span class="number">4278255360</span> &amp; ((Bt[i] &lt;&lt; <span class="number">24</span>) | (Bt[i] &gt;&gt;&gt; <span class="number">8</span>)))),</span><br><span class="line">              (t[e + i] ^= Bt[i]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">ivSize</span>: <span class="number">2</span>,</span><br><span class="line">      &#125;)),</span><br><span class="line">    (vt.RabbitLegacy = yt._createHelper(St)),</span><br><span class="line">    (bt.pad.ZeroPadding = &#123;</span><br><span class="line">      <span class="attr">pad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="number">4</span> * e;</span><br><span class="line">        t.clamp(), (t.sigBytes += r - (t.sigBytes % r || r));</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">unpad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = t.words,</span><br><span class="line">          r = t.sigBytes - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (r = t.sigBytes - <span class="number">1</span>; <span class="number">0</span> &lt;= r; r--)</span><br><span class="line">          <span class="keyword">if</span> ((e[r &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (r % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">255</span>) &#123;</span><br><span class="line">            t.sigBytes = r + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    bt</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = CryptoJS.enc.Utf8.parse(<span class="string">&quot;fipFfVsZsTda94hJNKJfLoaqyqMZFFimwLt&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; name, birthday, height, weight &#125; = player;</span><br><span class="line">  <span class="keyword">let</span> base64Name = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(name));</span><br><span class="line">  <span class="keyword">let</span> encrypted = CryptoJS.DES.encrypt(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;base64Name&#125;</span><span class="subst">$&#123;birthday&#125;</span><span class="subst">$&#123;height&#125;</span><span class="subst">$&#123;weight&#125;</span>`</span>,</span><br><span class="line">    key,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">mode</span>: CryptoJS.mode.ECB,</span><br><span class="line">      <span class="attr">padding</span>: CryptoJS.pad.Pkcs7,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> encrypted.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>crypto_get_token.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">item = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;卡尔-安东尼-唐斯&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;towns.png&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;birthday&#x27;</span>: <span class="string">&#x27;1995-11-15&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;height&#x27;</span>: <span class="string">&#x27;211cm&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;weight&#x27;</span>: <span class="string">&#x27;112.5KG&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = <span class="string">&#x27;crypto.js&#x27;</span></span><br><span class="line">node = execjs.get()</span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(file).read())</span><br><span class="line">js = <span class="string">f&quot;getToken(<span class="subst">&#123;json.dumps(item, ensure_ascii=<span class="literal">False</span>)&#125;</span>)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(js)</span><br><span class="line">result = ctx.<span class="built_in">eval</span>(js)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>然后我们运行之后会发现一个报错说是CryptoJS未定义，这很奇怪，我们明明执行过了crypto-js.min.js里面的内容啊，这问题其实出在crypto-js.min.js，可以看到其中有声明了一个JavaScript的自执行方法，如下图所示:</p><p><a href="https://imgtu.com/i/HoBbvj"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/18/HoBbvj.png"                      alt="HoBbvj.png"                ></a></p><h4 id="插一句-什么是自执行方法"><a href="#插一句-什么是自执行方法" class="headerlink" title="插一句: 什么是自执行方法"></a>插一句: 什么是自执行方法</h4><p>什么是自执行方法呢，就是声明了一个方法，然后紧接着调用执行，我们可以看下面这个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, a, b)&#125;)(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这里我们先声明了一个functon，它接收a和b两个参数，然后把内容输出出来，接着我们把这个function用小括号括起来；其实这就是 一个方法，可以被直接调用，后面再跟上对应的参数就好了，比如传入1和2，执行结果如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>同理上面的crypto-js.min.js也符合这个格式，它接收t和e两个参数，t就是this，其实就是浏览器中的window对象，e就是一个function(用于定义CryptoJS的核心内容)，我们再来观察下crypto-js.min.js开头的定义:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">exports</span></span><br><span class="line">    ? (<span class="built_in">module</span>.exports = <span class="built_in">exports</span> = e())</span><br><span class="line">    : <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> define &amp;&amp; define.amd</span><br><span class="line">    ? define([], e)</span><br><span class="line">    : (t.CryptoJS = e());</span><br></pre></td></tr></table></figure><p>在Node.js中，其实exports用来将一些对象的定义导出，这里<code>&quot;object&quot; == typeof exports</code>的结果其实就是true，所以就执行了module.exports = exports = e()这段代码，这相当用于把e()作为整体导出，而这个e()其实就对应后面的整个function；function里面定义了加密相关的各个实现</p><p>但是在浏览器中，其结果就不一样了，浏览器中并没有exports和define这两个对象，所以上述代码在浏览器中最后执行的就是t.CryptoJS = e()这段代码，其实这里就是把CryptoJS对象挂载到this对象上去，而this就是浏览器中的全局windows对象，后面就可以直接用了</p><p>然而，我们使用的PyExecJS是依赖于一个Node.js执行环境的，所以上述代码其实执行的是<code>module.exports = exports = e()</code>，这里面并没有声明CryptoJS对象，也没有把CryptoJS挂载到全局对象里面，后面我们再调用CryptoJS自然就会出现未定义的错误了</p><p>怎么办呢，其实很简单，直接声明一个CryptoJS对象，然后手动声明一下它的初始化不就好了，所以我们可以把代码稍做修改，改成如下内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CryptoJS;</span><br><span class="line">!(<span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">  CryptoJS = e();</span><br><span class="line">  <span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">exports</span></span><br><span class="line">    ? (<span class="built_in">module</span>.exports = <span class="built_in">exports</span> = e())</span><br><span class="line">    : <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> define &amp;&amp; define.amd</span><br><span class="line">    ? define([], e)</span><br><span class="line">    : (t.CryptoJS = e());</span><br><span class="line">&#125;)(<span class="built_in">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> h,</span><br><span class="line">    t,</span><br><span class="line">    e,</span><br><span class="line">    r,</span><br><span class="line">    i,</span><br><span class="line">.........</span><br></pre></td></tr></table></figure><p>修改成以上之后就能成功运行了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getToken(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;卡尔-安东尼-唐斯&quot;</span>, <span class="string">&quot;image&quot;</span>: <span class="string">&quot;towns.png&quot;</span>, <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1995-11-15&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="string">&quot;211cm&quot;</span>, <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;112.5KG&quot;</span>&#125;)</span><br><span class="line">6C03P2Jzlff3i0amcVIMM/TdZLftH7b1xUuVHeeTaFlpMOkB0yHNHBbu7Z8EMDtMUVOJ3gkHn5I=</span><br></pre></td></tr></table></figure><h4 id="插一句-关于Js的三元表达式"><a href="#插一句-关于Js的三元表达式" class="headerlink" title="插一句: 关于Js的三元表达式"></a>插一句: 关于Js的三元表达式</h4><p><a href="https://imgtu.com/i/HocMDJ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/18/HocMDJ.png"                      alt="HocMDJ.png"                ></a></p><h3 id="使用Node-js模拟执行JavaScript代码"><a href="#使用Node-js模拟执行JavaScript代码" class="headerlink" title="使用Node.js模拟执行JavaScript代码"></a>使用Node.js模拟执行JavaScript代码</h3><p>上面，我们了解了利用Python来模拟JavaScript调用的方法，使用的库是PyExecJS，其执行环境我们选用的也是Node.js，但有时候在调用的过程中我们会发现这还是有不太方便的地方，而且可能出现上一节的变量未定义的问题，那我们为啥不直接用Node.js来尝试JavaScript的执行呢，其实原理上来说这种方案是完全可行的</p><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><p>安装好Node.js</p><h4 id="模拟执行"><a href="#模拟执行" class="headerlink" title="模拟执行"></a>模拟执行</h4><p>这里的案例和上面的是一样的，我们想要的其实还是计算出每位球星对应的加密字符串，所以整体思路其实还是加载Crypto库并执行getToken方法，这里我们直接基于Node.js来实现</p><p>首先，还是把crypto-js.min.js文件中的内容复制下来，新建一个cryteo.js文件并把内容粘贴进去，然后新建一个main.js文件，其内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&quot;./crypto&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getToken</span>(<span class="params">player</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> key = CryptoJS.enc.Utf8.parse(<span class="string">&#x27;fipFfVsZsTda94hJNKJfLoaqyqMZFFimwLt&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> &#123;name, birthday, height, weight&#125; = player</span><br><span class="line">      <span class="keyword">let</span> base64Name = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(name))</span><br><span class="line">      <span class="keyword">let</span> encrypted = CryptoJS.DES.encrypt(<span class="string">`<span class="subst">$&#123;base64Name&#125;</span><span class="subst">$&#123;birthday&#125;</span><span class="subst">$&#123;height&#125;</span><span class="subst">$&#123;weight&#125;</span>`</span>, key, &#123;</span><br><span class="line">        <span class="attr">mode</span>: CryptoJS.mode.ECB,</span><br><span class="line">        <span class="attr">padding</span>: CryptoJS.pad.Pkcs7</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> encrypted.toString()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">const</span> player = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;克里斯-保罗&#x27;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;paul.png&#x27;</span>,</span><br><span class="line">    <span class="attr">birthday</span>: <span class="string">&#x27;1985-05-06&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;185cm&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="string">&#x27;79.4KG&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">consloe.log(getToken(player))</span><br></pre></td></tr></table></figure><p>这里我们直接使用Node.js中的require方法导入crypto.js这个文件，然后将其赋值给CryptoJS对象，这样其实就完成了CryptoJS对象的初始化了，后面我们就可以正常使用Crypto对象了，这个原理我们在上面就已经讲过啦</p><p>通过命令<code>node main.js</code>，我们也可以得到结果</p><h4 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h4><p>现在我们已经可以使用Node.js来完成整个加密字符串的生成了，完全用Node.js编写爬虫就可以了，但如果这个时候我就想使用Python来编写整个爬虫，怎么办呢，该如何和Node.js对接呢，很简单，直接使用Node.js来把刚刚的算法暴露成一个HTTP服务就好了，这样的话Python直接调用Node.js暴露的HTTP服务，通过Ruquest Body传入对应的球员信息，然后加密字符串通过HTTP的Response返回即可</p><p>那么HTTP服务用什么来实现呢，Node.js中最流行的HTTP服务框架当属express了，所以这里我们就选用它来作为HTTP服务器</p><p>首先安装express，在main.js所在目录下运行如下命令:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>然后改写main.js为以下内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&quot;./crypto&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> key = CryptoJS.enc.Utf8.parse(<span class="string">&#x27;fipFfVsZsTda94hJNKJfLoaqyqMZFFimwLt&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> &#123;name, birthday, height, weight&#125; = player</span><br><span class="line">      <span class="keyword">let</span> base64Name = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(name))</span><br><span class="line">      <span class="keyword">let</span> encrypted = CryptoJS.DES.encrypt(<span class="string">`<span class="subst">$&#123;base64Name&#125;</span><span class="subst">$&#123;birthday&#125;</span><span class="subst">$&#123;height&#125;</span><span class="subst">$&#123;weight&#125;</span>`</span>, key, &#123;</span><br><span class="line">        <span class="attr">mode</span>: CryptoJS.mode.ECB,</span><br><span class="line">        <span class="attr">padding</span>: CryptoJS.pad.Pkcs7</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> encrypted.toString()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">const</span> player = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;克里斯-保罗&#x27;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;paul.png&#x27;</span>,</span><br><span class="line">    <span class="attr">birthday</span>: <span class="string">&#x27;1985-05-06&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;185cm&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="string">&#x27;79.4KG&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">consloe.log(getToken(player))</span><br></pre></td></tr></table></figure><p>这里我们就使用了express编写了一个服务，它可以接收一个POST请求，Request Body就是球员信息，然后返回的就是getToken的计算结果作为Response的内容，接下来我们同样使用<code>node main.js</code>，来启动该脚本， 这时可以看到，express就在本地的3000端口运行了</p><p>如果我们想用Python调用的话，直接使用requests调用该API，然后传入对应的球员的信息即可示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;凯文-杜兰特&#x27;</span>,</span><br><span class="line">    image: <span class="string">&#x27;durant.png&#x27;</span>,</span><br><span class="line">    birthday: <span class="string">&#x27;1988-09-29&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;208cm&#x27;</span>,</span><br><span class="line">    weight: <span class="string">&#x27;108.9KG&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:3000&#x27;</span></span><br><span class="line">response = request.post(url, json=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>这样我们就成功实现了Node.js到Python调用的转换，这样爬取到数据之后，我们就可以使用Python进行后续的分析、处理了</p><h3 id="浏览器环境下JavaScript的模拟执行"><a href="#浏览器环境下JavaScript的模拟执行" class="headerlink" title="浏览器环境下JavaScript的模拟执行"></a>浏览器环境下JavaScript的模拟执行</h3><p>前面的内容中，我们了解了利用PyExecJS和Node.js对JavaScript进行模拟执行的方法，但在某些复杂的情况下可能还是会有一些局限性</p><p>局限性体现在哪里呢:</p><ul><li><p>环境差异</p><p>Node.js中没有全局window对象，取而代之的是global对象；如果JavaScript文件中有任何引用window对象的方法，就无法在Node.js中运行，我们需要做的是把window对象改写成global对象，或者把一些浏览器中的对象用其他方法代替</p></li><li><p>依赖库差异</p><p>我们在浏览器中的encrypt方法肯定都已经加载到浏览器，如果我们要在其他环境中模拟执行，要从中完全剥离出encrypt所依赖的JavaScript库，肯定需要费很大的功夫，一旦缺少必备的依赖库，就会导致encrypt方法无法成功运行</p></li></ul><p>对于一些复杂情况，我们为什么不直接用浏览器作为执行环境来辅助逆向呢</p><h4 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h4><p>在这里，我们使用playwright来实现浏览器辅助逆向，首先我们要安装playwright，命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install playwright</span><br><span class="line">playwright install</span><br></pre></td></tr></table></figure><p>运行如上两条命令之后，会安装playwright库，并安装Chromium、Firefox、WebKit三个内核的浏览器playwright直接使用；具体的安装方法可以参考<a class="link"   href="https://setup.scrape.center/playwright" >https://setup.scrape.center/playwright<i class="fas fa-external-link-alt"></i></a></p><h4 id="案例介绍-1"><a href="#案例介绍-1" class="headerlink" title="案例介绍"></a>案例介绍</h4><p>目标网站: <a class="link"   href="https://spa2.scrape.center/" >https://spa2.scrape.center/<i class="fas fa-external-link-alt"></i></a></p><p>可以看到，其Ajax请求参数带有一个Token，并且每次都会变化，如下图所示:</p><p><a href="https://imgtu.com/i/HTMUNq"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/18/HTMUNq.png"                      alt="HTMUNq.png"                ></a></p><p>添加XHR断点并通过调用栈找到token的生成入口，如下图所示:</p><p><a href="https://imgtu.com/i/HT1K41"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/18/HT1K41.png"                      alt="HT1K41.png"                ></a></p><p>可以发现，请求参数的token就是变量e，它的生成过程如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="built_in">this</span>.page - <span class="number">1</span>) * <span class="built_in">this</span>.limit, e = <span class="built_in">Object</span>(i[<span class="string">&quot;a&quot;</span>])(<span class="built_in">this</span>.$store.state.url.index, a);</span><br></pre></td></tr></table></figure><p>我们在此处添加断点调试下，看看具体的变量值，如下图所示:</p><p><a href="https://imgtu.com/i/HTtqaD"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/18/HTtqaD.png"                      alt="HTtqaD.png"                ></a></p><p>从上图中我们可以看出，变量a其实就是请求数据的offset，数据一页10条，所以第一页offset就是0，第二页就是10，以此类推；我们在控制台中打印可以看到this.$store.state.url.index是一个固定的值: ‘/api/movie’</p><p><a href="https://imgtu.com/i/HTNhTS"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/18/HTNhTS.png"                      alt="HTNhTS.png"                ></a></p><p>但是调用Object(i[“a”])方法之后，结果e也就是最终的token参数就得到了，因此，我们可以断定Object(i[“a”])里面就是核心的加载逻辑，我们再把i[“a”]方法追踪下，可以看到如下的逻辑:</p><p><a href="https://imgtu.com/i/HTUyAU"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/18/HTUyAU.png"                      alt="HTUyAU.png"                ></a></p><p>我们大致可以看到，这里又掺杂了时间，SHA1，Base64、列表等各种操作，要深入分析，还是要花费好多时间的，现在，可以说核心方法已经找到了，参数我们也知道怎么构造了，但是方法内部比较复杂，但我们想要的其实就是这个方法的运行结果，即最终的token</p><p>这个方法并不是全局变量，所以没法直接调用，所以我们可以直接把局部方法挂载到全局window对象上即可，那么如何把局部的方法挂载到全局window对象上呢，最简单的方法就是直接改源码，既然已经在浏览器中运行了，又怎么改源码呢，当然可以，比如直接利用playwright的Request Interception机制将想要的任意文件进行替换即可</p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>首先，我们来实现Object(i[“a”])的全局挂载，只需要将其赋值给window对象的一个属性即可，只要不和现有属性冲突即可</p><p>比如我们需要在代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = (this.page - <span class="number">1</span>) * this.limit, e = Object(i[<span class="string">&quot;a&quot;</span>])(this.$store.state.url.index, a);</span><br></pre></td></tr></table></figure><p>下方添加如下用于挂载全局window对象的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.encrype = <span class="built_in">Object</span>(i[<span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure><p>比如，这里我们将Object(i[‘a’])挂载给window对象的encrypt属性，这样只要该行代码执行完之后，我们调用window.encrypt方法就相当于调用了Object(i[‘a’])方法</p><p>接着我们将修改后的整个JavaScript代码文件保存本地，并将其命名为chunk.js，如下图所示:</p><p><a href="https://imgtu.com/i/bZ0BdS"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZ0BdS.png"                      alt="bZ0BdS.png"                ></a></p><p>然后我们利用playwright启动一个浏览器，并使用Request Interception将JavaScript文件替换，实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line">BASE_url = <span class="string">&#x27;https://spa2.scrape.center&#x27;</span></span><br><span class="line">context = sync_playwright().start</span><br><span class="line">browser = context.chromium.launch()  <span class="comment"># 使用playwright创建一个无头浏览器</span></span><br><span class="line">page = browser.new_page()  <span class="comment"># 使用new_page方法创建一个新的页面</span></span><br><span class="line">page.route(</span><br><span class="line">    <span class="string">&quot;/js/chunk-10192a00.243cb8b7.js&quot;</span>,  <span class="comment"># 原本文件加载的路径</span></span><br><span class="line">    lanbda route: route.fulfill(path=<span class="string">&quot;./chunk.js&quot;</span>)  <span class="comment"># 指定本地的文件</span></span><br><span class="line">)</span><br><span class="line">page,goto(BASE_url)</span><br></pre></td></tr></table></figure><p>这里路由的第一个参数是原本加载的文件路径，比如原来加载的JavaScript为<code>/js/chunk-10192a00.243cb8b7.js</code>如下图所示:</p><p><a href="https://imgtu.com/i/bZBMSs"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZBMSs.png"                      alt="bZBMSs.png"                ></a></p><p>第二个参数利用route的fullfill方法指定本地的文件，也就是我们修改后的文件chunk.js，这样playwright加载<code>/js/chunk-10192a00.243cb8b7.js</code>的时候，其内容就会被替换成我们本地保存的chunk.js文件，执行之后，Object(i[“a”])也就会被挂载给window对象的encrypt属性了，所以调用window.encrypt方法就相当于调用了Object(i[“a”])方法了</p><p>怎么模拟调用呢，很简单，只需要在playwright环境中额外执行JavaScript代码即可，比如可以定义如下的方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">offset</span>):</span></span><br><span class="line">    result = page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;return window.encrypt(&quot;%s&quot;, &quot;%s&quot;)&#125;&#x27;&#x27;&#x27;</span> % (<span class="string">&#x27;api/movie&#x27;</span>, offset))</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>这里我们声明了get_token方法，经过上文的分析，模拟执行方法需要传入两个参数，第一个参数是固定值/api/movie，另一个参数是变值，所以将其当做参数传入</p><p>在模拟执行的过程中，我们直接使用page对象的evaluate方法，传入JavaScript字符串即可，这个JavaScript字符串是一个方法，返回的就是window.encrypt方法的执行结果，最后将上面的代码串联调用即可，最终整理的代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">BASE_url = <span class="string">&#x27;https://spa2.scrape.center&#x27;</span></span><br><span class="line">context = sync_playwright().start</span><br><span class="line">browser = context.chromium.launch()  <span class="comment"># 使用playwright创建一个无头浏览器</span></span><br><span class="line">page = browser.new_page()  <span class="comment"># 使用new_page方法创建一个新的页面</span></span><br><span class="line">page.route(</span><br><span class="line">    <span class="string">&quot;/js/chunk-10192a00.243cb8b7.js&quot;</span>,  <span class="comment"># 原本文件加载的路径</span></span><br><span class="line">    lanbda route: route.fulfill(path=<span class="string">&quot;./chunk.js&quot;</span>)  <span class="comment"># 指定本地的文件</span></span><br><span class="line">)</span><br><span class="line">page,goto(BASE_url)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">offset</span>):</span></span><br><span class="line">    result = page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;return window.encrypt(&quot;%s&quot;, &quot;%s&quot;)&#125;&#x27;&#x27;&#x27;</span> % (<span class="string">&#x27;api/movie&#x27;</span>, offset))</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX_PAGE):</span><br><span class="line">    offset = i * LIMIT</span><br><span class="line">    token = get_token(offset)</span><br><span class="line">    index_url = INDEX_URL.<span class="built_in">format</span>(limit=LIMIT, offset=offset, token=token)</span><br><span class="line">    response = request.get(index_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;response&#x27;</span>, response.json())</span><br></pre></td></tr></table></figure><h3 id="AST技术简介-未完善"><a href="#AST技术简介-未完善" class="headerlink" title="AST技术简介(未完善)"></a>AST技术简介(未完善)</h3><p>前面我们介绍了一些JavaScript混淆的基本知识，可以看到混淆方式多种多样，比如字符串混淆、变量名混淆、对象键名替换、控制流平坦化等；当然，我们也学习了一些相关的调试技巧，比如Hook、断点调试等；但是这些方法本质上还是在已经混淆的代码上进行的操作，所以代码的可读性依然比较差</p><p>那有没有什么办法可以直接提高代码的可读性呢?比如说，字符串混淆了，我们想办法把它还原了；对象键名替换了，我们想办法把它们重新组装好，控制流平坦化之后逻辑不直观了，我们想办法把它还原成一个代码控制流</p><p>到底应该怎么做呢，这就需要用到AST相关的知识了，本部分内容，我们就来了解AST相关的基础知识，并介绍操作AST的相关方法</p><h4 id="AST介绍"><a href="#AST介绍" class="headerlink" title="AST介绍"></a>AST介绍</h4><p>首先，我们来了解什么是AST，AST的全称叫做Abstract Syntax Tree，中文翻译叫做抽象语法树，如果你对编译原理有所了解的话，一段代码在执行之前，通常要经历这么三个步骤:</p><ul><li>词法分析: 一段代码首先会被分解成一段段有意义的词法单元，比如说const name = ‘Germey’这段代码，它就可以被拆分成四部分: const、name、=、’Germey’，每一个部分都具备一定的含义</li><li>语法分析: 接着编译成会尝试对一个个词法单元进行语法分析，将其转换为代表程序语法结构的数据结构；比如，const就被分析为VariableDeclaration类型，代表变量声明的具体定义，name就被分析为Identifier类型，代编一个标识符；代码内容多了，这一个个词法就会有依赖、嵌套等关系，因此表示语法结构的数据结构就构成了一个树状结构，也就成了语法树，即AST</li><li>指令生成: 最后将AST转换为实际真正可执行的指令并执行即可</li></ul><p>AST是源代码的抽象语法结构的树状表示，树上的每个节点都表示源代码中的一中结构，这种数据结构其实可以类比成一个大的JSON对象，前面我们也介绍过JSON对象，它可以包含列表、字典并层层嵌套，因此它看起来就像一棵树，有树根、树干、树枝和树叶，无论多大，都是一颗完整的树；</p><p>在前端开发中，AST技术应用非常广泛，比如webpack打包工具的很多压缩和优化插件、Babel插件、Vue和React的脚手架工具的底层等都运用了AST技术；有了AST技术，我们可以方便地对JavaScript代码进行转换和改写，因此还原混淆后的JavaScript代码自然也就不在话下了</p><p>接下来，我们通过一些实例了解AST的一些基本理念和操作</p><h4 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h4><p>首先，推荐一个AST在线解析的网站: <a class="link"   href="https://astexplorer.net/%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9E%E4%BE%8B%E6%9D%A5%E6%84%9F%E5%8F%97%E4%B8%8BAST%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84%EF%BC%8C%E8%BE%93%E5%85%A5%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81" >https://astexplorer.net/，我们先通过一个非常简单的实例来感受下AST究竟是什么样子的，输入下面的示例代码<i class="fas fa-external-link-alt"></i></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const name = <span class="string">&#x27;Germey&#x27;</span></span><br></pre></td></tr></table></figure><p>这时候我们就可以看到在右侧就出现了一个树状结构，这就是AST，如下图所示:</p><p><a href="https://imgtu.com/i/bZRq4P"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/26/bZRq4P.png"                      alt="bZRq4P.png"                ></a></p><p>这就是一个层层嵌套的数据结构，可以看到它把代码的每个一个部分都进行了拆分并分析出对应的类型、位置和值；</p><p>另外，在右上角，我们还看到一个Parser标识，其内容是@babel/parser，这是一个目前最流行的JavaScript语法编译器Babel的Node.js包，同时它也是主流前端开发技术中必不可少的一个包，它内置了很多分析JavaScript代码的方法可以实现JavaScript代码到AST的转换，更多的介绍可以参考Babel的官网</p><h4 id="准备工作-3"><a href="#准备工作-3" class="headerlink" title="准备工作"></a>准备工作</h4><p>本部分内容我们要使用到Babel，而Babel是基于Node.js的，所以我们要先安装Node.js，版本推荐为14.x以上，安装方法可以参考<a class="link"   href="https://setup.scrape.center/nodejs" >https://setup.scrape.center/nodejs<i class="fas fa-external-link-alt"></i></a></p><p>安装好node.js之后，我们便可以使用npm命令了，接着，我们还需要安装一个Babel的命令行工具@babel/node，安装命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @babel/node</span><br></pre></td></tr></table></figure><p>接下来，我们在初始化一个Node.js项目learn-ast，然后在learn-ast目录下运行初始化命令，具体如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init </span><br><span class="line">npm install -D @babel/core @babel/cli @babel/preset-env</span><br></pre></td></tr></table></figure><p>运行完毕之后，就会生成一个package.json文件并在devDependencies(也就是Node_modules)中列出了刚刚安装的几个Node.js包</p><p>接着，我们需要在learn-ast目录下创建一个.babelrc文件，其内容如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;@bel/preset-env&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就完成了初始化操作</p><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h4><p>在刚才的示例中，我们看到不同的代码词法单元被解析成了不同的类型，所以这里先简单列举Babel中所支持的一些类型:</p><ul><li>Literal: 中文可以理解为字面量，即简单的文字表示，比如3，‘abc’、‘hello’</li><li>Declarations: 声明，比如FunctionDeclarations和VariableDeclarations分别用于申明一个方法和变量</li><li>Expressions: 表达式，它本身会返回一个计算结果</li><li>Statements: 语句，比如IfStatements，SwitchStatements，BreakStatements这些控制语句，还有一些特殊的语句，比如DebugStatements，BlockStatements等</li><li>Identifier: 标识符，指代一些变量的名称</li><li>Classes: 类，代表一个类的定义</li><li>Functions: 模块，可以理解为一个Node.js模块</li><li>Program: 程序，整个代码可以成为一个Program</li></ul><h4 id="babel-parser的使用"><a href="#babel-parser的使用" class="headerlink" title="@babel/parser的使用"></a>@babel/parser的使用</h4><p>@babel/parser是Babel中的JavaScript解析器，也是一个Node.js包，它提供了一个重要的方法，就是parse和parseExpression方法，前者支持解析一段JavaScript代码，后者则是尝试解析单个JavaScript表达式并考虑了性能问题，一般来说，我们直接使用parse方法就足够了</p><p>对于parse方法来说，输入和输出如下:</p><ul><li>输入: 一段JavaScript代码</li><li>输出: 该段JavaScript代码对应的抽象语法树，即AST，它基于EStree规范</li></ul><p>由于JavaScript代码中包含多种类型的表达式，比如变量名，变量值，方法声明，控制语句，类声明等，这里简单做个归类，具体可以参考: <a class="link"   href="https://github.com/babel/babel/master/package/babel-parser/ast/spec.md" >https://github.com/babel/babel/master/package/babel-parser/ast/spec.md<i class="fas fa-external-link-alt"></i></a></p><p>现在我们来测试下:</p><p>新建一个JavaScript文件，命名为codes/code1.js，其内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> string = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a; i++)&#123;</span><br><span class="line">    string += <span class="string">&quot;world&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;string&quot;</span>, string)</span><br></pre></td></tr></table></figure><p>下面我们需要使用parse方法将其转化为一个抽象语法树，及AST</p><p>新建一个basic1.js文件，其内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;@babel/parser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = fs.readFileSync(<span class="string">&quot;codes/code1.js&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> ast = parse(code)</span><br><span class="line"><span class="built_in">console</span>.log(ast)</span><br></pre></td></tr></table></figure><p>接着我们可以使用babel-node运行:</p><p>运行结果这里省略，可以参见上面给定的网站，效果是差不多的</p><p><code>console.log(ast.program.body)</code>，就是输出body的内容</p><p>运行以上代码就会发现输出的东西更多了，这是因为输出具体化了</p><p>我还是推荐使用上述提到的网站: <a class="link"   href="https://astexplorer.net/%E6%9D%A5%E8%BF%9B%E8%A1%8CAST%E7%9A%84%E8%A7%A3%E6%9E%90%E5%92%8C%E6%9F%A5%E7%9C%8B%EF%BC%8C%E5%AE%83%E6%AF%94%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9B%B4%E8%A7%82" >https://astexplorer.net/来进行AST的解析和查看，它比代码更加直观<i class="fas fa-external-link-alt"></i></a></p><h4 id="babel-generate的使用"><a href="#babel-generate的使用" class="headerlink" title="@babel/generate的使用"></a>@babel/generate的使用</h4><p>这一部分暂时省略</p><h4 id="babel-traverse的使用"><a href="#babel-traverse的使用" class="headerlink" title="@babel/traverse的使用"></a>@babel/traverse的使用</h4><p>这一部分暂时省略</p><h4 id="babel-types的使用"><a href="#babel-types的使用" class="headerlink" title="@babel/types的使用"></a>@babel/types的使用</h4><h3 id="使用AST技术还原混淆代码"><a href="#使用AST技术还原混淆代码" class="headerlink" title="使用AST技术还原混淆代码"></a>使用AST技术还原混淆代码</h3><p>在上面，我们介绍了AST相关的基本知识和基础的操作方法，本部分我们将就来实际应用这些方法来还原JavaScript混淆后的代码，即一些反混淆的实现</p><h4 id="表达式还原"><a href="#表达式还原" class="headerlink" title="表达式还原"></a>表达式还原</h4><p>有时候，我们会看到一些混淆的JavaScript代码其实就是把简单的东西复杂化，比如一个布尔常量true，被写成!![]；一个数字，被转化为parseint加一些字符串的拼接，通过这些方式，一些简单又直观的表达式就被复杂化了</p><p>来看下面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = !![];</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;abc&quot;</span> == <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> c = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>) | <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> d = parseint(<span class="string">&quot;5&quot;</span> + <span class="string">&quot;0&quot;</span>);</span><br></pre></td></tr></table></figure><p>对于这种情况，有没有方法还原呢，当然有，借助AST，我们可以轻松实现；首先，在等号</p><p>往下这一部分内容暂时省略</p><h3 id="特殊混淆案例的还原"><a href="#特殊混淆案例的还原" class="headerlink" title="特殊混淆案例的还原"></a>特殊混淆案例的还原</h3><p>除了基于JavaScript-obfuscator的混淆方式，还有其他混淆方式，这里介绍几种有代表性的混淆方案，比如AAEncode、JJEncode、JSFuck等</p><h4 id="AAEncode的还原"><a href="#AAEncode的还原" class="headerlink" title="AAEncode的还原"></a>AAEncode的还原</h4><p>AAEncode是一种JavaScript代码混淆算法，利用它，我们可以将JavaScript代码转换成颜文字表示的JavaScript代码</p><p>这里有一个示例网站: <a class="link"   href="https://utf-8.jp/public/aaencode.html%EF%BC%8C%E6%89%93%E5%BC%80%E4%B9%8B%E5%90%8E%E6%88%91%E4%BB%AC%E4%BE%BF%E5%8F%AF%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%9A%84%E6%A0%B7%E4%BE%8B" >https://utf-8.jp/public/aaencode.html，打开之后我们便可看到如下图所示的样例<i class="fas fa-external-link-alt"></i></a>:</p><p>可以看到，一个最简单的Hello World就被转换成了很长的颜文字，代码被混淆得面目全非，但实际上，混淆后的代码其实还是转训了JavaScript语法的，只不过其中一些变量被替换成了表情符的样子:</p><p><a href="https://imgtu.com/i/bKTi4O"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bKTi4O.png"                      alt="bKTi4O.png"                ></a></p><p>这里我们再看一个示例网站: <a class="link"   href="https://spa11.scrape.center/%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AANBA%E7%90%83%E5%91%98%E7%BD%91%E7%AB%99%EF%BC%8C%E5%B1%95%E7%A4%BA%E4%BA%86%E7%90%83%E6%98%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%BD%86%E4%B8%8E%E6%AD%A4%E5%90%8C%E6%97%B6%EF%BC%8C%E6%AF%8F%E4%B8%AA%E7%90%83%E6%98%9F%E7%9A%84%E4%BF%A1%E6%81%AF%E9%9D%A2%E6%9D%BF%E4%B8%8A%E9%83%BD%E5%AF%B9%E5%BA%94%E4%BA%86%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E5%88%B0%E9%9D%A2%E6%9D%BF%E4%B8%8A%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0" >https://spa11.scrape.center/，这是一个NBA球员网站，展示了球星的一些数据，但与此同时，每个球星的信息面板上都对应了一串字符串，鼠标移动到面板上就能看到<i class="fas fa-external-link-alt"></i></a></p><p><a href="https://imgtu.com/i/bKT6M9"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bKT6M9.png"                      alt="bKT6M9.png"                ></a></p><p>实际上，这个字符串就和球星的结果有关，我们来看看怎么回事</p><p>可以看到，index页面引入了一些标准库，包括Vue、ElementUI、Crypto等，正常情况下应该不会出现在这里面:<br><a href="https://imgtu.com/i/bK7OX9"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bK7OX9.png"                      alt="bK7OX9.png"                ></a></p><p>最后，我们发现页面还引入了一个main.js，下面观察该main.js里面都有什么</p><p>可以看到，这里面就是一整行的颜文字:</p><p><a href="https://imgtu.com/i/bKH1Xj"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bKH1Xj.png"                      alt="bKH1Xj.png"                ></a></p><p>出现以上这种状态就是用了AAEncode混淆，我们尝试用左下角的格式化按钮，发现格式化也是无效的，那么这种方式能解嘛，我们看不懂，格式化也无效</p><p>当然是有的，我们试着观察下代码的规律，从代码的前后两端入手，可以观察到开头基本上是<code>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻ </code>，结尾基本上都是<code>(ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);</code>，既然这段JavaScript代码是可以运行的，那么它一定是符合JavaScript语法的，但最后是以一个小括号结尾的，按照JavaScript语法，可以判定前面的整体是一个方法声明，就比如下面这样的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>, a)&#125;)(<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure><p>前面是一个方法的声明，然后整个通过大括号括起来，最后再传入一个参数来调用，运行结果如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p>其实AAEncode的原理也是将前面的内容转化为一个方法声明，然后再传入一个参数来调用，只不过最后传入的参数是一个下划线而已:</p><p><a href="https://imgtu.com/i/bKLNNt"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bKLNNt.png"                      alt="bKLNNt.png"                ></a></p><p>就拿上面<code>(function(a)&#123;console.log(&quot;hello&quot;, a)&#125;(&quot;world&quot;);</code>，这个例子来说，假设我们不知道这个方法声明是怎么写的，我们可以将其输出到控制台上，如下图所示:</p><p><a href="https://imgtu.com/i/bKOGxU"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bKOGxU.png"                      alt="bKOGxU.png"                ></a></p><p>可以看到这个方法的声明就被打印出来了，对于AAEncode来说，我们也可以试着将最后的参数(‘_’)去掉，将前面的代码输出到控制台，看下运行结果，如下图所示:</p><p>不知道我这浏览器可能是太卡了，然后显示不出来，就如上面的例子一样的，可以显示出方法的声明，然后我们使用<code>.toString</code>方法会更直观</p><p>看到解密之后的代码我们就会发现，这里有一个getToken方法，逻辑也十分清晰，就是将球员的名字、生日、身高、体重经过处理之后再进行DES加密，加密秘钥就是key</p><h4 id="JJEncode的还原"><a href="#JJEncode的还原" class="headerlink" title="JJEncode的还原"></a>JJEncode的还原</h4><p>JJEncode也是一种JavaScript代码混淆算法，其原理和AAEncode大同小异，利用它，我们可以将JavaScript代码转换成颜文字表示的JavaScript代码</p><p>这里有一个示例网站: <a class="link"   href="https://utf-8.jp/public/jjencode.html%EF%BC%8C%E5%A4%A7%E5%BC%80%E4%B9%8B%E5%90%8E%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%9A%84%E6%A0%B7%E4%BE%8B" >https://utf-8.jp/public/jjencode.html，大开之后我们可以看到如下图所示的样例<i class="fas fa-external-link-alt"></i></a>:</p><p><a href="https://imgtu.com/i/bKxTts"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bKxTts.png"                      alt="bKxTts.png"                ></a></p><p>可以看到，这个代码包含了很多$，看起来可读性也很差，但实际上它也遵循一定的JavaScript语法</p><p>接下来，我们再看一个示例网站<a class="link"   href="https://spa10.scrape.center/%EF%BC%8C%E7%BD%91%E7%AB%99%E7%9A%84%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F%E5%92%8C%E4%B8%8A%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AE%8C%E5%85%A8%E4%B8%80%E6%A0%B7%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA" >https://spa10.scrape.center/，网站的表现形式和上一个例子完全一样，如下图所示<i class="fas fa-external-link-alt"></i></a>:</p><p><a href="https://imgtu.com/i/bMSpqS"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bMSpqS.png"                      alt="bMSpqS.png"                ></a></p><p>其实，JJEncode混淆的解决方案和AAEncode差不多，因为最后可以看到同样是有一个()，所以我们同样把()去掉，粘贴到控制台中，如下图所示:</p><p><a href="https://imgtu.com/i/bM9u4J"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bM9u4J.png"                      alt="bM9u4J.png"                ></a></p><p>结果也是极其相近，可以看到这也是一个方法</p><p>同样，通过添加toString方法的调用也可以将这个方法转化为字符串输出，如下图所示:</p><p><a href="https://imgtu.com/i/bM9h2n"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bM9h2n.png"                      alt="bM9h2n.png"                ></a></p><p>使用同样的方法，我们也可以对代码进行格式化并还原，再看具体的加密流程就可以了</p><h4 id="JSFuck的还原"><a href="#JSFuck的还原" class="headerlink" title="JSFuck的还原"></a>JSFuck的还原</h4><p>JSFuck也是一种特殊的方案，是基于开源的JSFuck库来实现的，其案例可以参考<a class="link"   href="https://www.jsfuck.com/%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA" >https://www.jsfuck.com/，如下图所示<i class="fas fa-external-link-alt"></i></a>:</p><p><a href="https://imgtu.com/i/bMyLR0"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bMyLR0.png"                      alt="bMyLR0.png"                ></a></p><p>我们可以看到一段alert(1)代码就转变为包含[]、()、+、！的JavaScript代码了；其中JSFuck官方也做了说明，它是基于如下几个等阶变量实现的:</p><ul><li>false   ==&gt;  ![]</li><li>ture    ==&gt;  !![]</li><li>undefined    ==&gt;  <code>[][[]]</code></li><li>NaN   ==&gt;  +[![]]</li><li>0   ==&gt;  +[]</li><li>1   ==&gt;  +!+[]</li><li>2   ==&gt; !+[]+![]</li><li>10   ==&gt;  [+!+[]]+[+[]]</li><li>Array   ==&gt;  []</li><li>Number   ==&gt;  +[]</li><li>String   ==&gt;  []+[]</li><li>Boolean   ==&gt;  ![]</li><li>Function   ==&gt;  <code>[][&quot;filter&quot;]</code></li><li>eval   ==&gt;  <code>[][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</code></li><li>window   ==&gt;  <code>[][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</code></li></ul><p>通过上面变量的组合，再加上一些小括号处理优先级，就可以将任意JavaScript代码转换为我们所看到的混淆JavaScript代码</p><p>但这次不像之前提到的AAEncode和JJEncode那样了，这次混淆代码需要花点时间来解混淆；我们再看一个实例网站: <a class="link"   href="https://spa12.scrape.center/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%92%8C%E5%89%8D%E9%9D%A2%E7%9A%84%E7%9B%B8%E6%AF%94%EF%BC%8C%E4%B9%9F%E6%98%AF%E5%8F%AA%E6%9C%89main.js%E4%B8%8D%E5%90%8C%EF%BC%8C%E5%85%B6%E5%86%85%E5%AE%B9%E6%98%AF%E7%BB%8F%E8%BF%87JSFuck%E6%B7%B7%E6%B7%86%E5%BE%97%E5%88%B0%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA" >https://spa12.scrape.center/，这个网站和前面的相比，也是只有main.js不同，其内容是经过JSFuck混淆得到，如下图所示<i class="fas fa-external-link-alt"></i></a>:</p><p><a href="https://imgtu.com/i/bMgLRI"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bMgLRI.png"                      alt="bMgLRI.png"                ></a></p><p>但是观察整个代码，发现最后一个不再是一个小括号了，内容如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]])())</span><br></pre></td></tr></table></figure><p>可以看到，这里最后的小括号后面还跟了个小阔号，这样我们就没法像AAEencode和JJEncode那样，将最后的小括号去掉了</p><p>那这怎么办呢，我们可以稍微退一步，看一下最后的一个右括号匹配的左括号是哪个，首先可以对代码进行格式化，此时可以借助Beautifier工具: <a class="link"   href="https://beautifier.io/%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BBBeautify" >https://beautifier.io/，然后点击Beautify<i class="fas fa-external-link-alt"></i></a> Code，就会看到格式化好的代码，如下图所示:</p><p><a href="https://imgtu.com/i/bM2TXV"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/28/bM2TXV.png"                      alt="bM2TXV.png"                ></a></p><p>由于小括号和中括号特别多，肉眼非常难观察出其中的规律，这时候可以将格式化后的代码粘贴到IDE中，借助IDE找到括号的匹配规律；</p><p>这里我们可以选用VS Code，或者其他都可以，比如Pycharm，然后新建一个JavaScript文件，如main.js，将代码粘贴进去，然后将光标放在最后一个括号的位置，这里我用Pycharm就很快找到了位置，如下图所示:</p><p><a href="https://imgtu.com/i/bQEcuj"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQEcuj.png"                      alt="bQEcuj.png"                ></a></p><p>我们将这两个括号之间的内容复制出来，粘贴到控制台，如下图所示:</p><p>图片这里不展示</p><p>不知道这里为啥迟迟不出来结果，可能是太卡了，我们粘贴好代码之后就会出现一大串字符串，然后这个时候我们已经成功了一半了，那么剩下的代码是什么呢，我们猜测应该是个方法的声明，那么这个字符串就是参数嘛，我们把剩下的代码也单独粘贴到控制台，会发现是个eval方法，由于浏览器卡住了，这里我也不放图片了</p><p>eval方法是JavaScript中的一个原生方法，下面给出一个示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;hello world&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果就是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p>所以第一部分我们粘贴进控制台的就是方法的参数，把它传给eval方法，自然就可以执行对应的逻辑了</p><h3 id="WebAssembly案例分析和爬取实战"><a href="#WebAssembly案例分析和爬取实战" class="headerlink" title="WebAssembly案例分析和爬取实战"></a>WebAssembly案例分析和爬取实战</h3><p>WebAssembly是一种可以使用非JavaScript语言编写代码并且能在浏览器上运行的技术方案，前面我们也简单介绍过了，借助Emscripten编译工具，我们能将C/C++文件转成wasm格式的文件，JavaScript可以直接调用该文件执行其中的方法</p><p>这样做的好处如下:</p><ul><li>一些核心逻辑(比如API参数的加密逻辑)使用C/C++实现，这样这些逻辑就可以“隐藏在编译生成的wasm文件中”，其逆向难度比JavaScript更大</li><li>一些逻辑是基于C/C++编写的，有更高的执行效率，这使得以各种语言编写的代码都可以以接近原生的速度在web中运行</li></ul><p>对于这种类型的网站，一般我们会看到网站会加载一些wasm后缀的文件，这就是WebAssembly技术常见的呈现结果，即原生代码被编译成了wasm后缀的文件，JavaScript通过调用wasm文件得到对应的计算结果，然后配合其他JavaScript代码实现页面数据的加载和页面的渲染</p><h4 id="案例介绍-2"><a href="#案例介绍-2" class="headerlink" title="案例介绍"></a>案例介绍</h4><p>网址: <a class="link"   href="https://spa14.scrape.center/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E8%A1%A8%E9%9D%A2%E4%B8%8A%E5%92%8C%E4%B9%8B%E5%89%8D%E9%9D%9E%E5%B8%B8%E7%B1%BB%E4%BC%BC%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%9E%E9%99%85%E4%B8%8A%E5%85%B6API%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8F%82%E6%95%B0%E6%98%AF%E9%80%9A%E8%BF%87WebAssembly%E5%AE%9E%E7%8E%B0%E7%9A%84" >https://spa14.scrape.center/，这个网站表面上和之前非常类似，但是实际上其API的加密参数是通过WebAssembly实现的<i class="fas fa-external-link-alt"></i></a></p><p>首先，我们还是像之前一样，加载首页，然后通过Network面板分析Ajax请求，如下图所示:</p><p><a href="https://imgtu.com/i/bQuMEd"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQuMEd.png"                      alt="bQuMEd.png"                ></a></p><p>很明显，加密参数是sign，然后我们开始打Ajax断点，然后我们会看到在一个send方法停了下来，然后我们在调用栈中找到onFetchData方法并点击，然后找到JavaScript代码位置:</p><p><a href="https://imgtu.com/i/bQuTxK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQuTxK.png"                      alt="bQuTxK.png"                ></a></p><p>和之前的案例类似，params的参数有三个，limit、offset、sign；这和之前的Ajax请求一致；</p><p>这里关键的参数就是sign了，可以看到它的值是用变量e表示的，而e的生成代码就在上面，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = (<span class="built_in">this</span>.page - <span class="number">1</span>) * <span class="built_in">this</span>.limit</span><br><span class="line">                      , e = <span class="built_in">this</span>.$wasm.asm.encrypt(n, <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.round((<span class="keyword">new</span> <span class="built_in">Date</span>).getTime() / <span class="number">1e3</span>).toString()));</span><br></pre></td></tr></table></figure><p>可以看到，它通过调用this.$wasm.asm对象的encrypt方法传入了n和一个时间戳构造出来了；接下来，我们进一步在此处调试下，在2100行添加断点，如下图所示:</p><p>重新刷新页面，可以发现页面运行到该断点的位置并停下来了，如下图所示:</p><p><a href="https://imgtu.com/i/bQK4eg"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQK4eg.png"                      alt="bQK4eg.png"                ></a></p><p>这相当于JavaScript上下文处于onFetchData方法内部，所以我们在这里可以方法内部的所有变量，比如this、this.$wasm等</p><p>接下来，我们就在watch面板中添加一个变量this.$wasm，先看看它是什么对象，如下图所示:</p><p><a href="https://imgtu.com/i/bQM5jK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQM5jK.png"                      alt="bQM5jK.png"                ></a></p><p>可以看到，这个this.$wasm对象里面定义了好多对象和方法，其中就有asm对象，因为代码中asm对象调用了encrypt对象来产生sign，所以我们进一步看看asm对象、encrypt对象都是什么:</p><p><a href="https://imgtu.com/i/bQQ3CR"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQQ3CR.png"                      alt="bQQ3CR.png"                ></a></p><p>最主要我们看看encrypt方法指向了一个方法，它的FunctionLocation指向了另外一个位置，名称是<code>Wasm.wasm:0xd9</code>，我们来看看里面是个什么逻辑，所以我们直接点击进入:</p><p><a href="https://imgtu.com/i/bQl8oQ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQl8oQ.png"                      alt="bQl8oQ.png"                ></a></p><p>我们进入了一个似乎不是JavaScript代码的地方，在文件中我们可以看到encrypt的字样，其代码定义如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(func $encrypt (;<span class="number">4</span>;) (<span class="keyword">export</span> <span class="string">&quot;encrypt&quot;</span>) (param $var0 i32) (param $var1 i32) (result i32)</span><br><span class="line">    local.get $var0</span><br><span class="line">    local.get $var1</span><br><span class="line">    i32.const <span class="number">3</span></span><br><span class="line">    i32.div_s</span><br><span class="line">    i32.add</span><br><span class="line">    i32.const <span class="number">16358</span></span><br><span class="line">    i32.add</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>以上代码就有点汇编语言的味道了</p><p>这其实就是wasm文件，会发现这里面的逻辑其实原本是用C++编写的，通过Emscripten转换成wasm文件，就成了现在这个样子</p><p>这时候我们可以找下Network请求，搜索wasm后缀的文件，发现只有这一个</p><p><a href="https://imgtu.com/i/bQ3mKP"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQ3mKP.png"                      alt="bQ3mKP.png"                ></a></p><p>到了这里，wasm文件已经完全看不懂了，我们该怎么办呢</p><p>有两种方法:</p><ul><li>一种是直接把wasm文件反编译成C++代码，但是这种难度很大</li><li>拿到wasm文件，然后通过Python模拟执行的方式调用wasm文件，模拟调用它的encrypt方法，传入相应的参数即可</li></ul><p>本部分我们来看第二种方法</p><h4 id="模拟执行-1"><a href="#模拟执行-1" class="headerlink" title="模拟执行"></a>模拟执行</h4><p>首先我们要把wasm文件下载下来，地址为: <a class="link"   href="https://spa14.scrape.center/js/Wasm.wasm%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BF%9D%E5%AD%98%E4%B8%BAWasm.wasm%E6%96%87%E4%BB%B6" >https://spa14.scrape.center/js/Wasm.wasm，将其保存为Wasm.wasm文件<i class="fas fa-external-link-alt"></i></a></p><p>要使用Python模拟执行wasm，可以使用俩个Python库，一个叫做pywasm库，另一个叫做wasmer-python，前者我们使用更加简单，后者功能更加强大；我们使用任何其中任何一个库都可以完成wasm文件的模拟，下面我们分别予以介绍</p><h5 id="pywasm"><a href="#pywasm" class="headerlink" title="pywasm"></a>pywasm</h5><p>这个库比较简单，其主要功能就是加载一个wasm文件，然后用Python执行，安装命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pywasm</span><br></pre></td></tr></table></figure><p>安装完成之后，我们可以使用如下方式来加载wasm文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywasm</span><br><span class="line"></span><br><span class="line">runtime = pywasm.load(<span class="string">&#x27;./wasm.wasm&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(runtime)</span><br></pre></td></tr></table></figure><p>这里我们调用了pywasm的load方法，直接将wasm文件的路径传入，实现了wasm文件的读取，输出结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pywasm.Runtime <span class="built_in">object</span> at <span class="number">0x0000000003A0DA88</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看到，返回结果就是一个pywasm.Runtime类型的对象，有了这个Runtime对象之后，我们就可以调用它的exec方法来模拟执行Wasm里面的方法</p><p>比如，在网页中我们可以看到它执行了encrypt方法，并传入了两个参数，我们也来试一下，要模拟调用wasm方法，只需要调用执行Runtime对象的exec方法并传入对应的方法名和参数内容即可，我们可以将代码改写如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywasm</span><br><span class="line"></span><br><span class="line">runtime = pywasm.load(<span class="string">&#x27;./wasm.wasm&#x27;</span>)</span><br><span class="line">result = runtime.<span class="built_in">exec</span>(<span class="string">&#x27;encrypt&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>这里我们调用了exec方法，第一个参数就是要调用的wasm中的方法名，这里我们传入字符串encrypt，第二个参数是一个列表，代表encrypt方法所接收的参数，如果是两个，那么列表的长度就是2，参数和列表一一对应即可</p><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16359</span></span><br></pre></td></tr></table></figure><p>可以看到，我们调用成功了</p><p>但是以上结果并不是我们想要的，因为这里传入的参数其实是我们自定义的；要真正模拟网站的Ajax请求，就要用到里面的真实参数</p><p>通过分析逻辑，我们知道传入的参数其实一个是offset，另一个是时间戳，可以查看上面的截图；其中后者的实现是这样的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.round((<span class="keyword">new</span> <span class="built_in">Date</span>).getTime() / <span class="number">1e3</span>.toString())</span><br></pre></td></tr></table></figure><p>我们把它复制到到控制台中看看是什么结果:</p><p><a href="https://imgtu.com/i/bQtKhD"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQtKhD.png"                      alt="bQtKhD.png"                ></a></p><p>输出的其实是一个10位的时间戳，我们使用Python同样可以实现这个效果，可以这样写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">int</span>(time.time())</span><br></pre></td></tr></table></figure><p>最终，我们可以将爬虫逻辑实现，具体如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywasm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">Total_page = <span class="number">10</span></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;98&quot;, &quot;Google Chrome&quot;;v=&quot;98&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">Base_url = <span class="string">&quot;https://spa14.scrape.center/api/movie/?&quot;</span></span><br><span class="line">runtime = pywasm.load(<span class="string">&quot;./Wasm.wasm&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Total_page):</span><br><span class="line">    offset = i * <span class="number">10</span></span><br><span class="line">    sign = runtime.<span class="built_in">exec</span>(<span class="string">&#x27;encrypt&#x27;</span>, [offset, <span class="built_in">int</span>(time.time())])</span><br><span class="line">    url = <span class="string">f&#x27;<span class="subst">&#123;Base_url&#125;</span>limit=10&amp;offset=<span class="subst">&#123;offset&#125;</span>&amp;sign=<span class="subst">&#123;sign&#125;</span>&#x27;</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;霸王别姬&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Farewell My Concubine&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-07-26&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">171</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国内地&#x27;</span>, <span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;这个杀手不太冷&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Léon&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1994-09-14&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">110</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;法国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖申克的救赎&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Shawshank Redemption&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1994-09-10&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">142</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;泰坦尼克号&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Titanic&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;灾难&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1998-04-03&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">194</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;罗马假日&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Roman Holiday&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/289f98ceaa8a0ae737d3dc01cd05ab052213631.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1953-08-20&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;唐伯虎点秋香&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Flirting Scholar&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;古装&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-07-01&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">102</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;乱世佳人&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Gone with the Wind&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/223c3e186db3ab4ea3bb14508c709400427933.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1939-12-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">238</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;喜剧之王&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The King of Comedy&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/1f0d671f6a37f9d7b015e4682b8b113e174332.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1999-02-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">85</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;楚门的世界&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Truman Show&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/8959888ee0c399b0fe53a714bc8a5a17460048.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">103</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;狮子王&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Lion King&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/27b76fe6cf3903f3d74963f70786001e1438406.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;歌舞&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1995-07-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;V字仇杀队&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;V for Vendetta&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/06ec3c1c647942b1e40bca84036014e9490863.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>, <span class="string">&#x27;惊悚&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2005-12-11&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">132</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;少年派的奇幻漂流&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Life of Pi&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/34998e31c6d07475f1add6b8b16fd21d192579.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2012-11-22&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">127</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;中国台湾&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;加拿大&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;美丽心灵&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;A Beautiful Mind&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/7b7d1f8aa36d7a15463ce6942708a1a7265296.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;传记&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2001-12-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">135</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;初恋这件小事&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;สิ่งเล็กเล็กที่เรียกว่า...รัก&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/05bc2f0ccf97aacfa64fcac4f237cf8082385.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2012-06-05&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;泰国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;借东西的小人阿莉埃蒂&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;借りぐらしのアリエッティ&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/640cc32445df972b066c9a04b194da141104515.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2010-07-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">94</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;一一&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Yi yi: A One and a Two&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/6cb23356f9d8e0b506349561c633310d102189.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2000-05-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">173</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国台湾&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;美丽人生&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;La vita è bella&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/580d81a2c78bf204f45323ddb4244b6c6821175.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;战争&#x27;</span>, <span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2020-01-03&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">116</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;意大利&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;海上钢琴师&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&quot;La leggenda del pianista sull&#x27;oceano&quot;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/609e45bd40346eb8b927381be8fb27a61760914.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;音乐&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2019-11-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">126</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;意大利&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;千与千寻&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;千と千尋の神隠し&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/30b20139e68c46d02e0893277d633b701292458.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2019-06-21&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;迁徙的鸟&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Travelling Birds&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/a1634f4e49c8517ae0a3e4adcac6b0dc43994.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;纪录片&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2001-12-12&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;意大利&#x27;</span>, <span class="string">&#x27;西班牙&#x27;</span>, <span class="string">&#x27;瑞士&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;黄金三镖客&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Il buono, il brutto, il cattivo.&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/cd18ed2c5cda9e71e17e5e6ef61ced172912303.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;西部&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1966-12-23&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">161</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;意大利&#x27;</span>, <span class="string">&#x27;西班牙&#x27;</span>, <span class="string">&#x27;西德&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;海洋&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Océans&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/a19a7f64a10e133b68de87d2f3bc46f3111417.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;纪录片&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-08-12&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">104</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;瑞士&#x27;</span>, <span class="string">&#x27;西班牙&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;阿联酋&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;我爱你&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;그대를 사랑합니다&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/ed50b58bf636d207c56989872a91f4cf305138.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-02-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;阿飞正传&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Days of Being Wild&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/85215b28d568ea8e2c97766edd95f890210522.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2018-06-25&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">94</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">36</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;7号房的礼物&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;7번방의 선물&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/a53a0200eba15ba483c905c872db9bf4331099.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2013-01-23&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">127</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;爱·回家&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;집으로...&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/de1142a5dceb901eb939eb0bcfc2f88470909.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2002-04-05&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">26</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;龙猫&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;となりのトトロ&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/c304c687e287c7c2f9e22cf78257872d277201.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2018-12-14&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">86</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.1</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">27</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;七武士&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;七人の侍&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/4ffca83fd972f71e291f8ea8d78a4b58594878.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1954-04-26&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">207</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;美国往事&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Once Upon a Time in America&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/92198a6fc8c3f5d13aa1bdf203572c0f99438.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2015-04-23&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">229</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;意大利&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">29</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;完美的世界&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;A Perfect World&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/30310858fdab34c7a17cfd7ec8ad8bfc112201.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-11-24&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">138</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;上帝之城&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Cidade de Deus&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/b553d13f30100db731ab6cf45668e52d94703.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">130</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;巴西&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">31</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;辩护人&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;변호인&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/1433d81b10d116239dbbf02a06ac3c19265682.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2013-12-18&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">127</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;忠犬八公物语&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;ハチ公物語&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/2d42e00d7ee59ff5bd574f93b8558aa726665.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1987-08-01&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">107</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;海豚湾&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Cove&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/eb2ea56996f21e7fb47b1a0736c7f177258901.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;纪录片&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2009-07-31&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">92</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">34</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;英雄本色&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;A Better Tomorrow&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/3e5f5f3aa4b7e5576521e26c2c7c894d253975.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2017-11-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">35</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;恐怖直播&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;더 테러 라이브&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/1da0af2570fe697d38c4a37fdfded19b254936.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;悬疑&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2013-07-31&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">97</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">37</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;窃听风暴&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Das Leben der Anderen&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/3985eaf3858bea0f2a3d966bf7ee2103178217.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;悬疑&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2006-03-23&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">137</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;德国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">38</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;时空恋旅人&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;About Time&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/6d8491386d07cda91967a6fbbd0d0788294693.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2013-09-04&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">39</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;穿条纹睡衣的男孩&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Boy in the Striped Pajamas&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/d5970e36c8868a4b746c80f3b3f8a404174615.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2008-08-28&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">94</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;教父&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Godfather&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/1199dc6273680f175fd9b06c9c36d08a219658.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2015-04-18&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">175</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">41</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;萤火之森&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;蛍火の杜へ&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/4c55f3bf5fa9660db3cb7014651a0950267034.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-09-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">42</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;素媛&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;소원&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/19653e8af59cf473cd40f9ccc0658d93692304.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2013-10-02&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">43</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小鞋子&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;بچههای آسمان&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/135c612860fae899df2220149664d97a173555.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;伊朗&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">44</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;熔炉&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;도가니&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/2a0783b4fd95566568f24adfad2181bb5392280.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-09-22&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;大话西游之大圣娶亲&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;A Chinese Odyssey Part Two - Cinderella&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/moviemachine/508056769092059fe43a611b949f27d14863831.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2014-10-24&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">110</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>, <span class="string">&#x27;中国大陆&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">46</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;新龙门客栈&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;New Dragon Gate Inn&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/7833126c8c21a11571bb52fbdece0acb811449.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;武侠&#x27;</span>, <span class="string">&#x27;古装&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2012-02-24&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>, <span class="string">&#x27;中国大陆&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">47</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;触不可及&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Intouchables&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/1e700e53e4fe29dd5942381bb353c8532239179.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-11-02&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">112</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;法国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">48</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;钢琴家&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Pianist&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/bcbe59fc51580317adf94537a61a1a26142090.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;音乐&#x27;</span>, <span class="string">&#x27;传记&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2002-05-24&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">150</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;波兰&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">49</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;本杰明·巴顿奇事&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Curious Case of Benjamin Button&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/2526f77c650bf7cf3d5ee2dccdeac332244951.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2008-12-25&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">166</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;倩女幽魂&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;A Chinese Ghost Story&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/96d98200d2afb4b87ff189f9c15b6545568339.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;武侠&#x27;</span>, <span class="string">&#x27;古装&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-04-30&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">51</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;哈利·波特与死亡圣器（下）&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Harry Potter and the Deathly Hallows: Part 2&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/bb0eca029cd25329776a4549b3fbe262924727.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;悬疑&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-08-04&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">130</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">52</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;甜蜜蜜&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Comrades: Almost a Love Story&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/0b0d45b58946078dd24d4945dd6be3b51329411.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2015-02-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">53</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;蝙蝠侠：黑暗骑士崛起&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Dark Knight Rises&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/f7f4b4099773268f8290ed033f49dc01377512.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>, <span class="string">&#x27;惊悚&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2012-08-27&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">165</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">54</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;鬼子来了&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Devils on the Doorstep&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/34f9202c5e823f490ffec4c69d5d0028137395.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2000-05-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">139</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国大陆&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">55</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;无敌破坏王&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Wreck-It Ralph&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/70a574550c4bb928dcc6a40641294785150838.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2012-11-06&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">56</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;致命魔术&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Prestige&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/83df1c541e6e0696e67ce7da81cb1e1a251258.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;悬疑&#x27;</span>, <span class="string">&#x27;惊悚&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2006-10-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">130</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">57</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;神偷奶爸&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Despicable Me&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/85c2bfba6025bfbfb53291ae5924c215308805.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2010-06-20&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">58</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;断背山&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Brokeback Mountain&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/e71affe126eeb4f8bfcc738cbddeebc8288766.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2005-09-02&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">134</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;加拿大&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">59</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;怦然心动&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Flipped&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/15f1ac49b6d1ff7b71207672993ed6901536456.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2010-07-26&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;驯龙高手&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;How to Train Your Dragon&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/b0d97e4158b47d653d7a81d66f7dd3092146907.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2010-05-14&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;飞屋环游记&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Up&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/f9356a376358f1576da3263d998eca7a94624.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2009-08-04&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">96</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">62</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;黑客帝国3：矩阵革命&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Matrix Revolutions&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/2e383b5f5f306f10f9f26d9f1c28cf1d825537.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2003-11-05&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">129</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.8</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;澳大利亚&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">63</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;速度与激情5&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Fast Five&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/845ce32778a1b3f258de089f91a3979b5766154.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-05-12&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">130</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">64</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;勇敢的心&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Braveheart&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/f8e9d5a90224746d15dfdbd53d4fae3d209420.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;传记&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1995-05-18&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">177</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;三傻大闹宝莱坞&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;3 Idiots&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/ca4a128a5a54d5b5e35ceba622636c831810197.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;歌舞&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2011-12-08&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">171</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;印度&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">66</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;闻香识女人&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Scent of a Woman&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/8d7b0b902afd4ec1a3dd7a9c6149463c187734.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1992-12-23&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">157</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">67</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;末代皇帝&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Last Emperor&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/21b9211eb1094af360842472018db634286646.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;传记&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1987-10-23&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">163</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;英国&#x27;</span>, <span class="string">&#x27;意大利&#x27;</span>, <span class="string">&#x27;中国大陆&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">68</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;风之谷&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;風の谷のナウシカ&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/4f9638ba234c3fb673f23a09968db875371576.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">117</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">69</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;大话西游之月光宝盒&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;A Chinese Odyssey&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/396266d8b711958841b3536a3fa7b868211445.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;古装&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2014-10-24&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">87</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>, <span class="string">&#x27;中国大陆&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;放牛班的春天&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Les choristes&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/70de97ebb6b5251ecb7c3f6d7a782a7f189340.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;音乐&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2004-10-16&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">97</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>, <span class="string">&#x27;瑞士&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">71</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;当幸福来敲门&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Pursuit of Happyness&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/7d1d85610651dbe1c8687781a87d1008184950.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>, <span class="string">&#x27;传记&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2008-01-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">117</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">72</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;幽灵公主&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;もののけ姫&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/a08f65e6cb50fab32df5da69ff116f593095363.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1998-05-01&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">134</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">73</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;十二怒汉&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;12 Angry Men&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/df15efd261060d3094a73ef679888d4f238149.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1957-04-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">96</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">74</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;搏击俱乐部&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Fight Club&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/b3defc07dfaa1b6f5b74852ce38a3f8f242792.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;悬疑&#x27;</span>, <span class="string">&#x27;惊悚&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1999-09-10&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">139</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;德国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;疯狂原始人&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Croods&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/bc022b86345c643ca21d759166f77a553679589.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2013-04-20&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">76</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;阿凡达&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Avatar&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/e540384dc6c9f63bdb27cc554588a77f44305.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2010-01-04&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">162</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">77</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;哈尔的移动城堡&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;ハウルの動く城&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/0127b451d5b8f0679c6f81c8ed414bb2432442.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2004-09-05&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">119</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">78</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;盗梦空间&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Inception&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/d40efe1183f29d5900f5c60be3c8a89d339225.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>, <span class="string">&#x27;悬疑&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2010-09-01&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">148</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">79</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;忠犬八公的故事&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&quot;Hachi: A Dog&#x27;s Tale&quot;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/5f0a709378d6b567807aa9685610f818282136.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2009-06-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">93</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;拯救大兵瑞恩&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Saving Private Ryan&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/a2a287c77415dc1f85b04d288f7d63ab1089754.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1998-11-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">169</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">8.9</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">81</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;活着&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;To Live&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/4c41068ef7608c1d4fbfbe6016e589f7204391.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;家庭&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1994-05-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">132</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国大陆&#x27;</span>, <span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">82</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;机器人总动员&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;WALL·E&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/267dd2483f0fb57081474c00fbea38451415571.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>, <span class="string">&#x27;动画&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2008-06-27&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">83</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;天堂电影院&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Nuovo Cinema Paradiso&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/76fc92cfa6c8f2959431b8aa604ef7ae126414.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1988-11-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">155</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;意大利&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">84</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;指环王2：双塔奇兵&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Lord of the Rings: The Two Towers&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/02bb9fd161c05bad6089133098efcdb5546589.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2003-04-25&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">179</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;新西兰&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">85</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;指环王1：护戒使者&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Lord of the Rings: The Fellowship of the Ring&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/dd08154878aac7c8c649fe3eeb8ccd0a2498277.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2002-04-04&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">178</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;新西兰&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">86</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;射雕英雄传之东成西就&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Eagle Shooting Heroes&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/86c5190ba1d1236093c13f2fe9ed8dd4150050.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;武侠&#x27;</span>, <span class="string">&#x27;古装&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-02-05&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">113</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">87</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;蝙蝠侠：黑暗骑士&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Dark Knight&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/09658109acfea0e248a63932337d8e6a4268980.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>, <span class="string">&#x27;惊悚&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2008-07-14&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">152</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;无间道&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Infernal Affairs&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/606de8f394d40dbcbb9b87943fec71a2130408.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;悬疑&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2003-09-05&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;教父2&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Godfather: Part Ⅱ&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/bb1dee5e0b25889a2410211c1d5010ae190824.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1974-12-12&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">202</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;加勒比海盗&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Pirates of the Caribbean: The Curse of the Black Pearl&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/b05b94b28eca53f325ae8d807fcd4ce01798036.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2003-11-21&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">143</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">91</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;哈利·波特与魔法石&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&quot;Harry Potter and the Sorcerer&#x27;s Stone&quot;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/d66b56b77b55aa3da5987b68948444c9106742.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2002-01-26&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">152</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;英国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">92</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;指环王3：王者无敌&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Lord of the Rings: The Return of the King&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/932bdfbef5be3543e6b136246aeb99b8123736.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2004-03-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;新西兰&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">93</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;黑客帝国&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Matrix&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/ad974d3527879f00be2eec29135118163728582.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;2000-01-14&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">136</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;澳大利亚&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">94</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;剪刀手爱德华&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Edward Scissorhands&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/6a964e9cee699267053bd6a4bf6f2671195394.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1990-12-06&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">105</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;春光乍泄&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Happy Together&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/ae7245920d95c03765fe1615f3a1fe3865785.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1997-05-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">96</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>, <span class="string">&#x27;日本&#x27;</span>, <span class="string">&#x27;韩国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">96</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;大闹天宫&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Monkey King&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/14a7b337e8063e3ce05a5993ed80176b74208.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1965-12-31&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">114</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国大陆&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">97</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;天空之城&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;天空の城ラピュタ&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/ba1ed511668402605ed369350ab779d6319397.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;奇幻&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1992-05-01&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;日本&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;音乐之声&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Sound of Music&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/ef6d7e040278f3d727306745e8df1af5246411.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;歌舞&#x27;</span>, <span class="string">&#x27;传记&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1965-03-02&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">174</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;辛德勒的名单&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&quot;Schindler&#x27;s List&quot;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/b0d986a8bf89278afbb19f6abaef70f31206570.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-11-30&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">195</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;魂断蓝桥&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Waterloo Bridge&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/58782fa5439c25d764713f711ebecd1e201941.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1940-05-17&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">108</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Ajax请求被成功模拟了，成功爬取到了结果</p><h5 id="wasmer-python"><a href="#wasmer-python" class="headerlink" title="wasmer-python"></a>wasmer-python</h5><p>除了使用pywasm库，我们还可以使用另一个库wasmer-python来完成同样的操作；相比于pywasm，wasmer-python的功能更加强大，它提供了更为底层的API，如果遇到更为复杂的wasm调用情形，推荐使用wasmer-python</p><p>要安装wasmer-python这个库，依然使用pip3即可，命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install wasmer-python</span><br></pre></td></tr></table></figure><p>要读取wasm文件，我们需要先声明一个Store对象，然后将wasm对象转化为Module对象，再将其转化为Instance对象，写法类似如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wasmer <span class="keyword">import</span> engine, store, Module, Instance</span><br><span class="line"><span class="keyword">from</span> wasmer_compiler_cranelift <span class="keyword">import</span> Compiler</span><br><span class="line"></span><br><span class="line">store = Store(engine.JIT(Compiler))</span><br><span class="line">module = Module(store, <span class="built_in">open</span>(<span class="string">&#x27;Wasm.wasm&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">instance = Intance(module)</span><br><span class="line">result = instance.exports.encrypt(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>这个包不知道咋的安装不上，在pypi中也没看到这个包所以以上代码不提供效果图了</p><p>然后其实往下也是和上面使用pywasm包差不多</p><h3 id="JavaScript逆向技巧总结"><a href="#JavaScript逆向技巧总结" class="headerlink" title="JavaScript逆向技巧总结"></a>JavaScript逆向技巧总结</h3><p>前面我们已经学过了不少JavaScript逆向相关的知识，包括浏览器调试，、Hook、AST、无限debugger的绕过以及JavaScript的模拟调用等，这些知识都比较松散，有时候大家学完了可能觉得没有形成一个知识体系，或者说没有一个常规的“套路”来应对一些JavaScript逆向的处理流程</p><p>下面，我们就对前面的知识点做一个串联和总结，总结出JavaScript逆向过程中常用的一个流程，这个流程适用于大多数JavaScript逆向过程；大家熟练运用之后，可以在不同环境下运用不同的技巧来进行JavaScript逆向操作</p><p>总的来说，JavaScript逆向可以分为三大部分: 寻找入口、调试分析和模拟执行；下面我们来分别介绍:</p><ul><li>寻找入口: 这是非常关键的一步，逆向在大部分情况下就是找一些加密参数到底是怎么来的，比如一个请求中token、sign等参数到底是在哪里构造的，这个关键逻辑可能写在某个关键的方法里面或者隐藏在某个关键变量里面；一个网站加载了很多JavaScript文件，那么怎么从这么多JavaScript代码里面找到关键的位置，那就是一个关键问题；这就是寻找入口；</li><li>调试分析: 找到入口后，比如说我们定位到某个参数可能是在某个方法里面执行了的，那么里面的逻辑究竟是怎样的，里面调用了多少加密算法，经过了多少变量赋值和转换等，这些我们需要先把整体的思路搞清楚，以便于我们后面进行模拟调用或者逻辑改写；在这个过程中，我们主要借助于浏览器的调试工具进行断点调试分析，或者借助于一些反混淆工具进行代码的反混淆等</li><li>模拟执行: 经过调试分析之后，我们差不多已经搞清楚整个逻辑了，但我们的最终目的还是写爬虫，怎么爬到数据才是根本，因此这里就需要对整个加密过程进行逻辑复写或者模拟执行，以把整个加密流程模拟出来，比如输入是一些已知量，调用之后我们就可以拿到一些token内容，再用这个token来进行数据爬取即可</li></ul><h4 id="寻找入口"><a href="#寻找入口" class="headerlink" title="寻找入口"></a>寻找入口</h4><p>首先，我们来看下怎么寻找入口，其中包括查看请求、搜索参数、分析发起调试、断点、Hook等操作，下面我们来分别介绍下:</p><h5 id="查看请求"><a href="#查看请求" class="headerlink" title="查看请求"></a>查看请求</h5><p>一般来说，我们都是先分析想要的数据到底是从哪里来的；比如说对于示例网站<a class="link"   href="https://spa6.scrape.center/%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%A6%96%E9%A1%B5%E6%9C%89%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E2%80%9C%E9%9C%B8%E7%8E%8B%E5%88%AB%E5%A7%AC%E2%80%9D%E3%80%81%E2%80%9C%E8%BF%99%E4%B8%AA%E6%9D%80%E6%89%8B%E4%B8%8D%E5%A4%AA%E5%86%B7%E2%80%9D%E7%AD%89%EF%BC%8C%E8%BF%99%E4%BA%9B%E6%95%B0%E6%8D%AE%E8%82%AF%E5%AE%9A%E6%98%AF%E6%9F%90%E4%B8%AA%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E7%9A%84%EF%BC%8C%E9%82%A3%E5%AE%83%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%8E%E5%93%AA%E4%B8%AA%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E7%9A%84%E5%91%A2?%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%85%88%E5%B0%9D%E8%AF%95%E6%90%9C%E7%B4%A2%E4%B8%8B" >https://spa6.scrape.center/，我们可以看到首页有一条数据，如“霸王别姬”、“这个杀手不太冷”等，这些数据肯定是某个请求返回的，那它究竟是从哪个请求返回的呢?我们可以先尝试搜索下<i class="fas fa-external-link-alt"></i></a></p><p>打开浏览器开发者工具，打开Network面板，然后点击搜索按钮，比如这里我们就搜索“霸王别姬”这四个字，如下图所示:</p><p><a href="https://imgtu.com/i/bQvvWR"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQvvWR.png"                      alt="bQvvWR.png"                ></a></p><p>此时我们可以看到对应的搜索结果，然后点击搜索到的结果，我们就可以定位到对应的响应结果的位置，如下图所示:</p><p><a href="https://imgtu.com/i/bQvvWR"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQvvWR.png"                      alt="bQvvWR.png"                ></a></p><p>找到对应的相应之后，我们也就可以顺便找到是哪个请求发起的了，如下图所示:</p><p><a href="https://imgtu.com/i/bQzQjx"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQzQjx.png"                      alt="bQzQjx.png"                ></a></p><p>然后我们可以看到请求参数有一个token加密参数:</p><p><a href="https://imgtu.com/i/bQzR8s"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bQzR8s.png"                      alt="bQzR8s.png"                ></a></p><p>那么到这里我们就顺利找到想要的数据所对应的请求位置了，可以看到这是一个GET请求，同时还有一个token参数，我们可以在后面继续分析</p><p>一般来说，我们可以通过这种方法来尝试寻找最初的突破口；如果这个请求带有加密参数，就顺着继续找下这个参数究竟是在哪里生成的，如果这个请求对应的参数甚至都没有什么加密参数，那么这个请求都可以直接模拟爬取了</p><h5 id="搜索参数"><a href="#搜索参数" class="headerlink" title="搜索参数"></a>搜索参数</h5><p>在上一步中，我们找到了最初的突破口，也就是关键请求是怎么发起的，带有什么加密参数；比如在上面的例子中，我们发现这里有一个关键的加密参数token，那这又是怎么构造出来的呢</p><p>一种最简单高效的方法就是直接进行全局搜索；一般来说，参数名大多数情况下就是一个普通的字符串，比如这里就叫做token，那么这个字符串肯定隐藏在某个JavaScript文件里面 ，我们可以尝试进行搜索，也可以加冒号、空格、引号等来配合搜索；因为一般来说这个参数通常会配合一些符号一起出现，比如说我们可以搜索token、token: 、token :、”token”:等</p><p>在哪里搜索呢，我们可以直接利用浏览器调试面板的搜索功能，如下图所示:</p><p><a href="https://imgtu.com/i/blpWn0"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blpWn0.png"                      alt="blpWn0.png"                ></a></p><p><a href="https://imgtu.com/i/blpINF"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blpINF.png"                      alt="blpINF.png"                ></a></p><p>这是一个资源搜索的入口，比如可以搜索下载下来的JavaScript文件中的内容，我们还可以勾选区分大小写，当我们要搜索大写的时候就可以勾选，不然大小写都会被选出来；这里我们输入token来进行搜索，结果如下图所示:</p><p><a href="https://imgtu.com/i/bl9Qvn"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bl9Qvn.png"                      alt="bl9Qvn.png"                ></a></p><p>如上所示，这样我们就可以找到一些关键位置了，一共6个，结果不多，我们可以一个个点击进入到JavaScript文件中，然后进一步进行分析</p><h5 id="分析发起调用"><a href="#分析发起调用" class="headerlink" title="分析发起调用"></a>分析发起调用</h5><p>上述的搜索是一种查找入口的方式，这是从源码级别上直接查找；当然，我们也可以通过其他思路来查找入口，比如可以查看发起调用的流程</p><p>可以直接从Network请求里面的Initiator查看当前请求构造的相关逻辑，把光标对应到Initiator这一列，就会出现发起这个请求都经过了哪些调用，也就是调用发起方的一步步执行流程，如下图所示:</p><p><a href="https://imgtu.com/i/blCGQA"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blCGQA.png"                      alt="blCGQA.png"                ></a></p><p>如上图右侧就显示了一步步调用的源码的位置，我们可以顺次点进去找到对应的位置，比如这里的第8层调用里面有个onFetchData方法；点击右侧的代码位置，就可以跳转到实际JavaScript代码中，然后我们就可以查看逻辑了</p><p><a href="https://imgtu.com/i/blPw0x"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blPw0x.png"                      alt="blPw0x.png"                ></a></p><p>这里就可以看到一些token相关的逻辑了</p><h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><p>另外，我们还可以通过一些断点来进行入口的查找，比如XHR断点，DOM断点、事件断点等；我们可以在开发者工具Source面板里面添加设置，比如这里我们就添加了XHR断点和全局Load事件断点，如下图所示:</p><p><a href="https://imgtu.com/i/bliDrn"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bliDrn.png"                      alt="bliDrn.png"                ></a></p><p>这样网页就可以在整个网页加载的时候和发起Ajax请求的时候停下来，进入断点调试模式，也就是说，通过浏览器强大的断点调试功能，我们也可以找到对应的入口</p><h5 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h5><p>Hook也是一个非常常用的查找入口的功能；有时候，一些代码搜索或者断点并不能很有效地找到对应的入口位置，这时候就可以使用Hook了</p><p>比如说，我们可以对一些常用的加密和编码算法、常用的转换操作都进行一些Hook，比如说Base64编码、Cookie的赋值、JSON的序列化等</p><p>比较方便的Hook方式就是通过TemporMonkey这个插件实现，使用它我们不仅可以方便地自定义脚本执行的时间点，也可以引入一些额外的脚本来辅助Hook代码的编写，具体的实现流程可以参考前面的内容</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>以上便是一些常用的分析入口的方法，当然还有很多其他方法，比如使用Pyppeteer或者Playwright里面内置的API实现一些数据拦截和过滤功能，也可以使用一些抓包软件对一些请求进行拦截和分析，还可以使用一些第三方工具或者浏览器插件来辅助分析</p><h4 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h4><p>找到对应的入口位置之后，接下来我们就需要进行调试分析了；在这个步骤中，我们通常需要进行一些格式化、断点调试、反混淆等操作来辅助整个流程的分析</p><h5 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h5><p>这个已经讲过好多次了，就是右下角的那个大括号按钮</p><p>但是有一些网站的HTML和JavaScript是混杂在一起的，比如<a class="link"   href="https://spa8.scrape.center/%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA" >https://spa8.scrape.center/，如下图所示<i class="fas fa-external-link-alt"></i></a>:</p><p><a href="https://imgtu.com/i/blAUPK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blAUPK.png"                      alt="blAUPK.png"                ></a></p><p>我们可以借助外界的一些工具,(比如<a class="link"   href="https://beautifier.io/)%E6%9D%A5%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81" >https://beautifier.io/)来格式化代码<i class="fas fa-external-link-alt"></i></a>:</p><p>打开网站点击Beautify Code即可格式化</p><p><a href="https://imgtu.com/i/blA4MQ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blA4MQ.png"                      alt="blA4MQ.png"                ></a></p><p>另外我们还可以选择一些格式化选项，比如缩进、换行等:</p><p><a href="https://imgtu.com/i/blECIx"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blECIx.png"                      alt="blECIx.png"                ></a></p><h5 id="断点调试-1"><a href="#断点调试-1" class="headerlink" title="断点调试"></a>断点调试</h5><p>格式化之后，我们就可以进入正式的调试过程了，基本操作就是给想要调试的代码添加断点，同时在对应的面板里面观察对应的变量的值</p><p>如下图所示，这里我们在watch中查看下这个函数:</p><p><a href="https://imgtu.com/i/bleBfP"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bleBfP.png"                      alt="bleBfP.png"                ></a></p><p>可以看到这里指向了另一个函数，我们点进去看看:</p><p><a href="https://imgtu.com/i/blejt1"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blejt1.png"                      alt="blejt1.png"                ></a></p><p>通过这样的方式，我们就会对代码逻辑有个更好的理解</p><h5 id="反混淆"><a href="#反混淆" class="headerlink" title="反混淆"></a>反混淆</h5><p>在某些情况下，我们还可能遇到一些其他的混淆方式，比如控制流扁平化，数组移位等，对于一些特殊的混淆，我们可以尝试使用AST来进行反混淆</p><p>比如说，案例<a class="link"   href="https://antispider10.scrape.center/%EF%BC%8C%E5%B0%B1%E4%BD%BF%E7%94%A8%E4%BA%86%E6%8E%A7%E5%88%B6%E6%B5%81%E6%89%81%E5%B9%B3%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AF%B9%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%B7%B7%E6%B7%86" >https://antispider10.scrape.center/，就使用了控制流扁平化的方式对代码进行混淆<i class="fas fa-external-link-alt"></i></a></p><p>这里就不展示图片了，当前浏览器刷新不出这网页</p><h4 id="模拟执行-2"><a href="#模拟执行-2" class="headerlink" title="模拟执行"></a>模拟执行</h4><p>经过一系列调试，在理清逻辑之后，我们就可以进行模拟执行相关代码了</p><h5 id="Python改写或模拟执行"><a href="#Python改写或模拟执行" class="headerlink" title="Python改写或模拟执行"></a>Python改写或模拟执行</h5><p>这部分在前面提到过，详情参见前面的内容</p><h5 id="JavaScript模拟执行-API"><a href="#JavaScript模拟执行-API" class="headerlink" title="JavaScript模拟执行+API"></a>JavaScript模拟执行+API</h5><p>这个前面也提到过，详情参见前面的内容</p><h5 id="浏览器模拟执行"><a href="#浏览器模拟执行" class="headerlink" title="浏览器模拟执行"></a>浏览器模拟执行</h5><p>由于整个逻辑是运行在浏览器中的，我们当然也可以将浏览器当做整个执行环境，比如使用Selenium或PlayWright等来尝试执行一些JavaScript代码，得到一些返回结果，具体前面也提到了，详情参见前面的内容</p><h3 id="JavaScript逆向爬取实战"><a href="#JavaScript逆向爬取实战" class="headerlink" title="JavaScript逆向爬取实战"></a>JavaScript逆向爬取实战</h3><p>前面我们学习了各种JavaScript逆向技巧，本节中我们综合应用之前学到的东西进行一次完整的JavaScript逆向分析和爬取实战</p><h4 id="案例介绍-3"><a href="#案例介绍-3" class="headerlink" title="案例介绍"></a>案例介绍</h4><p>本节的案例网站就是<a class="link"   href="https://spa6.scrape/center/%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B9%8B%E5%89%8D%E6%8F%90%E5%88%B0%E8%BF%87%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8D%E4%BB%85API%E5%8F%82%E6%95%B0%E6%9C%89%E5%8A%A0%E5%AF%86%EF%BC%8C%E8%80%8C%E4%B8%94%E5%89%8D%E7%AB%AFJavaScript%E4%B9%9F%E6%9C%89%E5%8A%A0%E5%AF%86%E5%92%8C%E6%B7%B7%E6%B7%86%EF%BC%8C%E5%85%B6%E5%89%8D%E7%AB%AF%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7%E4%B8%BAwabpack%EF%BC%8C%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8JavaScript-obfuscator%EF%BC%8C%E5%88%86%E6%9E%90%E8%AF%A5%E7%BD%91%E7%AB%99%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%80%E5%AE%9A%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%EF%BC%8C%E5%8F%A6%E5%A4%96%E8%BF%98%E9%9C%80%E8%A6%81%E4%B8%80%E4%BA%9BHook%E6%8A%80%E6%9C%AF%E7%AD%89%E8%BE%85%E5%8A%A9%E6%89%8B%E6%AE%B5" >https://spa6.scrape/center/，也就是之前提到过的网站，这个网站不仅API参数有加密，而且前端JavaScript也有加密和混淆，其前端压缩打包工具为wabpack，混淆工具使用JavaScript-obfuscator，分析该网站我们需要熟练掌握浏览器的开发者工具和一定的调试技巧，另外还需要一些Hook技术等辅助手段<i class="fas fa-external-link-alt"></i></a></p><p>接下来，我们进入网站，会发现点击任意一部电影都会有一个加密参数:</p><p><a href="https://imgtu.com/i/blYQD1"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blYQD1.png"                      alt="blYQD1.png"                ></a></p><p>这个加密参数有点像Base64加密后得到的</p><p>接下来我们来看看有什么Ajax请求，然后看下有啥参数:</p><p><a href="https://imgtu.com/i/bltZZt"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/bltZZt.png"                      alt="bltZZt.png"                ></a></p><p>这里我们点了三页，然后我们看到了三个有相关数据的Ajax请求，我们发现，它们的limit都是固定的10，然后offset就是偏移量吧，就是页码减一乘上10，token就是加密参数了，我们的目标就是拿到token的构造逻辑</p><p>这时候有人说了，为啥不直接拿到这个Ajax链接去获取数据，但是这个肯定是有时效性的，这个绝对行不通</p><p>然后我们只有一条路可以走，那就是破解token的构造逻辑</p><p>现在我们确定了，数据是又ajax加载的，然后ajax有三个参数，其中一个token参数是加密了的:</p><p><a href="https://imgtu.com/i/blUAEt"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blUAEt.png"                      alt="blUAEt.png"                ></a></p><p>但是这只是列表页的分析，我们再点击进入详情页:</p><p>会发现也有一个token加密参数，还有一个id:</p><p><a href="https://imgtu.com/i/blUjqs"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blUjqs.png"                      alt="blUjqs.png"                ></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220301180116120.png"                      alt="image-20220301180116120"                ></p><p>那么现在就是两个加密参数token了和一个id了</p><p>然后我们会发现详情页的URL还有加密id，就如开头展示的那个图片所示，现在我们来总结下，这个网站有如下特点:</p><ul><li>列表页的Ajax接口参数带有加密参数token</li><li>详情页的Ajax接口参数带有加密参数id和加密token</li><li>详情页的URL带有加密id</li></ul><p>前面我们说过，这是个有JavaScript代码混淆和压缩的网站，我们点击下网页源代码来看看:</p><p>以下是首页也就是分页第一页的网页源代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;html lang=en&gt;&lt;head&gt;&lt;meta charset=utf-<span class="number">8</span>&gt;&lt;meta http-equiv=X-UA-Compatible content=<span class="string">&quot;IE=edge&quot;</span>&gt;&lt;meta name=viewport content=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;&lt;link rel=icon href=/favicon.ico&gt;&lt;title&gt;Scrape | Movie&lt;/title&gt;&lt;link href=/css/chunk-19c920f8<span class="number">.2</span>a6496e0.css rel=prefetch&gt;&lt;link href=/css/chunk-2f73b8f3<span class="number">.5</span>b462e16.css rel=prefetch&gt;&lt;link href=/js/chunk-19c920f8.c3a1129d.js rel=prefetch&gt;&lt;link href=/js/chunk-2f73b8f3<span class="number">.8</span>f2fc3cd.js rel=prefetch&gt;&lt;link href=/js/chunk-4dec7ef0.e4c2b130.js rel=prefetch&gt;&lt;link href=/css/app.ea9d802a.css rel=preload <span class="keyword">as</span>=style&gt;&lt;link href=/js/app<span class="number">.5</span>ef0d454.js rel=preload <span class="keyword">as</span>=script&gt;&lt;link href=/js/chunk-vendors<span class="number">.77</span>daf991.js rel=preload <span class="keyword">as</span>=script&gt;&lt;link href=/css/app.ea9d802a.css rel=stylesheet&gt;&lt;/head&gt;&lt;body&gt;&lt;noscript&gt;&lt;strong&gt;We<span class="string">&#x27;re sorry but portal doesn&#x27;</span>t work properly without JavaScript enabled. Please enable it to <span class="keyword">continue</span>.&lt;/strong&gt;&lt;/noscript&gt;&lt;div <span class="built_in">id</span>=app&gt;&lt;/div&gt;&lt;script src=/js/chunk-vendors<span class="number">.77</span>daf991.js&gt;&lt;/script&gt;&lt;script src=/js/app<span class="number">.5</span>ef0d454.js&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这是个典型的SPA(单页Web应用)，其JavaScript文件名带有编码字符、chunk、vendors等关键字，这就是经过webpack打包压缩后的源代码，目前主流的前端开发框架Vue.js、React.js等的输出结果都是类似这样的</p><p>接下来，我们再看一下其JavaScript代码是怎样的，打开Source，然后js文件夹就能看到所有的JavaScript文件:</p><p><a href="https://imgtu.com/i/blwqxO"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blwqxO.png"                      alt="blwqxO.png"                ></a></p><p>我们随便复制一段出来看看:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">window</span>[<span class="string">&#x27;webpackJsonp&#x27;</span>]=<span class="built_in">window</span>[<span class="string">&#x27;webpackJsonp&#x27;</span>]||[])[<span class="string">&#x27;push&#x27;</span>]([[<span class="string">&#x27;chunk-19c920f8&#x27;</span>],&#123;<span class="string">&#x27;5a19&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params">_0x1588d2,_0x49ff45,_0x493500</span>)</span>&#123;&#125;,<span class="string">&#x27;c6bf&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params">_0x1ff78d,_0x1a7aa3,_0x6392a5</span>)</span>&#123;&#125;,<span class="string">&#x27;ca9c&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params">_0x34ea17,_0x1d01c8,_0x1a974c</span>)</span>&#123;<span class="string">&#x27;use strict&#x27;</span>;<span class="keyword">var</span> _0x116bc9=_0x1a974c(<span class="string">&#x27;5a19&#x27;</span>),_0x14ee23=_0x1a974c[<span class="string">&#x27;n&#x27;</span>](_0x116bc9);_0x14ee23[<span class="string">&#x27;a&#x27;</span>];&#125;,<span class="string">&#x27;d504&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params">_0x4c4705,_0x3c93b9,_0x4c22a6</span>)</span>&#123;<span class="string">&#x27;use strict&#x27;</span>;_0x4c22a6[<span class="string">&#x27;r&#x27;</span>](_0x3c93b9);<span class="keyword">var</span> _0x4b4f78=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> _0x1dc0eb=<span class="built_in">this</span>,_0x559ed0=_0x1dc0eb[<span class="string">&#x27;$createElement&#x27;</span>],_0x28c6bc=_0x1dc0eb[<span class="string">&#x27;_self&#x27;</span>][<span class="string">&#x27;_c&#x27;</span>]||_0x559ed0;<span class="keyword">return</span> _0x28c6bc(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;index&#x27;</span>&#125;&#125;,[_0x28c6bc(<span class="string">&#x27;el-row&#x27;</span>,&#123;<span class="string">&#x27;directives&#x27;</span>:[&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;loading&#x27;</span>,<span class="string">&#x27;rawName&#x27;</span>:<span class="string">&#x27;v-loading&#x27;</span>,<span class="string">&#x27;value&#x27;</span>:_0x1dc0eb[<span class="string">&#x27;loading&#x27;</span>],<span class="string">&#x27;expression&#x27;</span>:<span class="string">&#x27;loading&#x27;</span>&#125;]&#125;,[_0x28c6bc(<span class="string">&#x27;el-col&#x27;</span>,&#123;<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;span&#x27;</span>:<span class="number">0x12</span>,<span class="string">&#x27;offset&#x27;</span>:<span class="number">0x3</span>&#125;&#125;,_0x1dc0eb[<span class="string">&#x27;_l&#x27;</span>](_0x1dc0eb[<span class="string">&#x27;movies&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">_0x1355ed</span>)</span>&#123;<span class="keyword">return</span> _0x28c6bc(<span class="string">&#x27;el-card&#x27;</span>,&#123;<span class="string">&#x27;key&#x27;</span>:_0x1355ed[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;item\x20m-t&#x27;</span>,<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;shadow&#x27;</span>:<span class="string">&#x27;hover&#x27;</span>&#125;&#125;,[_0x28c6bc(<span class="string">&#x27;el-row&#x27;</span>,[_0x28c6bc(<span class="string">&#x27;el-col&#x27;</span>,&#123;<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;xs&#x27;</span>:<span class="number">0x8</span>,<span class="string">&#x27;sm&#x27;</span>:<span class="number">0x6</span>,<span class="string">&#x27;md&#x27;</span>:<span class="number">0x4</span>&#125;&#125;,[_0x28c6bc(<span class="string">&#x27;router-link&#x27;</span>,&#123;<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;to&#x27;</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;detail&#x27;</span>,<span class="string">&#x27;params&#x27;</span>:&#123;<span class="string">&#x27;key&#x27;</span>:_0x1dc0eb[<span class="string">&#x27;transfer&#x27;</span>](_0x1355ed[<span class="string">&#x27;id&#x27;</span>])&#125;&#125;&#125;&#125;,[_0x28c6bc(<span class="string">&#x27;img&#x27;</span>,&#123;<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;cover&#x27;</span>,<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;src&#x27;</span>:_0x1355ed[<span class="string">&#x27;cover&#x27;</span>]&#125;&#125;)])],<span class="number">0x1</span>),_0x28c6bc(<span class="string">&#x27;el-col&#x27;</span>,&#123;<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;p-h&#x27;</span>,<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;xs&#x27;</span>:<span class="number">0x9</span>,<span class="string">&#x27;sm&#x27;</span>:<span class="number">0xd</span>,<span class="string">&#x27;md&#x27;</span>:<span class="number">0x10</span>&#125;&#125;,[_0x28c6bc(<span class="string">&#x27;router-link&#x27;</span>,&#123;<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;to&#x27;</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;detail&#x27;</span>,<span class="string">&#x27;params&#x27;</span>:&#123;<span class="string">&#x27;key&#x27;</span>:_0x1dc0eb[<span class="string">&#x27;transfer&#x27;</span>](_0x1355ed[<span class="string">&#x27;id&#x27;</span>])&#125;&#125;&#125;&#125;,[_0x28c6bc(<span class="string">&#x27;h2&#x27;</span>,&#123;<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;m-b-sm&#x27;</span>&#125;,[_0x1dc0eb[<span class="string">&#x27;_v&#x27;</span>](_0x1dc0eb[<span class="string">&#x27;_s&#x27;</span>](_0x1355ed[<span class="string">&#x27;name&#x27;</span>])+<span class="string">&#x27;\x20-\x20&#x27;</span>+_0x1dc0eb[<span class="string">&#x27;_s&#x27;</span>](_0x1355ed[<span class="string">&#x27;alias&#x27;</span>]))])]),_0x28c6bc(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;categories&#x27;</span>&#125;,_0x1dc0eb[<span class="string">&#x27;_l&#x27;</span>](_0x1355ed[<span class="string">&#x27;categories&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">_0x3f20be</span>)</span>&#123;<span class="keyword">return</span> _0x28c6bc(<span class="string">&#x27;el-button&#x27;</span>,&#123;<span class="string">&#x27;key&#x27;</span>:_0x3f20be,<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;category&#x27;</span>,<span class="string">&#x27;attrs&#x27;</span>:&#123;<span class="string">&#x27;size&#x27;</span>:<span class="string">&#x27;mini&#x27;</span>,<span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;primary&#x27;</span>&#125;&#125;,[_0x1dc0eb[<span class="string">&#x27;_v&#x27;</span>](_0x1dc0eb[<span class="string">&#x27;_s&#x27;</span>](_0x3f20be)+<span class="string">&#x27;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20&#x27;</span>)]);&#125;),<span class="number">0x1</span>),_0x28c6bc(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;staticClass&#x27;</span>:<span class="string">&#x27;m-v-sm\x20info&#x27;</span>&#125;,[_0x28c6bc(<span class="string">&#x27;span&#x27;</span>,[_0x1dc0eb</span><br></pre></td></tr></table></figure><p>我们可以看到一些变量是16进制的字符串，而且代码全被压缩了，而我们就是要从这里找出token和id的构造逻辑，要分析出整个网站的加密逻辑还是有一定难度的，下面我们会一步步讲解逆向的思路、方法和技巧</p><h4 id="寻找列表页Ajax入口"><a href="#寻找列表页Ajax入口" class="headerlink" title="寻找列表页Ajax入口"></a>寻找列表页Ajax入口</h4><p>我们就开始第一步，寻找入口叭，这里简单介绍两种寻找入口的方式</p><ul><li>全局搜索标志字符串</li><li>设置Ajax断点</li></ul><h5 id="全局搜索标志字符串"><a href="#全局搜索标志字符串" class="headerlink" title="全局搜索标志字符串"></a>全局搜索标志字符串</h5><p>这个前面介绍过，也就是直接搜索</p><h5 id="设置Ajax断点"><a href="#设置Ajax断点" class="headerlink" title="设置Ajax断点"></a>设置Ajax断点</h5><p>这个前面也提到过，就是截取URL中的一部分，然后设置Ajax断点，刷新网页</p><h4 id="寻找列表页加密逻辑"><a href="#寻找列表页加密逻辑" class="headerlink" title="寻找列表页加密逻辑"></a>寻找列表页加密逻辑</h4><p>我们通过以上任何一种方式都可以定位到发送Ajax的代码，如下图所示:</p><p><a href="https://imgtu.com/i/blDHGq"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blDHGq.png"                      alt="blDHGq.png"                ></a></p><p>如上图所示，我们已经找到token的位置了，可以观察这个token对应的变量，它叫做_0x263439，所以关键就是要看看这个变量是怎么来的，那怎么找呢？添加断点就好了</p><p>看一下这个变量是在哪里生成的，然后我们在对应的行添加断点，我们先取消刚刚的XHR断点，其实去不取消都可以，因为这个函数在ajax的send方法之前就调用了</p><p>刷新网页之后，就会停在我打的断点的地方，这时，我们就可以观察正在运行的一些变量了，比如把鼠标放在各个变量上，可以看到变量的类型和值，把鼠标放在_0x2fa7bd上，会有一个悬浮窗显示，如下图所示:</p><p><a href="https://imgtu.com/i/blsZcV"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/01/blsZcV.png"                      alt="blsZcV.png"                ></a></p><p>我们还可以在右侧的watch面板中添加想要查看的变量，比如在这行代码中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_0x263439 = <span class="built_in">Object</span>(_0x2fa7bd[<span class="string">&#x27;a&#x27;</span>])(<span class="built_in">this</span>[<span class="string">&#x27;$store&#x27;</span>][<span class="string">&#x27;state&#x27;</span>][<span class="string">&#x27;url&#x27;</span>][<span class="string">&#x27;index&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>我们比较感兴趣的可能就是<code>_0x2fa7bd</code>，这里我们鼠标选中<code>this[&#39;$store&#39;][&#39;state&#39;][&#39;url&#39;][&#39;index&#39;]</code>会发现这是个定值: <code>/api/movie</code>，我们把<code>_0x2fa7bd</code>添加到watch面板看看:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220302094445104.png"                      alt="image-20220302094445104"                ></p><p>从上图中我们可以得知，<code>_0x2fa7bd</code>是一个对象，它有一个属性a，属性a对应的值是一个方法，我们展开a，就可以看到其对应的方法地址:</p><p><a href="https://imgtu.com/i/b3V7gf"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b3V7gf.png"                      alt="b3V7gf.png"                ></a></p><p>我们点进去之后，再点击格式化，这时我们就进入了一个叫<code>_0x456254</code>的方法:</p><p><a href="https://imgtu.com/i/b3Vx5n"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b3Vx5n.png"                      alt="b3Vx5n.png"                ></a></p><p>我们猜测这里面应该就有token的加密过程了，然后我们开始打断点:</p><p><a href="https://imgtu.com/i/b3nkqS"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b3nkqS.png"                      alt="b3nkqS.png"                ></a></p><p>然后我们一步步单步执行，这时会发现单步执行到如上图所示的位置了，在每步的执行过程中，我们可以发现一些运行值会被打到代码的右侧并高亮表示，同时在Scope中还能看到每步的结果</p><p>下面我们就要来好好梳理下上图代码的逻辑了</p><ul><li>首先有一个列表<code>[&#39;api/movie&#39;, &#39;时间戳&#39;]</code>，通过push操作加入</li><li>然后将列表内容用<code>,</code>拼接</li><li>将拼接的结果进行SHA1编码</li><li>将编码的结果和时间戳再次拼接</li><li>将拼接的结果进行Base64编码</li></ul><p>验证一下，如果逻辑没问题就可以用Python实现了</p><h4 id="使用Python实现列表页的爬取"><a href="#使用Python实现列表页的爬取" class="headerlink" title="使用Python实现列表页的爬取"></a>使用Python实现列表页的爬取</h4><p>要用Python实现这个逻辑，我们需要借助两个库，一个是hashllib，它提供了sha1方法；另一个是Base64库，它提供了b64encode方法对结果进行Base64编码，实现代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Any</span>  <span class="comment"># 类型检测</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">INDEX_URL = <span class="string">&#x27;https://spa6.scrape.center/api/movie?limit=&#123;limit&#125;&amp;offset=&#123;offset&#125;&amp;token=&#123;token&#125;&#x27;</span></span><br><span class="line">DETAIL_URL = <span class="string">&#x27;https://spa6.scrape.center/api/movie/&#123;id&#125;?token=&#123;token&#125;&#x27;</span></span><br><span class="line">LIMIT = <span class="number">10</span></span><br><span class="line">OFFSET = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">args: <span class="type">List</span>[<span class="type">Any</span>]</span>):</span></span><br><span class="line">    timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))  <span class="comment"># 构造时间戳</span></span><br><span class="line">    args.append(timestamp)  <span class="comment"># 构造一个[&#x27;/api/movie&#x27;, 时间戳]</span></span><br><span class="line">    sign = hashlib.sha1(<span class="string">&#x27;,&#x27;</span>.join(args).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()  <span class="comment"># 这都是一步步参照源码来的</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(</span><br><span class="line">        <span class="string">&#x27;,&#x27;</span>.join([sign, timestamp]).encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">args = [<span class="string">&#x27;/api/movie&#x27;</span>]</span><br><span class="line">token = get_token(args=args)</span><br><span class="line">index_url = INDEX_URL.<span class="built_in">format</span>(limit=LIMIT, offset=OFFSET, token=token)</span><br><span class="line">response = requests.get(index_url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;response&#x27;</span>, response.json())</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response &#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;霸王别姬&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Farewell My Concubine&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-07-26&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">171</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国内地&#x27;</span>, <span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;这个杀手不太冷&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Léon&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;动作&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1994-09-14&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">110</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;法国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖申克的救赎&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Shawshank Redemption&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;犯罪&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1994-09-10&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">142</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;泰坦尼克号&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Titanic&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;灾难&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1998-04-03&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">194</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;罗马假日&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Roman Holiday&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/289f98ceaa8a0ae737d3dc01cd05ab052213631.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1953-08-20&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;唐伯虎点秋香&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Flirting Scholar&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;古装&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-07-01&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">102</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;乱世佳人&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Gone with the Wind&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/223c3e186db3ab4ea3bb14508c709400427933.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>, <span class="string">&#x27;战争&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1939-12-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">238</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;喜剧之王&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The King of Comedy&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/1f0d671f6a37f9d7b015e4682b8b113e174332.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;喜剧&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1999-02-13&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">85</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国香港&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;楚门的世界&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Truman Show&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/8959888ee0c399b0fe53a714bc8a5a17460048.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;科幻&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">103</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;狮子王&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Lion King&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/27b76fe6cf3903f3d74963f70786001e1438406.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;歌舞&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1995-07-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们已经成功得把第一页的搞定了</p><h4 id="寻找详情页加密id入口"><a href="#寻找详情页加密id入口" class="headerlink" title="寻找详情页加密id入口"></a>寻找详情页加密id入口</h4><p>在我们点击详情页的时候，我们就可以看到它的URL中带了一个加密id: <code>ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIxNw==</code>，这说明这个加密id应该是依赖于Ajax请求所返回的数据的，因此我们可以断定这个加密id的产生是发生在Ajax请求后或者在点击详情页的一瞬间</p><p>为了进一步确定这发生在何时，我们查看源代码:</p><p><a href="https://imgtu.com/i/b3NtB9"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b3NtB9.png"                      alt="b3NtB9.png"                ></a></p><p>可以看到，在没有点击之前，详情页面的链接里面就已经存在加密id了</p><p>由此可以确定，这个加密id是在Ajax请求完成之后生成的，而且肯定也是由JavaScript生成的</p><p>那怎么去找Ajax完成之后的事件呢？是否应该去找Ajax完成之后的事件呢？</p><p>我们可以试试，在Source面板的右侧，有个Event Listener Breakpoints，这里有一个XHR监听，包括发起时、成功后、发生错误时的一些监听这里我们勾选上readystatechange事件，代表Ajax得到响应的事件，其他断点都可以删除，然后刷新下页面:</p><p><a href="https://imgtu.com/i/b3UqMD"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b3UqMD.png"                      alt="b3UqMD.png"                ></a></p><p>可以看到，此时就停在了Ajax得到响应时的位置了，我们怎么知道这个id是怎么加密的呢，可以通过打断点一步步调试下去，但这个过程非常繁琐，因为这里可能会遇到页面UI渲染的一些底层实现，甚至可能找着找着就不知道在哪里了</p><p>这个时候我们就可以用到之前提到的快速定位的方法，那就是Hook，这里就不再展开讲解原理了，详情参见前面的</p><p>那么，这里怎么用Hook的方式来找到加密id的加密入口呢，想一下，这个加密id是经过Base64加密的，那么生成过程中想必就用到了JavaScript的Base64编码方法，这个方法就是bota；当然，Base64也有其他的实现方式，比如利用crypto-js库来实现，如果是使用crypto-js库来实现，那么底层就不是btoa方法了；现在，我们其实并不确定是否通过调用btoa方法实现的Base64编码，那就赌一把，先试试吧</p><p>要实现Hook，关键在于将原来的方法改写，这里我们其实就是Hook btoa这个方法了，btoa这个方法属于window对象，这里直接改写window对象的btoa方法即可，改写的逻辑如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params">object, attr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> func = object[attr]</span><br><span class="line">        object[attr] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hooked&#x27;</span>, object, attr, <span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">var</span> ret = func.apply(object, <span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">debugger</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, ret)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hook(<span class="built_in">window</span>, <span class="string">&#x27;btoa&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>这里我们定义了一个hook方法，给其传入object和attr参数，意思就是Hook object对象的attr参数；例如，如果我们想Hook alert方法，那就把object设置为window，把attr设置为alert；这里我们想要Hook Base64的编码方法，所以只需要Hook window对象的btoa方法就好了</p><p>hook方法的第一句<code>var func = object[attr]</code>，相当于把它赋值为一个变量，我们调用func方法就可以实现和原来一样的功能；然后我们改写这个方法的定义，将其改成一个新的方法；在新的方法中，通过func.apply又重新调用了原来的方法；这样我们可以保证前后方法的执行效果不受影响的前提下，在func方法执行的前后加入自己的代码，如使用console.log()将信息输出到控制台，通过debugger进入断点等；在这个过程中，我们先临时保存func方法，然后定义一个新方法来接管程序控制权，在其中定义我们想要的实现，同时在新方法中重新回调func方法，保证前后的结果不受影响；因此，我们达到了在不影响原有方法效果的前提下，可以实现在方法的前后实现自定义的功能，这就是Hook的完整实现过程</p><p>最后，我们调用hook方法，传入window对象和btoa字符串即可</p><p>怎么去注入这个方法呢，下面提供三个方法:</p><ul><li>控制台注入</li><li>重写JavaScript</li><li>Tampermonkey注入</li></ul><h5 id="控制台注入"><a href="#控制台注入" class="headerlink" title="控制台注入"></a>控制台注入</h5><p>对于这个场景，控制台注入其实就足够了，这个方法很简单，就是直接在控制台输入这行代码并运行即可，然后我们再运行下btoa方法，这个时候就停在断点处了:</p><p><a href="https://imgtu.com/i/b36gte"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b36gte.png"                      alt="b36gte.png"                ></a></p><p>我们点击Resume script execution，然后会发现打印出了结果:</p><p><a href="https://imgtu.com/i/b8PCVI"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8PCVI.png"                      alt="b8PCVI.png"                ></a></p><p>我们通过Hook方式改写了btoa方法，使其每次在调用的时候都能停到一个断点，同时还能输出对应的结果，接下来，怎么用Hook找到对应的加密id的入口呢？</p><p>由于此时我们是在控制台直接输入的Hook代码，所以页面刷新就无效了；但是我们这个网站是<a class="link"   href="https://www.cnblogs.com/xiaozhuangge/p/15396609.html" >SPA页面<i class="fas fa-external-link-alt"></i></a>，点击详情页的时候是不会整个刷新的，因此这段代码依然生效，如果不是SPA页面，那么这种注入方式就不生效了</p><p>刚刚我们提到了，这个加密id是在Ajax请求之后产生的，那么我们就点击下一页试试:</p><p><a href="https://imgtu.com/i/b8Fq5q"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8Fq5q.png"                      alt="b8Fq5q.png"                ></a></p><p>根据调用栈的信息，我们能够看到，这最后一层很明显可以看到这是执行了Base64加密:</p><p><a href="https://imgtu.com/i/b8kaZj"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8kaZj.png"                      alt="b8kaZj.png"                ></a></p><p>编码的结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ef34#teuq0btua#(-57w1q5o5--j@98xygimlyfxs*-!i-0-mb11</span><br></pre></td></tr></table></figure><p>编码之后的结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIxMQ==</span><br></pre></td></tr></table></figure><p>那么现在核心问题来了，编码前的结果<code>ef34#teuq0btua#(-57w1q5o5--j@98xygimlyfxs*-!i-0-mb11</code>又是怎么来的呢，我们展开栈的调用信息，一层层看这个字符串的变化情况，如果不变就看下一层，如果变了就停下来仔细看，最后，我们可以在第5层，从上往下数第5层找到它的变化过程，如下图所示:</p><p><a href="https://imgtu.com/i/b8EqIA"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8EqIA.png"                      alt="b8EqIA.png"                ></a></p><p>因此，这个加密逻辑就变得非常简单了，其实就是<code>ef34#teuq0btua#(-57w1q5o5--j@98xygimlyfxs*-!i-0-mb</code>加上电影id，然后进行Base64编码即可，到此，我们就成功用Hook的方式找到加密的生成逻辑了</p><h5 id="重写JavaScript"><a href="#重写JavaScript" class="headerlink" title="重写JavaScript"></a>重写JavaScript</h5><p>借助Chorme浏览器的Overrides功能，我们可以实现某些JavaScript文件的重写和保存，Overrides会在本地生成一个JavaScript文件副本，以后每次刷新，都会使用本地副本的内容</p><p>这里我们需要切换到Sources面板中的Overrides选项卡，然后选择一个文件夹，比如这里我自定义了一个ChromeOverriders文件夹，如下图所示:</p><p><a href="https://imgtu.com/i/b8mPde"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8mPde.png"                      alt="b8mPde.png"                ></a></p><p>然后随便选一个JavaScript脚本，在后面贴上这段注入脚本，如下图所示:</p><p><a href="https://imgtu.com/i/b8mzfs"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8mzfs.png"                      alt="b8mzfs.png"                ></a></p><p>保存文件，会发现文件左上角有一个圆点标识符，这说明之后使用这个文件就是使用本地也就刚刚修改的文件副本，我们还会注意到，修改并保存文件之后，会直接进入到断点模式，并且成功Hook到btoa方法</p><p>其实Overrides是非常有用的，有了它，我们可以持久化保存任意修改的JavaScript文件，想在哪里改都可以，甚至可以直接修改JavaScript的原始执行逻辑</p><p>Hook到btoa方法之后呢，后续的操作就和上面是一样一样的了</p><h5 id="Tampermonkey注入"><a href="#Tampermonkey注入" class="headerlink" title="Tampermonkey注入"></a>Tampermonkey注入</h5><p>如果不想用Overrides的方式改写JavaScript来注入，我们也可以使用前面介绍的Tampermonkey插件来注入，详细的使用方法可以参考前面的内容，在开始之前，请清除所有的断点，并且把刚才的Overrides功能关闭，以防对本方法产生干扰，如下图所示:</p><p><a href="https://imgtu.com/i/b8KPdU"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8KPdU.png"                      alt="b8KPdU.png"                ></a></p><p>接下来，我们在Tampermonkey中创建一个新的脚本，点击右后侧的加号:</p><p><a href="https://imgtu.com/i/b8KQoD"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8KQoD.png"                      alt="b8KQoD.png"                ></a></p><p>我们可以将脚本改写为如下内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         HookBase64-1</span></span><br><span class="line"><span class="comment">// @namespace    https://scrape.center/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        https://spa6.scrape.center/</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=imgtu.com</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params">object, attr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> func = object[attr]</span><br><span class="line">        object[attr] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hooked&#x27;</span>, object, attr, <span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">var</span> ret = func.apply(object, <span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">debugger</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, ret)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hook(<span class="built_in">window</span>, <span class="string">&#x27;btoa&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>然后保存，重新刷新页面，就可以发现成功Hook btoa方法</p><h4 id="寻找详情页Ajax的token"><a href="#寻找详情页Ajax的token" class="headerlink" title="寻找详情页Ajax的token"></a>寻找详情页Ajax的token</h4><p>现在我们已经找到详情页的加密id了，但是还差一步，其Ajax请求也有一个token，如下图所示:</p><p><a href="https://imgtu.com/i/b8lc6A"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/03/02/b8lc6A.png"                      alt="b8lc6A.png"                ></a></p><p>因为也是Ajax请求，我们可以通过上文提到的同样的方法对该token的生成逻辑进行一个分析，最终可以发现，其实这个token和列表页的token的构造逻辑是一样的</p><h4 id="使用Python实现详情页爬取"><a href="#使用Python实现详情页爬取" class="headerlink" title="使用Python实现详情页爬取"></a>使用Python实现详情页爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Any</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">INDEX_URL = <span class="string">&#x27;https://dynamic6.scrape.cuiqingcai.com/api/movie?limit=&#123;limit&#125;&amp;offset=&#123;offset&#125;&amp;token=&#123;token&#125;&#x27;</span></span><br><span class="line">DETAIL_URL = <span class="string">&#x27;https://dynamic6.scrape.cuiqingcai.com/api/movie/&#123;id&#125;?token=&#123;token&#125;&#x27;</span></span><br><span class="line">LIMIT = <span class="number">10</span></span><br><span class="line">OFFSET = <span class="number">0</span></span><br><span class="line">SECRET = <span class="string">&#x27;ef34#teuq0btua#(-57w1q5o5--j@98xygimlyfxs*-!i-0-mb&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">args: <span class="type">List</span>[<span class="type">Any</span>]</span>):</span></span><br><span class="line">    timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))</span><br><span class="line">    args.append(timestamp)</span><br><span class="line">    sign = hashlib.sha1(<span class="string">&#x27;,&#x27;</span>.join(args).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(<span class="string">&#x27;,&#x27;</span>.join([sign, timestamp]).encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">args = [<span class="string">&#x27;/api/movie&#x27;</span>]</span><br><span class="line">token = get_token(args=args)</span><br><span class="line">index_url = INDEX_URL.<span class="built_in">format</span>(limit=LIMIT, offset=OFFSET, token=token)</span><br><span class="line">response = requests.get(index_url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;response&#x27;</span>, response.json())</span><br><span class="line"></span><br><span class="line">result = response.json()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result[<span class="string">&#x27;results&#x27;</span>]:</span><br><span class="line">    <span class="built_in">id</span> = item[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    encrypt_id = base64.b64encode((SECRET + <span class="built_in">str</span>(<span class="built_in">id</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    args = [<span class="string">f&#x27;/api/movie/<span class="subst">&#123;encrypt_id&#125;</span>&#x27;</span>]</span><br><span class="line">    token = get_token(args=args)</span><br><span class="line">    detail_url = DETAIL_URL.<span class="built_in">format</span>(<span class="built_in">id</span>=encrypt_id, token=token)</span><br><span class="line">    response = requests.get(detail_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;response&#x27;</span>, response.json())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着大数据时代的发展，各个公司的数据保护意识越来越强，大家都在想尽办法保护自家产品的数据，不让它们轻而易举地被爬虫爬走；由于网页是提供信息和服务的重要载体，所以对网页上的信息进行保护就成了一个至关重要的环节&lt;/p&gt;
&lt;p&gt;网页是运作在浏览器端的，当我们浏览一个网页时，其HT</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第10章-模拟登陆</title>
    <link href="http://example.com/2022/02/16/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC10%E7%AB%A0-%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/"/>
    <id>http://example.com/2022/02/16/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC10%E7%AB%A0-%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/</id>
    <published>2022-02-16T08:33:30.000Z</published>
    <updated>2022-02-17T01:31:38.569Z</updated>
    
    <content type="html"><![CDATA[<p>很多情况下，网站的一些数据需要登录后才能查看，如果想要爬取这部分数据的话，就需要实现模拟登录的一些机制</p><p>模拟登录现在主要分为两种模式，一种是基于Session和Cookie的模拟登录，一种是基于JWT(JSON Web Token)的模拟登录</p><p>对于第一种模式，我们已经学习过Session和Cookie，简单来说，打开网页后模拟登录，服务器会返回带有Set-Cookie字段的响应头，客户端会生成相应的Cookie，其中保存着SessionID相关的信息，之后发送给服务器的请求都会携带这个生成的Cookie；服务器接收到请求后，会根据Cookie中保存的SessionID找到对应的Session，同时校验Cookie中的其他信息，如果当前Session是有效的并且校验成功，服务器就判断当前用户已经登录，返回所请求的页面信息；所以这种模式的核心是获取客户端登录后生成的Cookie</p><p>对于第二种模式也是如此，我们可以手动在浏览器中输入用户名和密码，再把Cookie或者JWT复制到代码中来进行请求数据，但这样做明显会增加人工工作量；实现爬虫的目的不就是自动化嘛，所以我们要做的就是用程序来完成这个过程，或者说用程序模拟登录</p><h3 id="模拟登录的基本原理"><a href="#模拟登录的基本原理" class="headerlink" title="模拟登录的基本原理"></a>模拟登录的基本原理</h3><p>很多时候，一些网站的页面或资源需要先登录才能看到，例如GitHub的个人设置页面，如果不登录就无法查看，12306网站的提交订单页面，如果不登录也是无法提交订单，在微博上写了个新内容不登录也是无法发表</p><h4 id="网站登录验证的实现"><a href="#网站登录验证的实现" class="headerlink" title="网站登录验证的实现"></a>网站登录验证的实现</h4><p>要实现模拟登录，首先就得了解网站如何验证登录内容</p><p>登录一般需要两个内容，用户名和密码，也有的网站是填写手机号获取验证码，或者微信扫码从根本上看，这些方式都是把一些可供认证的信息提交给服务器</p><p>就拿用户名和密码来说，用户在一个网页表单里面输入这两个内容，然后点击登录按钮的一瞬间，浏览器客户端会向服务器发送一个登录请求，这个请求里肯定包含刚输入的用户名和密码，这时服务器需要处理这些内容，然后返回给客户端一个类似凭证的东西，有了这个凭证，客户端再去访问某些需要登录才能看的页面时，服务器自然会放行，并返回对应的内容或执行对应的操作</p><p>那么问题来了，这个凭证是怎么生成的，服务器又是怎么校验的呢，答案其实刚刚已经介绍过了，一种是基于Session和Cookie，一种是基于JWT</p><h4 id="基于Session和Cookie"><a href="#基于Session和Cookie" class="headerlink" title="基于Session和Cookie"></a>基于Session和Cookie</h4><p>不同网站对于用户登录状态的实现可能是不同的，但Sesson和Cookie一定是相互配合工作的，下面梳理下:</p><ul><li>Cookie里面可能只保存了SessionID相关的信息，服务器能根据这个信息找到对应的Session；当用户登录后，服务器会在相应的Session里标记一个字段，代表用户已处于登录状态或者其他(如角色或登录时间)，这样一来，用户每次访问网站的时候都带着Cookie，服务器每次都找到对应的Session，然后看一下用户的状态是否为登录状态，在决定返回什么结果或执行什么操作；</li><li>Cookie里直接保存了某些凭证信息；例如用户发起登陆请求，服务器校验通过后，返回给客户端的响应头里面可能带有Set-Cookie字段，里面就包含着类似的凭证的信息，这样客户端会执行设置Cookie的操作，将那些类似凭证的信息保存到Cookie里，以后再访问网站时都携带这Cookie，服务器拿着其中的信息进行检验，自然也能检测登录状态</li></ul><p>以上两种情况几乎能涵盖大部分这种模式的实现，具体的实现逻辑因服务器而异，但Session和Cookie是一定要配合使用的</p><h4 id="基于JWT"><a href="#基于JWT" class="headerlink" title="基于JWT"></a>基于JWT</h4><p>web的开发技术一直在发展，近几年前后端分离的开发模式也越来越火，传统的基于Sesson和Cookie的校验又存在一定的问题，例如服务器需要维护登录用户的Session信息，而且分布式部署也不太方便，不太适合前后端分离的项目，所以JWT技术应运而生</p><p>有了JWT，一些认证就不需要借助Session和Cookie了，服务器也无需维护Session信息，从而减少了开销，只需要有一个校验JWT的功能即可，同时还支持分布式部署和跨语言</p><p>JWT一般是一个经过Base64编码技术加密的字符串，有自己的标准，可以把JWT看成一个三段加密字符串，这三部分分别是Header、Payload、Sinnature</p><ul><li>Header: 申明了JWT的签名算法(如RSA，SHA256等)，还可能包含JWT编号或类型等数据</li><li>Payload: 通常是一些业务需要但是不敏感的信息(如UserID)，另外还有很多默认字段，如JWT签发者、JWT接受者、JWT过期时间等</li><li>Signature: 这就是一个签名，是利用秘钥secret对Hader、Payload的信息进行加密后形成的，这个秘钥保存在服务端，不会轻易泄露；如此以来，如果Payload的信息被串改，服务器就能通过Signature判断出这是非法请求，拒绝提供服务</li></ul><p>登录认证流程也很简单了，用户通过用户名和密码登录，然后服务器生成JWT字段返回给客户端，之后客户每次请求都带着这个JWT，服务器会自动判断其有效情况，如果有效就返回对应的数据；JWT的传递方式有很多种，可以放在请求头中，可以放在URL中，甚至有些网站把它放在Cookie中</p><h4 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h4><h5 id="基于Session和Cookie模拟登录"><a href="#基于Session和Cookie模拟登录" class="headerlink" title="基于Session和Cookie模拟登录"></a>基于Session和Cookie模拟登录</h5><p>如果要用爬虫实现基于Cookie和Session的模拟登录，最主要的是要维护好Cookie的信息</p><ul><li>第一，如果已经在浏览器中登录了自己的账号，那么可以直接把Cookie赋值给爬虫，详细点说就是放在请求头中</li><li>第二，如果想让爬虫完全自动化工作，那么可以直接使用爬虫模拟登录过程，大多数时候，登录过程其实就是Post请求，用爬虫把用户名、密码等信息提交给服务器，服务器返回的响应头里面可能会有Set-Cookie字段，我们只需要把这个字段的内容保存下来即可，所以最主要的是把这个过程中的Cookie维持好，当然，我们可能会遭遇到一些困难，例如登录过程中伴随着各种校验参数，不好直接模拟请求；客户端设置Cookie的过程中是通过JavaScript实现的，所以可能还得仔细分析其中的逻辑，尤其是用requests这样的请求的库进行模拟登录遇到的问题总会是比较多</li><li>可以用一些简单的方式，那就是自动化处理工具了</li></ul><h5 id="基于JWT模拟登录"><a href="#基于JWT模拟登录" class="headerlink" title="基于JWT模拟登录"></a>基于JWT模拟登录</h5><p>基于JWT的模拟登录思路也比较清晰，由于JWT的字符串就是用户访问的凭证，所以模拟登录只需要做到下面几步:</p><ul><li>模拟登录操作，例如拿着用户名和密码信息请求登录接口，获取服务器返回的结果，这个结果中通常包含着JWT信息，将其保存下来即可</li><li>之后发送个给服务器的请求都携带JWT，在JWT不过期的情况下，通常能正常访问和执行操作，携带方式多种多样，因网站而异</li><li>如果JWT过期了，可能需要再次做第一步，重新获取JWT</li></ul><p>当然，模拟登录的过程中肯定会带有一些其他加密参数，需要根据情况而定</p><h4 id="账号池"><a href="#账号池" class="headerlink" title="账号池"></a>账号池</h4><p>如果爬虫要求爬取的数据量比较大或爬取速度比较快，网站又有单账号并发限制或者访问状态检测等反爬虫手段，我们的账号可能就无法访问网站或者面临封号的风险</p><p>这时一般怎么处理呢，可以分流，建立一个账号池，用多个账号随机访问网站或爬取数据，这样能大幅提高爬虫的并发量，降低被封号的风险；例如准备100个账号，然后这100个账号都模拟登录，并保存对应的Cookie或JWT，每次都随机从中选取一个来访问，账号多，所以每个账号被选中的概率就小，也就避免了单账号并发量过大的问题</p><h3 id="基于Session和Cookie的模拟登录爬取实战"><a href="#基于Session和Cookie的模拟登录爬取实战" class="headerlink" title="基于Session和Cookie的模拟登录爬取实战"></a>基于Session和Cookie的模拟登录爬取实战</h3><p>目标网站: <a class="link"   href="https://login2.scrape.center/%EF%BC%8C%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFadmin" >https://login2.scrape.center/，用户名和密码都是admin<i class="fas fa-external-link-alt"></i></a></p><p>下面开始分析过程</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先我们打开上面提供的目标网站然后F12，我么输入用户名和密码，我们可以看到:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-16_18-04-31.29ujuruzzsn4.webp"                      alt="Snipaste_2022-02-16_18-04-31"                ></p><p>这里就携带了一个Cookie，这个Cookie一般是有一定有效期的，我们可以直接把它放在Haders中去请求</p><h4 id="reqeust爬取"><a href="#reqeust爬取" class="headerlink" title="reqeust爬取"></a>reqeust爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Description :</span></span><br><span class="line"><span class="string">@File        : Login-scrape</span></span><br><span class="line"><span class="string">@Project     : test</span></span><br><span class="line"><span class="string">@Time        : 2022/2/16 18:09</span></span><br><span class="line"><span class="string">@Author      : LiHouJian</span></span><br><span class="line"><span class="string">@Software    : PyCharm</span></span><br><span class="line"><span class="string">@issue       :</span></span><br><span class="line"><span class="string">@change      :</span></span><br><span class="line"><span class="string">@reason      :</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&quot;https://login2.scrape.center/login&quot;</span></span><br><span class="line">index_url = <span class="string">&quot;https://login2.scrape.center/page/2&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于requests模块有自动处理重定向的能力，所以要加上allow_redirects=False</span></span><br><span class="line">res = requests.post(</span><br><span class="line">    login_url,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=data,</span><br><span class="line">    allow_redirects=<span class="literal">False</span>)</span><br><span class="line">cookies = res.cookies</span><br><span class="line">resp = requests.get(index_url, headers=headers, cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.url)</span><br></pre></td></tr></table></figure><p>最后打印的url如果和index_url一致这说明成功登录了，但是这样我们发现比较繁琐，每次请求都需要处理并传递一次Cookie，其实我们可以直接借助requests内置的Session对象帮我们自动处理Cookie，使用Session对像之后，requests会自动保存每次请求后设置的Cookie，并在下次请求的时候携带上它，这样就方便了，把上面的代码简化下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Description :</span></span><br><span class="line"><span class="string">@File        : Login-scrape</span></span><br><span class="line"><span class="string">@Project     : test</span></span><br><span class="line"><span class="string">@Time        : 2022/2/16 18:09</span></span><br><span class="line"><span class="string">@Author      : LiHouJian</span></span><br><span class="line"><span class="string">@Software    : PyCharm</span></span><br><span class="line"><span class="string">@issue       :</span></span><br><span class="line"><span class="string">@change      :</span></span><br><span class="line"><span class="string">@reason      :</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&quot;https://login2.scrape.center/login&quot;</span></span><br><span class="line">index_url = <span class="string">&quot;https://login2.scrape.center/page/2&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于requests模块有自动处理重定向的能力，所以要加上allow_redirects=False</span></span><br><span class="line">res = session.post(</span><br><span class="line">    login_url,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=data)</span><br><span class="line"><span class="comment"># cookies = res.cookies</span></span><br><span class="line">resp = session.get(index_url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.url)</span><br></pre></td></tr></table></figure><h4 id="Selenium爬取"><a href="#Selenium爬取" class="headerlink" title="Selenium爬取"></a>Selenium爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&#x27;https://login2.scrape.cuiqingcai.com/&#x27;</span></span><br><span class="line">LOGIN_URL = urljoin(BASE_URL, <span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">INDEX_URL = urljoin(BASE_URL, <span class="string">&#x27;/page/1&#x27;</span>)</span><br><span class="line">USERNAME = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(BASE_URL)</span><br><span class="line">browser.find_element_by_css_selector(<span class="string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).send_keys(USERNAME)</span><br><span class="line">browser.find_element_by_css_selector(<span class="string">&#x27;input[name=&quot;password&quot;]&#x27;</span>).send_keys(PASSWORD)</span><br><span class="line">browser.find_element_by_css_selector(<span class="string">&#x27;input[type=&quot;submit&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get cookies from selenium</span></span><br><span class="line">cookies = browser.get_cookies()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cookies&#x27;</span>, cookies)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># set cookies to requests</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">    session.cookies.<span class="built_in">set</span>(cookie[<span class="string">&#x27;name&#x27;</span>], cookie[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line"></span><br><span class="line">response_index = session.get(INDEX_URL)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Response Status&#x27;</span>, response_index.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Response URL&#x27;</span>, response_index.url)</span><br></pre></td></tr></table></figure><h3 id="基于JWT的模拟登录爬取实战"><a href="#基于JWT的模拟登录爬取实战" class="headerlink" title="基于JWT的模拟登录爬取实战"></a>基于JWT的模拟登录爬取实战</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>目标网站: <a class="link"   href="https://login3.scrape.center/" >https://login3.scrape.center/<i class="fas fa-external-link-alt"></i></a></p><p>用户名和密码同样是admin</p><p>我们打开这个网站然后看下后台向它发送了什么数据:</p><p><a href="https://imgtu.com/i/HhOUj1"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/16/HhOUj1.png"                      alt="HhOUj1.png"                ></a></p><p>我们可以看到服务器向客户端响应了一段字符串</p><p>然后我们再往后点击几页，我们会发现在请求头中正好有个<strong>Authorization</strong>字段包含了前面服务器向客户端响应的字符串，这就说明那就是我们在发送请求的时候需要夹带的数据</p><p>那么整个思路就变得简单了:</p><ul><li>模拟登录请求，带上必要的登录信息，获取返回的JWT</li><li>之后发送请求在请求头里面加上<strong>Authorization</strong>字段，值就是JWT对应的内容</li></ul><p>代码实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&#x27;https://login3.scrape.cuiqingcai.com/&#x27;</span></span><br><span class="line">LOGIN_URL = urljoin(BASE_URL, <span class="string">&#x27;/api/login&#x27;</span>)</span><br><span class="line">INDEX_URL = urljoin(BASE_URL, <span class="string">&#x27;/api/book&#x27;</span>)</span><br><span class="line">USERNAME = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line">response_login = requests.post(LOGIN_URL, json=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: USERNAME,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: PASSWORD</span><br><span class="line">&#125;)</span><br><span class="line">data = response_login.json()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Response JSON&#x27;</span>, data)</span><br><span class="line">jwt = data.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;JWT&#x27;</span>, jwt)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&#x27;jwt <span class="subst">&#123;jwt&#125;</span>&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response_index = requests.get(INDEX_URL, params=&#123;</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;offset&#x27;</span>: <span class="number">0</span></span><br><span class="line">&#125;, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Response Status&#x27;</span>, response_index.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Response URL&#x27;</span>, response_index.url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Response Data&#x27;</span>, response_index.json())</span><br></pre></td></tr></table></figure><h3 id="大规模账号池的搭建"><a href="#大规模账号池的搭建" class="headerlink" title="大规模账号池的搭建"></a>大规模账号池的搭建</h3><p>见P385</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很多情况下，网站的一些数据需要登录后才能查看，如果想要爬取这部分数据的话，就需要实现模拟登录的一些机制&lt;/p&gt;
&lt;p&gt;模拟登录现在主要分为两种模式，一种是基于Session和Cookie的模拟登录，一种是基于JWT(JSON Web Token)的模拟登录&lt;/p&gt;
&lt;p&gt;对</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第9章-代理的使用</title>
    <link href="http://example.com/2022/02/15/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC9%E7%AB%A0-%E4%BB%A3%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/02/15/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC9%E7%AB%A0-%E4%BB%A3%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-15T08:52:30.000Z</published>
    <updated>2022-02-16T08:10:30.077Z</updated>
    
    <content type="html"><![CDATA[<p>在使用爬虫的过程中经常会遇到这样的情况，爬虫最初还可以正常运行，正常爬取数据，一切看起来都是那么美好，然而一杯茶的功夫，就可能出现了错误，比如返回403或者啥的，出现这些现象的原因是网站采取了一些反爬措施，例如服务器会检测某个IP在单位时间内的请求次数，如果这个次数超过了指定的阈值，就直接拒绝服务，并返回一些错误信息，这种情况就称为封IP，既然服务器检测的是单位时间内某个IP在单位时间的请求次数，那么借助某种方式把IP伪装起来，让服务器识别不出是由我们本机发起的请求不就可以了</p><h3 id="代理的设置"><a href="#代理的设置" class="headerlink" title="代理的设置"></a>代理的设置</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>代理的基本原理可移步第一章，这样有助于更好地理解和学习以下内容；另外，需要先获取一个可用代理，代理就是IP地址和端口的组合，格式是<code>&lt;ip&gt;:&lt;port&gt;</code>；如果代理需要访问认证，则还需要额外的用户名和密码两个信息</p><p>那么如何获取一个可用代理呢，使用搜索引擎搜索代理两字，会返回许多代理服务网站，网站上提供了很多免费或付费代理，例如快代理的免费HTTP代理: https:<a class="link"   href="http://www.kuaidaili.com/free/%E5%B0%B1%E6%8F%90%E4%BE%9B%E4%BA%86%E5%BE%88%E5%A4%9A%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%EF%BC%8C%E4%BD%86%E5%9C%A8%E5%A4%A7%E5%A4%9A%E6%95%B0%E6%83%85%E5%86%B5%E4%B8%8B%E8%BF%99%E4%BA%9B%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E5%B9%B6%E4%B8%80%E5%AE%9A%E7%A8%B3%E5%AE%9A%EF%BC%8C%E6%89%80%E4%BB%A5%E6%AF%94%E8%BE%83%E9%9D%A0%E8%B0%B1%E7%9A%84%E8%BF%98%E6%98%AF%E8%B4%AD%E4%B9%B0%E4%BB%98%E8%B4%B9%E4%BB%A3%E7%90%86" >www.kuaidaili.com/free/就提供了很多免费代理，但在大多数情况下这些免费代理并一定稳定，所以比较靠谱的还是购买付费代理<i class="fas fa-external-link-alt"></i></a></p><p>除了购买付费代理，也可以在本机配置一些代理软件，具体的配制方法可以参考<a class="link"   href="https://setup.scrape.center/proxy-client" >https://setup.scrape.center/proxy-client<i class="fas fa-external-link-alt"></i></a></p><p>以下示例都是基于本机代理软件</p><h4 id="urllib的代理设置"><a href="#urllib的代理设置" class="headerlink" title="urllib的代理设置"></a>urllib的代理设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7890&#x27;</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.<span class="built_in">open</span>(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br></pre></td></tr></table></figure><p>这里需要借助ProxyHandler对象设置代理，参数是字典类型的数据，键名是协议类型，键值是代理地址(注意，此处的代理地址前面需要加上协议，即http://或者https://)，当请求链接使用的是HTTP协议时，使用http键名对应的代理地址， 反之就使用https</p><p>如果遇到需要认证的代理，可以使用如下方式设置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;username:password@127.0.0.1:7890&#x27;</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.<span class="built_in">open</span>(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br></pre></td></tr></table></figure><p>如果代理是SOCKS代理，那么可以使用如下方式设置代理，需要注意要在本机7891端口运行一个SOCKS代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">@File        : urllib_socks</span></span><br><span class="line"><span class="string">@Project     : test</span></span><br><span class="line"><span class="string">@Time        : 2022/2/15 17:25</span></span><br><span class="line"><span class="string">@Author      : LiHouJian</span></span><br><span class="line"><span class="string">@Software    : PyCharm</span></span><br><span class="line"><span class="string">@issue       : </span></span><br><span class="line"><span class="string">@change      : </span></span><br><span class="line"><span class="string">@reason      : </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">7891</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">response = request.urlopen(<span class="string">&#x27;https://www.httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e.reason)</span><br></pre></td></tr></table></figure><h4 id="requests的代理设置"><a href="#requests的代理设置" class="headerlink" title="requests的代理设置"></a>requests的代理设置</h4><p>对于requests来说，代理设置非常简单，只需要传入prosies参数即可，这里以我本机的代理为例，看一下requests的HTTP代理配置，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7890&#x27;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure><p>这里同样使用httpbin这个测试站点，这个返回的是一个json格式的数据，如果运行结果中的origin字段如果是代理服务器的IP，则证明代理已经设置成功</p><p>如果代理类型是SOCKS，可以使用如下方式设置代理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7891&#x27;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;socks5://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;socks5://&#x27;</span> + proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure><p>要运行以上代码我们要额外安装一个包requests[socks]，相关命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="string">&quot;requests[socks]&quot;</span></span><br></pre></td></tr></table></figure><p>另外还有一种设置SOCKS代理的方法，即使用socks模块，需要安装socks库，这种设置方式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">7891</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure><h4 id="httpx代理设置"><a href="#httpx代理设置" class="headerlink" title="httpx代理设置"></a>httpx代理设置</h4><p>httpx的用法本身就和requests的非常相似，所以也是通过proxies参数设置代理，不过也有不同，就是proxies参数的键名不能再是http或https，而需要改为http://或者https://</p><p>设置HTTP代理的方式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7890&#x27;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http://&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https://&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> httpx.Client(proxies=proxies) <span class="keyword">as</span> client:</span><br><span class="line">    response = client.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>对于需要认证的代理，也是在代理地址前加上用户名和密码，在使用的时候替换username和password字段:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy = <span class="string">&#x27;username:password@127.0.0.1:7890&#x27;</span></span><br></pre></td></tr></table></figure><p>对于SOCKS代理，需要安装httpx-socks[asyncio]库，安装方式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="string">&#x27;httpx-socks[asyncio]&#x27;</span></span><br></pre></td></tr></table></figure><p>与此同时需要设置同步模式或异步模式，同步模式的设置方式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">from</span> httpx_socks <span class="keyword">import</span> SyncProxyTransport</span><br><span class="line"></span><br><span class="line">transport = SyncProxyTransport.from_url(</span><br><span class="line">    <span class="string">&#x27;socks5://127.0.0.1:7891&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> httpx.Client(transport=transport) <span class="keyword">as</span> client:</span><br><span class="line">    response = client.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>异步模式的设置方式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> httpx_socks <span class="keyword">import</span> AsyncProxyTransport</span><br><span class="line"></span><br><span class="line">transport = AsyncProxyTransport.from_url(</span><br><span class="line">    <span class="string">&#x27;socks5://127.0.0.1:7891&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient(transport=transport) <span class="keyword">as</span> client:</span><br><span class="line">        response = <span class="keyword">await</span> client.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="Selenium的代理设置"><a href="#Selenium的代理设置" class="headerlink" title="Selenium的代理设置"></a>Selenium的代理设置</h4><p>对于无认证的代理设置如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7890&#x27;</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--proxy-server=http://&#x27;</span> + proxy)</span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>如果代理需要认证，则设置方式相对繁琐点:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">7890</span></span><br><span class="line">username = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"></span><br><span class="line">manifest_json = <span class="string">&quot;&quot;&quot;&#123;&quot;version&quot;:&quot;1.0.0&quot;,&quot;manifest_version&quot;: 2,&quot;name&quot;:&quot;Chrome Proxy&quot;,&quot;permissions&quot;: [&quot;proxy&quot;,&quot;tabs&quot;,&quot;unlimitedStorage&quot;,&quot;storage&quot;,&quot;&lt;all_urls&gt;&quot;,&quot;webRequest&quot;,&quot;webRequestBlocking&quot;],&quot;background&quot;: &#123;&quot;scripts&quot;: [&quot;background.js&quot;]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">background_js = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">var config = &#123;</span></span><br><span class="line"><span class="string">        mode: &quot;fixed_servers&quot;,</span></span><br><span class="line"><span class="string">        rules: &#123;</span></span><br><span class="line"><span class="string">          singleProxy: &#123;</span></span><br><span class="line"><span class="string">            scheme: &quot;http&quot;,</span></span><br><span class="line"><span class="string">            host: &quot;%(ip) s&quot;,</span></span><br><span class="line"><span class="string">            port: %(port) s</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.proxy.settings.set(&#123;value: config, scope: &quot;regular&quot;&#125;, function() &#123;&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function callbackFn(details) &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        authCredentials: &#123;username: &quot;%(username) s&quot;,</span></span><br><span class="line"><span class="string">            password: &quot;%(password) s&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.webRequest.onAuthRequired.addListener(</span></span><br><span class="line"><span class="string">            callbackFn,</span></span><br><span class="line"><span class="string">            &#123;urls: [&quot;&lt;all_urls&gt;&quot;]&#125;,</span></span><br><span class="line"><span class="string">            [&#x27;blocking&#x27;]</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % &#123;<span class="string">&#x27;ip&#x27;</span>: ip, <span class="string">&#x27;port&#x27;</span>: port, <span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;</span><br><span class="line"></span><br><span class="line">plugin_file = <span class="string">&#x27;proxy_auth_plugin.zip&#x27;</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(plugin_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> zp:</span><br><span class="line">    zp.writestr(<span class="string">&quot;manifest.json&quot;</span>, manifest_json)</span><br><span class="line">    zp.writestr(<span class="string">&quot;background.js&quot;</span>, background_js)</span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&quot;--start-maximized&quot;</span>)</span><br><span class="line">options.add_extension(plugin_file)</span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>这里在本地创建了一个manifest.json配置文件和background.js脚本来设置认证代理，运行代码后本地会生成一个proxy_auth_plugin.zip文件来保存当前的配置，SOCKS代理的配置方式也比较简单，如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7891&#x27;</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--proxy-server=socks5://&#x27;</span> + proxy)</span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h4 id="aiohttp代理设置"><a href="#aiohttp代理设置" class="headerlink" title="aiohttp代理设置"></a>aiohttp代理设置</h4><p>对于aiohttp，可以通过proxy参数直接设置代理，HTTP设置方式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>, proxy=proxy) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">await</span> response.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>如果代理需要认证，就把代理地址修改下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy = <span class="string">&#x27;http://username:password@127.0.0.1:7890&#x27;</span></span><br></pre></td></tr></table></figure><p>对于SOCKS代理，需要安装一个aiohttp-socks库，安装方式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiohttp-socks</span><br></pre></td></tr></table></figure><p>可以借助这个库的ProxyConnector方法来设置SOCKS代理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">from</span> aiohttp_socks <span class="keyword">import</span> ProxyConnector, ProxyType</span><br><span class="line"></span><br><span class="line"><span class="comment"># connector = ProxyConnector.from_url(&#x27;socks5://127.0.0.1:7891&#x27;)</span></span><br><span class="line"></span><br><span class="line">connector = ProxyConnector(</span><br><span class="line">    proxy_type=ProxyType.HTTP,</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">7890</span>,</span><br><span class="line">    <span class="comment"># username=&#x27;user&#x27;,</span></span><br><span class="line">    <span class="comment"># password=&#x27;password&#x27;,</span></span><br><span class="line">    <span class="comment"># rdns=True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=connector) <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">await</span> response.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>另外，aiohttp-socks库还支持SOCKS4代理、HTTP代理以及需要认证的代理，详情可以参见官方介绍</p><h4 id="Pyppeteer的代理设置"><a href="#Pyppeteer的代理设置" class="headerlink" title="Pyppeteer的代理设置"></a>Pyppeteer的代理设置</h4><p>对于Pyppeteer，由于其默认使用的是类似Chrome的Chromium浏览器，因此代理的设置方式和使用Chrome的Selenium一样，都是通过args参数设置HTTP代理的，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7890&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--proxy-server=http://&#x27;</span> + proxy], <span class="string">&#x27;headless&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">await</span> page.content())</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>SOCKS代理也一样，只需要将协议修改为socks5即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:7891&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--proxy-server=socks5://&#x27;</span> + proxy], <span class="string">&#x27;headless&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">await</span> page.content())</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="Playwright的代理设置"><a href="#Playwright的代理设置" class="headerlink" title="Playwright的代理设置"></a>Playwright的代理设置</h4><p>HTTP代理设置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>, proxy=&#123;</span><br><span class="line">        <span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:7890&#x27;</span>  <span class="comment"># 填入代理地址</span></span><br><span class="line">    &#125;)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(page.content())</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>SOCKS代理设置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(proxy=&#123;</span><br><span class="line">        <span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;socks5://127.0.0.1:7891&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(page.content())</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>需要认证的代理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(proxy=&#123;</span><br><span class="line">        <span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:7890&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(page.content())</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><h3 id="代理池的维护"><a href="#代理池的维护" class="headerlink" title="代理池的维护"></a>代理池的维护</h3><p>前面在代理的设置中了解了给各个请求库设置代理的方法，如何实时高效地获取大量可用代理变成了新的问题</p><p>首先，互联网上有大量公开免费的代理，当然我们也可以购买付费代理，但无论是免费代理还是付费代理，都不能保证是可用的，因为自己选用的IP，可能别人也在使用，爬取的还是同样的目标网站，从而被封禁，或者代理服务器突然发生故障、网络繁忙；一旦选用的是一个不可用的代理，势必就会影响爬虫的工作效率，所以我们要提前做筛选，删除掉不可用的代理，只保留可用的代理，那么怎么实现呢？这就需要借助一个叫代理池的东西了，下面我们就来看看如何搭建一个高效易用的代理池:</p><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><p>存储代理池需要借助Redis数据库，因此需要额外安装Redis数据库；整体来讲，需要的环境如下:</p><ul><li><p>安装并成功运行和连接一个Redis数据库，它运行在本地或者远端服务器都行，只要能正常连接就行，安装的方式可以参考: <a class="link"   href="https://setup.scrape.center/redis" >https://setup.scrape.center/redis<i class="fas fa-external-link-alt"></i></a></p></li><li><p>安装好一些必要的库，包括aiohttp、requests、redis-py、pyquery、Flask、loguru等，安装命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiohttp requests redis pyquery flask loguru</span><br></pre></td></tr></table></figure></li></ul><h4 id="代理池四大基本模块"><a href="#代理池四大基本模块" class="headerlink" title="代理池四大基本模块"></a>代理池四大基本模块</h4><p>代理池分为4个基本模块: 存储模块、获取模块、检测模块和接口模块；各模块的功能如下:</p><ul><li>存储模块: 负责存储爬取下来的代理，首先要保证代理不重复，标识代理的可用情况，其次要动态实时地处理每个代理，一种比较高效和方便的存储方式就是Redis的Sorted Set，即有序集合</li><li>获取模块: 负责定时在各大代理网站爬取代理，代理既可以是免费公开的，也可以是付费的，形式都是IP加端口，此模块尽量从不同来源爬取，并且尽量爬取高匿代理，爬取成功后存储到存储模块中</li><li>检测模块: 用负责定时检测存储模块中的代理是否可用，这里需要设置一个检测链接，最好是设置为要爬取的那个网站，这样更具有针对性；对于一个通用型的代理，可以设置为百度等链接；另外，需要标识每一个代理的状态，例如设置分数表示，100分代表可用，分数越少代表越不可用；经检测，如果代理可用，可以将立即设置为满分100，也可以在原分数基础上加1；如果代理不可用，就将分数标识减1，当分数减到一定阈值后，直接从存储模块中删除此代理，这样就可以标识代理的可用情况，在选用的时候也会更加有针对性</li><li>接口模式: 用API提供对外服务的接口。其实我们可以直接连接数据库来获取对应的数据，但这样需要知道数据库的连接信息，并且要配置连接；比较安全和方便的方式是提供一个Web API接口，访问这个接口即可拿到可用代理；另外，由于可用代理可能有多个，所以可以设置一个随机返回某个可用代理的接口，这样就能保证每个可用代理都有机会被获取，实现负载均衡</li></ul><h4 id="代理池的整体架构"><a href="#代理池的整体架构" class="headerlink" title="代理池的整体架构"></a>代理池的整体架构</h4><p>根据上面的描述，代理池的架构可以是是这样的:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220216/Snipaste_2022-02-16_09-40-07.47c4lwlj5sg0.webp"                      alt="Snipaste_2022-02-16_09-40-07"                ></p><p>以上代理池架构分为四个部分，获取模块、存储模块、检测模块、接口模块</p><ul><li>存储模块使用 Redis 的有序集合，用以代理的去重和状态标识，同时它也是中心模块和基础模块，将其他模块串联起来</li><li>获取模块定时从代理网站获取代理，将获取的代理传递给存储模块，保存到数据库</li><li>检测模块定时通过存储模块获取所有代理，并对其进行检测，根据不同的检测结果对代理设置不同的标识</li><li>接口模块通过 Web API 提供服务接口，其内部还是连接存储模块，获取可用的代理</li></ul><h4 id="代理池的实现"><a href="#代理池的实现" class="headerlink" title="代理池的实现"></a>代理池的实现</h4><p>代码量大，源码地址为: <a class="link"   href="https://github.com/Python3WebSpider/ProxyPool" >https://github.com/Python3WebSpider/ProxyPool<i class="fas fa-external-link-alt"></i></a><br>对代码的解释可详见: <a class="link"   href="https://cuiqingcai.com/7048.html" >https://cuiqingcai.com/7048.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="付费代理的使用"><a href="#付费代理的使用" class="headerlink" title="付费代理的使用"></a>付费代理的使用</h3><h4 id="付费代理的分类以及代理商推荐"><a href="#付费代理的分类以及代理商推荐" class="headerlink" title="付费代理的分类以及代理商推荐"></a>付费代理的分类以及代理商推荐</h4><ul><li>一类是代理商提供代理提取接口的付费代理，我们可以通过接口获取这类代理组成的列表，这类代理地址的IP和端口都是可见的，想用哪个就用哪个，灵活操作即可，这类代理一般会按照时间或者量来收费，比较有代表性的的有快代理(<a class="link"   href="https://www.kuaidaili.com/)%E3%80%81%E8%8A%9D%E9%BA%BB%E4%BB%A3%E7%90%86(https://www.zhimaruanjian.com/)%E5%92%8C%E5%A4%9A%E8%B4%9D%E4%BB%A3%E7%90%86(http://www.dobel.cn)%E7%AD%89" >https://www.kuaidaili.com/)、芝麻代理(https://www.zhimaruanjian.com/)和多贝代理(http://www.dobel.cn)等<i class="fas fa-external-link-alt"></i></a></li><li>另一类是代理商搭建了隧道代理的付费代理，我们可以直接把此类代理设置为固定的IP和端口，无需进一步通过请求接口获取随机代理并设置；在这种情况下，我们只需要知道一个固定的代理服务器地址即可，代理商会在背后进一步将我们发出的请求分发给不同的代理服务器并做负载均衡，同时代理商会负责维护背后的整个代理池，因此开发者使用起来更加方便，但这样就无法自由控制设置哪个IP了；比较有代表性的这类代理有阿布云代理(<a class="link"   href="https://www.abuyun.com/)%E3%80%81%E5%BF%AB%E4%BB%A3%E7%90%86(https://www.kuaidaili.com/)%E5%92%8C%E5%A4%9A%E8%B4%9D%E4%BB%A3%E7%90%86(http://www.dobel.cn)%E7%AD%89" >https://www.abuyun.com/)、快代理(https://www.kuaidaili.com/)和多贝代理(http://www.dobel.cn)等<i class="fas fa-external-link-alt"></i></a></li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>至于如何使用，在对应服务商购买之后应该会有相应的教程</p><p><a class="link"   href="https://cuiqingcai.com/7051.html" >https://cuiqingcai.com/7051.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="ADSL拨号代理的搭建方法"><a href="#ADSL拨号代理的搭建方法" class="headerlink" title="ADSL拨号代理的搭建方法"></a>ADSL拨号代理的搭建方法</h3><p>这个详情见: <a class="link"   href="https://cuiqingcai.com/3443.html" >https://cuiqingcai.com/3443.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="代理反爬案例爬取实战"><a href="#代理反爬案例爬取实战" class="headerlink" title="代理反爬案例爬取实战"></a>代理反爬案例爬取实战</h3><h4 id="实战目标"><a href="#实战目标" class="headerlink" title="实战目标"></a>实战目标</h4><p>以一个IP反爬网站为例进行一次实战演练，该网站限制单个IP</p><p>每五分钟最多访问10次，访问次数超过10，该网站便会封锁该IP，并返回403状态码，10分钟后才解除封锁</p><h4 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h4><p>首先需要准备并正常运行代理池，还需要安装好一些Python库—requests、redis-py、environs、pyquery和loguru，安装命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests redis-py environs pyquery loguru</span><br></pre></td></tr></table></figure><h4 id="爬取分析"><a href="#爬取分析" class="headerlink" title="爬取分析"></a>爬取分析</h4><p>目标网站: <a class="link"   href="https://antispider5.scrape.center/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80%E5%90%8E%E7%9C%8B%E4%B8%8A%E5%8E%BB%E5%92%8C%E4%B9%8B%E5%89%8D%E6%B2%A1%E6%9C%89%E5%95%A5%E4%B8%8D%E5%90%8C%EF%BC%8C%E4%BD%86%E8%BF%99%E9%87%8C%E7%BD%91%E7%AB%99%E5%A2%9E%E5%8A%A0%E4%BA%86IP%E5%8F%8D%E7%88%AC%E6%9C%BA%E5%88%B6%EF%BC%8C%E9%99%90%E5%88%B6%E5%8D%95%E4%B8%AAIP%E7%9A%84%E8%AE%BF%E9%97%AE%E6%AC%A1%E6%95%B0%EF%BC%8C%E5%9C%A85%E5%88%86%E9%92%9F%E5%86%85%E8%B6%85%E8%BF%87%E5%8D%81%E6%AC%A1%E8%AE%BF%E9%97%AE%E5%B0%B1%E4%BC%9A%E5%B0%81IP%EF%BC%8C%E4%BD%86%E5%A6%82%E6%9E%9C%E6%AD%A4%E6%97%B6%E5%88%87%E6%8D%A2%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%EF%BC%8C%E4%BE%8B%E5%A6%82%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E7%83%AD%E7%82%B9%EF%BC%8C%E6%80%BB%E4%B9%8B%E8%AE%A9%E8%AE%BF%E9%97%AE%E7%9B%AE%E6%A0%87%E7%BD%91%E7%AB%99%E6%89%80%E7%94%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80%E5%8F%91%E7%94%9F%E6%94%B9%E5%8F%98%EF%BC%8C%E5%B0%B1%E5%8F%88%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E4%BA%86%EF%BC%8C%E4%B9%9F%E6%98%AF%E5%B0%B1%E8%AF%B4%EF%BC%8C%E8%A6%81%E6%83%B3%E5%9C%A8%E7%9F%AD%E6%97%B6%E9%97%B4%E5%86%85%E7%88%AC%E5%8F%96%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%BE%97%E6%9B%B4%E6%8D%A2%E5%A4%9A%E4%B8%AAIP%E8%BF%9B%E8%A1%8C%E7%88%AC%E5%8F%96%EF%BC%8C%E8%BF%99%E5%B0%B1%E5%BE%97%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E4%BA%86" >https://antispider5.scrape.center/，这个网页打开后看上去和之前没有啥不同，但这里网站增加了IP反爬机制，限制单个IP的访问次数，在5分钟内超过十次访问就会封IP，但如果此时切换一个网络环境，例如使用手机热点，总之让访问目标网站所用的IP地址发生改变，就又可以看到页面正常显示了，也是就说，要想在短时间内爬取这个网站的所有数据，得更换多个IP进行爬取，这就得使用代理了<i class="fas fa-external-link-alt"></i></a></p><p>由于我们无法预知某个代理是否能完成一个正常的爬取，因此可能请求成功也可能请求失败，失败原因可能是网站封锁了该代理，或者代理本身失效了；为了保证正常爬取，我们需要添加重试机制，以确保请求失败的时候可以再次爬取，直到成功</p><p>那怎么实现失败后的重试呢，我们可以使用队列，当请求失败时，把对应的请求加入队列里，等待下次被调用，队列的实现方式有很多，本节我们选用Redis实现，简单高效</p><p>本案例的实现步骤如下:</p><ul><li> 构造Redis爬取队列，用队列存取请求</li><li>实现异常处理，把失败的请求重新加入队列</li><li>解析列表页的数据，将爬取详情页和下一页的请求加入队列</li><li>提取详情页的信息</li></ul><h4 id="构造请求对象"><a href="#构造请求对象" class="headerlink" title="构造请求对象"></a>构造请求对象</h4><p>既然要用队列存储请求，就肯定要实现一个请求的数据结构，这个请求需要包含一些必要信息，例如请求链接、请求头、请求方式和超时时间；另外，对于一个请求，需要实现对应的方法来处理它的响应，那么就需要加一个回调函数callback；如果一个请求的失败次数太多，就不会再重新请求了，所以还需要增加失败次数的记录；用这些内容组成一个完整的请求对象并放入队列等待被调度，从队列获取出这个对象后直接执行就行了</p><p>我们可以采用继承requests库中的Request对象的方式实现这个数据结构；requests库中已经存在Request对象，它将请求作为一个整体对象去执行，得到响应后再返回；其实requests库里的get、post等方法都是通过Request对象实现的，我们先来看看Request对象的部分源代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span>(<span class="params">RequestHooksMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="params"><span class="function">            method=<span class="literal">None</span>, url=<span class="literal">None</span>, headers=<span class="literal">None</span>, files=<span class="literal">None</span>, data=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            params=<span class="literal">None</span>, auth=<span class="literal">None</span>, cookies=<span class="literal">None</span>, hooks=<span class="literal">None</span>, json=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Default empty dicts for dict params.</span></span><br><span class="line">        data = [] <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> data</span><br><span class="line">        files = [] <span class="keyword">if</span> files <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> files</span><br><span class="line">        headers = &#123;&#125; <span class="keyword">if</span> headers <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> headers</span><br><span class="line">        params = &#123;&#125; <span class="keyword">if</span> params <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> params</span><br><span class="line">        hooks = &#123;&#125; <span class="keyword">if</span> hooks <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> hooks</span><br><span class="line"></span><br><span class="line">        self.hooks = default_hooks()</span><br><span class="line">        <span class="keyword">for</span> (k, v) <span class="keyword">in</span> <span class="built_in">list</span>(hooks.items()):</span><br><span class="line">            self.register_hook(event=k, hook=v)</span><br><span class="line"></span><br><span class="line">        self.method = method</span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = headers</span><br><span class="line">        self.files = files</span><br><span class="line">        self.data = data</span><br><span class="line">        self.json = json</span><br><span class="line">        self.params = params</span><br><span class="line">        self.auth = auth</span><br><span class="line">        self.cookies = cookies</span><br></pre></td></tr></table></figure><p>这是 requests 库中 Request 对象的构造方法。这个 Request 已经包含了请求方式、请求链接、请求头这几个属性，但是相比我们需要的还差了几个。我们需要实现一个特定的数据结构，在原先基础上加入上文所提到的额外几个属性。这里我们需要继承 Request 对象重新实现一个请求，将它定义为 MovieRequest，实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIMEOUT = <span class="number">10</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieRequest</span>(<span class="params">Request</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, callback, method=<span class="string">&#x27;GET&#x27;</span>, headers=<span class="literal">None</span>, need_proxy=<span class="literal">False</span>, fail_time=<span class="number">0</span>, timeout=TIMEOUT</span>):</span></span><br><span class="line">        Request.__init__(self, method, url, headers)</span><br><span class="line">        self.callback = callback</span><br><span class="line">        self.fail_time = fail_time</span><br><span class="line">        self.timeout = timeout</span><br></pre></td></tr></table></figure><p>这里我们实现了MovieRequest类，代码保存为request.py，在构造方法中先调用了Request类的构造方法，然后加入了几个额外的参数，分别定义为callback、fail_time和timeout，代表回调函数、失败次数和超时时间</p><p>之后就可以将MovieRequest作为一个整体来执行，各个MovieRequest对象都是独立的，每个请求都有自己的属性；例如，调用请求的callback属性就可以知道应该用什么方法处理这个请求的响应，调用fail_time就可以知道这个请求失败了多少次，继而判断失败次数是否达到阈值，该不该丢弃这个请求</p><h4 id="实现请求队列"><a href="#实现请求队列" class="headerlink" title="实现请求队列"></a>实现请求队列</h4><p>接下来我们就需要构造请求队列，实现请求的存取。存取无非就是两个操作，一个是放，一个是取，所以这里利用 Redis 的 rpush () 和 lpop () 方法即可。 另外还需要注意，存取不能直接存 Request 对象，Redis 里面存的是字符串。所以在存 Request 对象之前我们先把它序列化，取出来的时候再将其反序列化，这个过程可以利用 pickle 模块实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> dumps, loads</span><br><span class="line"><span class="keyword">from</span> request <span class="keyword">import</span> MovieRequest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisQueue</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化 Redis&quot;&quot;&quot;</span></span><br><span class="line">        self.db = StrictRedis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        向队列添加序列化后的 Request</span></span><br><span class="line"><span class="string">        :param request: 请求对象</span></span><br><span class="line"><span class="string">        :param fail_time: 失败次数</span></span><br><span class="line"><span class="string">        :return: 添加结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(request, MovieRequest):</span><br><span class="line">            <span class="keyword">return</span> self.db.rpush(REDIS_KEY, dumps(request))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        取出下一个 Request 并反序列化</span></span><br><span class="line"><span class="string">        :return: Request or None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.db.llen(REDIS_KEY):</span><br><span class="line">            <span class="keyword">return</span> loads(self.db.lpop(REDIS_KEY))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.db.llen(REDIS_KEY) == <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这里实现了一个 RedisQueue类，代码文件保存为db.py，它的 <strong>init</strong>() 构造方法里面初始化了一个 StrictRedis 对象。随后实现了 add () 方法，首先判断 Request 的类型，如果是 MovieRequest，那么就把程序就会用 pickle 的 dumps () 方法序列化，然后再调用 rpush () 方法加入队列。pop () 方法则相反，调用 lpop () 方法将请求从队列取出，然后再用 pickle 的 loads () 方法将其转为 MovieRequest 对象。另外，empty () 方法返回队列是否为空，只需要判断队列长度是否为 0 即可。 在调度的时候，我们只需要新建一个 RedisQueue 对象，然后调用 add () 方法，传入 MovieRequest 对象，即可将 MovieRequest 加入队列，调用 pop () 方法，即可取出下一个 MovieRequest对象，非常简单易用</p><h4 id="修改代理池"><a href="#修改代理池" class="headerlink" title="修改代理池"></a>修改代理池</h4><p>现在我们要找一些可用代理，这里直接使用崔庆才先生所构建的代理池，我已根据<a class="link"   href="https://github.com/Python3WebSpider/ProxyPool" >此链接<i class="fas fa-external-link-alt"></i></a>在云服务器上构建好5555端口的接口，接口地址为: <a class="link"   href="http://175.24.172.64:5555/random%EF%BC%8C%E6%88%91%E4%BB%AC%E5%86%8D%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E7%94%A8%E6%9D%A5%E8%8E%B7%E5%8F%96%E5%8F%AF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95" >http://175.24.172.64:5555/random，我们再定义一个用来获取可用代理的方法<i class="fas fa-external-link-alt"></i></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PROXY_ROOT_RUL = <span class="string">&#x27;http://175.24.172.64:5555/random&#x27;</span></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        get proxy from proxypool</span></span><br><span class="line"><span class="string">        :return: proxy</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = requests.get(PROXY_POOL_URL)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            logger.debug(<span class="string">f&#x27;get proxy <span class="subst">&#123;response.text&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br></pre></td></tr></table></figure><p>这里有个小技巧，我们使用loguru日志库里的catch方法作为get_proxy方法的装饰器，这样可以在请求代理池失败的时候输出具体的报错信息，同时又不会中断程序运行，也避免了编写try/catch语句的麻烦，使得代码看起来更简洁</p><h4 id="第一个请求"><a href="#第一个请求" class="headerlink" title="第一个请求"></a>第一个请求</h4><p>一切工作都做好了，现在我们就可以构造第一个请求请求并放在队列里以供调度了，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> core.db <span class="keyword">import</span> RedisQueue</span><br><span class="line"><span class="keyword">from</span> core.request <span class="keyword">import</span> MovieRequest</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&#x27;https://antispider5.scrape.center/&#x27;</span></span><br><span class="line">HEADERS = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>():</span></span><br><span class="line">    session = Session()  <span class="comment"># Session对象</span></span><br><span class="line">    queue = RedisQueue()  <span class="comment"># RedisQueue对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        start request</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.session.headers.update(HEADERS)  <span class="comment"># 全局更新了HEADERS</span></span><br><span class="line">        start_url = BASE_URL</span><br><span class="line">        request = MovieRequest(</span><br><span class="line">            url=start_url, callback=self.parse_index)</span><br><span class="line">        <span class="comment"># schedule first request</span></span><br><span class="line">        self.queue.add(request)  <span class="comment"># 请求入队</span></span><br></pre></td></tr></table></figure><p>这里先定义了两个全局变量，BASE_URL代表目标网站的URL，HEADERS代表请求头，然后定义了Spider类，代码保存为spider.py</p><h4 id="调度请求"><a href="#调度请求" class="headerlink" title="调度请求"></a>调度请求</h4><p>把第一个请求加入队列之后，就可以开始调度执行了；首先从队列中取出这个请求，将它的结果解析出来，生成新的请求加入队列，然后拿出新的请求，将结果解析，再将新生成的请求加入队列，这样循环执行，直到队列中没有请求，代表爬虫结束</p><p>我们在Spider类中添加scheduler方法，实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedule</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        schedule request</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.queue.empty():</span><br><span class="line">            request = self.queue.pop()</span><br><span class="line">            callback = request.callback</span><br><span class="line">            logger.debug(<span class="string">f&#x27;executing request <span class="subst">&#123;request.url&#125;</span>&#x27;</span>)</span><br><span class="line">            response = self.request(request)</span><br><span class="line">            logger.debug(<span class="string">f&#x27;response status <span class="subst">&#123;response&#125;</span> of <span class="subst">&#123;request.url&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> response <span class="keyword">or</span> <span class="keyword">not</span> response.status_code <span class="keyword">in</span> VALID_STATUSES:</span><br><span class="line">                self.error(request)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            results = <span class="built_in">list</span>(callback(response))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> results:</span><br><span class="line">                self.error(request)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(result, MovieRequest):</span><br><span class="line">                    logger.debug(<span class="string">f&#x27;generated new request <span class="subst">&#123;result.url&#125;</span>&#x27;</span>)</span><br><span class="line">                    self.queue.add(result)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(result, <span class="built_in">dict</span>):</span><br><span class="line">                    logger.debug(<span class="string">f&#x27;scraped new data <span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>scheduler方法的内部是一个wihle循环，该循环内部的判断条件是队列不为空；当队列不为空时，调用pop方法取出下一个请求，然后调用request方法执行这个请求，request方法的实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        execute request</span></span><br><span class="line"><span class="string">        :param request: weixin request</span></span><br><span class="line"><span class="string">        :return: response</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            proxy = self.get_proxy()</span><br><span class="line">            logger.debug(<span class="string">f&#x27;get proxy <span class="subst">&#123;proxy&#125;</span>&#x27;</span>)</span><br><span class="line">            proxies = &#123;</span><br><span class="line">                <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">                <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#x27;</span> + proxy</span><br><span class="line">            &#125; <span class="keyword">if</span> proxy <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> self.session.send(request.prepare(),</span><br><span class="line">                                     timeout=request.timeout,</span><br><span class="line">                                     proxies=proxies)</span><br><span class="line">        <span class="keyword">except</span> RequestException:</span><br><span class="line">            logger.exception(<span class="string">f&#x27;requesting <span class="subst">&#123;request.url&#125;</span> failed&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上request方法也可以不用try/catch方法采用logger中的catch装饰器，在这个方法中，首先调用get_proxy()获取代理，然后将代理赋值给proxies字典，接着调用session变量的send方法执行这个请求，这里调用prepare方法将请求转化为了Prepared Request对象(具体可看2.2节)，timeout属性是该请求的超时时间，proxies属性就是刚才声明的代理，最后返回send方法的执行结果</p><p>执行request方法之后会得到两种结果，一种是False，即请求失败，连接错误；另一种是Response对象，即请求成功后返回的结果，需要判断其中的状态码，如果状态码合法，就对返回结果进行解析，否则将请求重新放入队列</p><p>之后的就自己看代码了: <a class="link"   href="https://github.com/Python3WebSpider/ScrapeAntispider5" >https://github.com/Python3WebSpider/ScrapeAntispider5<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用爬虫的过程中经常会遇到这样的情况，爬虫最初还可以正常运行，正常爬取数据，一切看起来都是那么美好，然而一杯茶的功夫，就可能出现了错误，比如返回403或者啥的，出现这些现象的原因是网站采取了一些反爬措施，例如服务器会检测某个IP在单位时间内的请求次数，如果这个次数超过了指</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第7章-JavaScript动态渲染页面抓取</title>
    <link href="http://example.com/2022/02/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC7%E7%AB%A0-JavaScript%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%8A%93%E5%8F%96/"/>
    <id>http://example.com/2022/02/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC7%E7%AB%A0-JavaScript%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%8A%93%E5%8F%96/</id>
    <published>2022-02-11T02:09:30.000Z</published>
    <updated>2022-02-24T09:34:55.231Z</updated>
    
    <content type="html"><![CDATA[<p>在第5章中，我们了解了Ajax数据的分析和爬取方式，其实这也是JavaScript动态渲染页面的一种情形，通过直接分析Ajax，使我们仍然可以借助request或urllib实现数据爬取，不过JavaScript动态渲染不止Ajax一种，有些页面的分页部分由JavaScript生成，而非原始HTML代码，这其中并不包含Ajax请求；如Echarts的<a class="link"   href="http://echarts.baidu.com/demo.html" >官方实例<i class="fas fa-external-link-alt"></i></a>，其图形都是经过JavaScript计算之后生成的，还有类似淘宝这种页面，即使是Ajax获取的数据，其Ajax接口中也含有很多加密参数，使我们很难直接找出规律</p><p>为了解决这些问题，我们可以直接模拟浏览器运行，然后爬取数据，这样就能做到在浏览器中看到的内容是什么样，爬取的源码就是什么样—所见即所爬；此时我们无需去管网页内部的JavaScript使用什么算法渲染页面，也不用管网页后台的Ajax接口到底还有哪些参数</p><p>Python提供了很多模拟浏览器运行的库，例如Selenium、Splash、Pyppeter、Playwright等，我们可以借助这些库来完成爬取动态渲染的页面</p><h3 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a>Selenium的使用</h3><p>很多情况下，Ajax的请求接口会含有加密参数，例如token、sing等，由于请求Ajax接口时必须加上token等参数，因此如果深入分析并找到token等参数的构造逻辑，是很难模拟Ajax请求的</p><p>方法通常有两种:</p><ul><li>深挖其中的逻辑，把token参数的构造逻辑完全找出来，再用Python代码实现</li><li>模拟浏览器的运行，爬取数据</li></ul><p>Selenium是一个自动化测试工具，利用它可以驱动浏览器完成特定的操作，例如点击，下拉等，还可以获取浏览器当前呈现的页面的源代码，做到所见即所爬，对于一些JavaScript动态渲染的页面，这种爬取方式非常有效</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>安装Chrome浏览器</li><li>安装Selenium这个包</li><li>安装并配置好ChormDriver这个驱动</li></ul><p>具体准备工作各个模块的安装步骤，可参见: <a class="link"   href="https://setup.scrape.center/selenium" >https://setup.scrape.center/selenium<i class="fas fa-external-link-alt"></i></a></p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>我们首先大体来看看Selenium的功能:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="built_in">input</span> = browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)  <span class="comment"># 找到这个元素</span></span><br><span class="line">    <span class="built_in">input</span>.send_keys(<span class="string">&#x27;Python&#x27;</span>)  <span class="comment"># 相当于在搜索框中键入Python</span></span><br><span class="line">    <span class="built_in">input</span>.send_keys(Keys.ENTER)  <span class="comment"># 相当于点击搜索键</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)  <span class="comment"># 给浏览器一定的加载时间，不然会出错</span></span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;content_left&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(browser.current_url)  <span class="comment"># 输出浏览器当前所处理的url</span></span><br><span class="line">    <span class="built_in">print</span>(browser.get_cookies())  <span class="comment"># 输出当前的Cookie</span></span><br><span class="line">    <span class="built_in">print</span>(browser.page_source)  <span class="comment"># 输出网页源代码</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()  <span class="comment"># 关闭浏览器</span></span><br></pre></td></tr></table></figure><p>运行以上代码之后会打开一个Chrome浏览器，浏览器会跳转到百度页面，然后在搜索框中输入Python，就会跳转到搜索结果页面:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-11_11-12-49.3yazzttcewc0.webp"                      alt="Snipaste_2022-02-11_11-12-49"                ></p><p>下面详细了解下Selenium的用法:</p><h4 id="初始化浏览器对象"><a href="#初始化浏览器对象" class="headerlink" title="初始化浏览器对象"></a>初始化浏览器对象</h4><p>我们可以用如下方式初始化浏览器对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> Webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure><h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> Webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>以上代码弹出浏览器并且自动访问了淘宝，打印了页面代码之后关闭浏览器</p><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><h5 id="单个节点"><a href="#单个节点" class="headerlink" title="单个节点"></a>单个节点</h5><p>我们要想从淘宝页面中提取搜索框这个节点，首先就要观察这个页面的源代码，我们发现淘宝页面输入框的id属性值是q，name属性值也是q，此外，还有许多其他属性，我们可以用多种方式获取它们，例如<code>find_element_by_name</code>是根据name属性获取，<code>find_element_by_id</code>是根据id属性获取，此外还有更新Xpth、CSS选择器等的获取方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">&#x27;q&#x27;</span>)  <span class="comment"># 根据name属性获取</span></span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">&#x27;#q&#x27;</span>)  <span class="comment"># 用CSS选择器方式</span></span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;q&quot;]&#x27;</span>)  <span class="comment"># 用Xpth方式</span></span><br><span class="line"><span class="built_in">print</span>(input_first, input_second, input_third)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>获取单个节点可以使用如下方式:</p><ul><li>find_element_by_id()</li><li>find_element_by_name()</li><li>find_element_by_xpath()</li><li>find_element_by_link_text()</li><li>find_element_by_partial_link_text()</li><li>find_element_by_tag_name()</li><li>find_element_by_class_name()</li><li>find_element_by_css_selector</li></ul><p>除了上述方法，Selenium还提供了通用方法find_element()，比如find_element_by_id(id)就等价于find_element(By.ID, id)，我们来看下实例代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">input_first = browser.find_element(By.ID, <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(input_first)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h5 id="多个节点"><a href="#多个节点" class="headerlink" title="多个节点"></a>多个节点</h5><p>单个节点使用find_element()，如果目标节点是多个，那就使用find_elements()，首先我们同样来看看单个方法的方式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">&#x27;.service-bd li&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>以上返回的节点都是WebElement类型，使用find_elements_by…就可返回多个节点，获取多个节点可以使用方式:</p><ul><li>find_elements_by_id()</li><li>find_elements_by_name()</li><li>find_elements_by_xpath()</li><li>find_elements_by_link_text()</li><li>find_elements_by_partial_link_text()</li><li>find_elements_by_tag_name()</li><li>find_elements_by_class_name()</li><li>find_elements_by_css_selector</li></ul><p>同样的，我们也可直接使用find_elements()，以上代码可以改写为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lis = browser.find_elements(By.CSS_SELECTO<span class="string">R&#x27;.service-bd li&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="节点交互"><a href="#节点交互" class="headerlink" title="节点交互"></a>节点交互</h4><p>Selenium可以驱动浏览器执行一些操作，比较常见的用法有:用send_keys()输入文字，用clear()清空文字，用click()点击按钮，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element_by_id(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPhone&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">input</span>.clear()</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPad&#x27;</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">&#x27;btn-search&#x27;</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><h4 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h4><p>上面提到的都是单个动作，但是我们如果要完成比如鼠标拖拽、键盘按键这些操作时，那就需要用另一种方式执行，那就是动作链</p><p>例如，可以这样实现拖拽的动作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)  <span class="comment"># 切换frame，因为节点在子页面</span></span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">&#x27;#draggable&#x27;</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">&#x27;#droppable&#x27;</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()  <span class="comment"># 执行</span></span><br></pre></td></tr></table></figure><p>由于我的chrome的安装问题这里就不贴案例图片了</p><h4 id="运行JavaScript"><a href="#运行JavaScript" class="headerlink" title="运行JavaScript"></a>运行JavaScript</h4><p>还有一些操作，Selenium并没有提供API，例如下拉进度条，这种情况我们就可以模拟运行JavaScript，使用<code>execute_script()</code>可以实现，如下实例所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;alert(&quot;To Bottom&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h4><p>前面我们已经通过page_source获取了网页的源代码，下面就可以使用解析库(正则、Beautiful Soup、pyquery等)从中提取信息了，不过，既然Selenium已经提供了选择节点的方法，返回结果是WebElemet类型，那么它肯定也有相关的方法和属性用来直接获取节点信息，我们来看看:</p><ul><li><p>获取属性</p><p>可以使用get_attribute方法获取节点的属性，但前提是得先选中这个节点:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;https://dynamic2.scrape.cuiqingcai.com/&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;logo-image&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(logo)</span><br><span class="line"><span class="built_in">print</span>(logo.get_attribute(<span class="string">&#x27;src&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>获取文本值</p><p>可以使用text属性获取文本值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;https://dynamic2.scrape.cuiqingcai.com/&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element_by_class_name(<span class="string">&#x27;logo-title&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.text)</span><br></pre></td></tr></table></figure></li><li><p>获取ID、位置、标签名和大小</p><p>除了属性和文本值，WebElemet节点还有一些其他属性，例如id属性用于获取节点ID，location属性用于获取节点在页面中的相对位置，tag_name属性用于获取标签的名称，size属性用于获取节点的大小，也就是宽高，有些时候这些属性还是挺重要的，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;https://dynamic2.scrape.cuiqingcai.com/&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element_by_class_name(<span class="string">&#x27;logo-title&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.location)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.tag_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.size)</span><br></pre></td></tr></table></figure></li></ul><h4 id="切换Frame"><a href="#切换Frame" class="headerlink" title="切换Frame"></a>切换Frame</h4><p>我们知道网页中有一种节点叫做iframe，也就是子Frame，相当于页面的子页面，它的结构和外部网页的结构完全一致，Selenimu打开一个页面后，默认是在父页面里操作，此时这个页面中如果还有子Frame，它是不能获取子Frame里的节点的，这时就需要使用<code>switch_to.frame</code>方法切换Frame，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)  <span class="comment"># 切换到子Frame中</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.find_element_by_class_name(<span class="string">&#x27;logo&#x27;</span>)  <span class="comment">#尝试获取其中的logo节点</span></span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:  <span class="comment"># 如果没找到logo节点就会抛出异常(这边实际上是没有的)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;NO LOGO&#x27;</span>)</span><br><span class="line">browser.switch_to.parent_frame()  <span class="comment"># 切换回父Frame</span></span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;logo&#x27;</span>)  <span class="comment"># 重新获取logo</span></span><br><span class="line"><span class="built_in">print</span>(logo)</span><br><span class="line"><span class="built_in">print</span>(logo.text)</span><br></pre></td></tr></table></figure><h4 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h4><p>在Selenium中，get方法在网页框架加载完毕之后才会结束执行，如果我们在get方法执行完毕时获取网页源代码，其结果可能并不是浏览器完全加载完成的页面，因为某些页面有额外的Ajax请求，页面还会经由JavaScript渲染，所以，在必要的时候，我们需要设置浏览器延时等待一段时间，确保节点已经加载出来</p><p>这里方式有两种，一种是隐式等待，一种是显式等待</p><ul><li><p>隐式等待</p><p>使用隐式等待执行测试时，如果Selenium没有在DOM中找到节点，将继续等待，在超出设定时间后，将抛出找不到节点的异常，默认的等待时间是0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://dynamic2.scrape.cuiqingcai.com/&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element_by_class_name(<span class="string">&#x27;logo-image&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure></li><li><p>显式等待</p></li></ul><p>隐式等待的效果其实不太好，因为我们只规定了一个固定的时间，而页面的加载时间会受网络条件影响，还有一种方式就是显式等待，这种方式会指定要查找的节点和最长等待时间，如果在规定的时间内加载出了要查找的节点，就返回这个节点，如果到了规定的时间依然没有加载出节点，就抛出超时异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;q&#x27;</span>)))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;.btn-search&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>, button)</span><br></pre></td></tr></table></figure><p>这里首先引入WebDriver对象，指定最长等待时间为10，并赋值给wait变量，然后调用wait的until方法，传入等待条件；这里先传入了presence_of_element_located这个条件，代表节点出现，其参数是节点的定位元组(By.ID, ‘q’)；然后传入的等待条件是element_to_be_clickable，代表按钮可点击，其参数是利用css查找的定位元组(By.CSS_SELECTOR, ‘.btn-search’)</p><p>更多的等待条件可以见书本</p><h4 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h4><p>使用froword方法前进，使用back方法后退，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.python.org/&#x27;</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>这里我们打开了3个页面，然后调用back方法回到第2个页面，接着调用forword方法又前进到第3个页面</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>使用Selenium，还可以方便地对Cookie进行操作，例如获取、添加、删除等，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.get_cookies())  <span class="comment"># 获取</span></span><br><span class="line">browser.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;www.zhihu.com&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>&#125;)  <span class="comment"># 添加</span></span><br><span class="line"><span class="built_in">print</span>(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()  <span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">print</span>(browser.get_cookies())</span><br></pre></td></tr></table></figure><h4 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h4><p>在访问网页的时候，会开启一个个选项卡，在selenium中，我们也可以对选项卡做操作，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.open()&#x27;</span>)  <span class="comment"># 开启一个新的选项卡</span></span><br><span class="line"><span class="built_in">print</span>(browser.window_handles)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>])  <span class="comment"># 切换到新开的选项卡</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])  <span class="comment"># 回到原来的选项卡</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://python.org&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>在使用Selenium的过程中，难免会遇到一些异常，例如超时、节点未找到等，一旦出现此类异常，程序便不会再继续运行了，此时我们可以使用try…except语句捕获各种异常，NoSuchElementException表示节点未找到</p><h4 id="反屏蔽"><a href="#反屏蔽" class="headerlink" title="反屏蔽"></a>反屏蔽</h4><p>现在有很多网站增加了对Selenium的检测，防止一些爬虫的恶意爬取，如果检测到有人使用Selenium打开浏览器，就直接屏蔽，在大多数情况下，检测的基本原理是检测当前浏览器窗口下的window.navigator对象中是否包含webdriver属性，因为在正常使用浏览器时，这个属性应该是undefined，一旦使用了Selenium，它就会给window.navigator对象设置webdriver属性，很多网站就是通过这个JavaScript语句判断是否存在webdriver属性，如果存在就直接屏蔽</p><p>一个典型的案例网站<a class="link"   href="https://antispider.scrape.center/%E5%B0%B1%E6%98%AF%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%BF%B0%E5%8E%9F%E7%90%86%EF%BC%8C%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8webdriver%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8Selenium%E7%9B%B4%E6%8E%A5%E7%88%AC%E5%8F%96%E8%AF%A5%E7%BD%91%E7%AB%99%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%BD%91%E7%AB%99%E5%B0%B1%E4%BC%9A%E8%BF%94%E5%9B%9E%60Webdriver" >https://antispider.scrape.center/就是使用上述原理，检测是否存在webdriver属性，如果我们使用Selenium直接爬取该网站的数据，网站就会返回`Webdriver<i class="fas fa-external-link-alt"></i></a> Rrobidden`</p><p>这时可能有人会直接使用JavaScript语句把webdriver属性置空不就行了，例如调用execuet_script方法执行这行代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(navigator, <span class="string">&quot;webdriver&quot;</span>, &#123;<span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure><p>这行代码确实可以把webdriver属性置空，但execute_script方法是在页面加载完毕之后才调用的，这个时候调用就太晚了，网页早就检测到webdriver属性了，所以这个方法行不通</p><p>在Selenium中，可以用CDP(即Chrome Devtools Protocol)，解决这个问题，利用它可以实现在每个页面刚加载的时候就执行JavaScript语句，将webdriver属性置空，另外还可以加入几个选项来隐藏Webdriver提示条和自动化扩展信息，代码实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;useAutomationExtension&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line">browser.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">browser.get(<span class="string">&#x27;https://antispider1.scrape.cuiqingcai.com/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在大多数时候，以上方式可以实现Selenium的反屏蔽，但也存在一些特殊网站会对Wdbdriver属性设置更多的特征检测，这种情况下就要具体排查了</p><h4 id="无头模式"><a href="#无头模式" class="headerlink" title="无头模式"></a>无头模式</h4><p>在上面的案例中，都会弹出一个浏览器窗口，虽然有助于观察页面的爬取状况，但窗口弹来弹去有时也会造成一些干扰</p><p>Chrome浏览器从60版本开始，已经开启了对无头浏览器的支持，即Headless，我们可以借助ChromeOptions对象开启Chrome浏览器的无头模式，代码实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line">browser.set_window_size(<span class="number">1366</span>, <span class="number">768</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">&#x27;preview.png&#x27;</span>)  <span class="comment"># 页面截图</span></span><br></pre></td></tr></table></figure><h3 id="Splash的使用"><a href="#Splash的使用" class="headerlink" title="Splash的使用"></a>Splash的使用</h3><p>Splash是一个JavaScript渲染服务，是一个含有HTTP API的轻量级浏览器，它还对接了Python中的Twisted库和QT库，利用它，同样可以爬取动态渲染的页面</p><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul><li>异步处理多个网页的渲染过程</li><li>获取渲染后页面的源代码或截图</li><li>通过关闭图片渲染或者使用Adblock规则的方式加快页面渲染的速度</li><li>执行特定的JavaScript脚本</li><li>通过Lua脚本控制页面的渲染过程</li><li>获取页面渲染的详细过程并以HAR(HTTP Archive)的格式呈现出来</li></ul><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><p>请确保Splash已经正确安装并可以在本地8050端口上正常运行，安装方法见: <a class="link"   href="https://setup.scrape.center/splash" >https://setup.scrape.center/splash<i class="fas fa-external-link-alt"></i></a></p><p>由于我这工作电脑是win7的，安装docker-desktop比较麻烦，所以这部分还是见书本叭</p><h3 id="Pyppeteer的使用"><a href="#Pyppeteer的使用" class="headerlink" title="Pyppeteer的使用"></a>Pyppeteer的使用</h3><p>在前面，我们使用了Selenium，其功能的确非常强大，但很多时候会发现它也有一些不太方便的地方，例如配置环境时，需要先安装好相关浏览器，例如Chrome、Firefox等，然后到官方网站下载对应的驱动，最重要的是得看版本是否对应，另外，如果大规模部署Selenium，一些环境配置问题也是很头疼的，这里我们介绍Selenium的一个替代品: Pyppeteer</p><h4 id="Pyppeteer介绍"><a href="#Pyppeteer介绍" class="headerlink" title="Pyppeteer介绍"></a>Pyppeteer介绍</h4><p>PupeteerGoogle基于node.js开发的一个工具，有了它，我们可以利用JavaScript控制Chrome浏览器的一些操作；当然，Puppeteer也可以应用于网络爬虫上，其API极其完善，功能非常强大</p><p>Pyppeteer又是什么呢，它其实是Puppeteer的Python版实现，但不是Google开发的，是由一位来自日本的工程师依据Puppeteer的一些功能开发出来的非官方版本</p><p>Pyppeteer的背后实际上有一个类似于Chrome的浏览器—-Chromium，它执行一些动作，从而进行网页渲染，总的来说，两款浏览器的内核一样，实现方式也一样，可以看作开发版和正式版，功能上没有太大区别</p><p>Pyppeteer就是依赖Chromium浏览器运行的，第一次运行Pyppeteer的时候，没有安装Chroimium浏览器，程序会自动帮我们安装和配置好，免去了琐碎的环境配置等工作，另外，Pyppeteer是基于Python的新特性async实现的，所以它的一些操作执行也支持异步方式，和Selenium相比效率也提高了</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>由于Pyppeteer采用了Python的async机制，所以要求Python版本为3.5以上</p><p>安装命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyppeteer</span><br></pre></td></tr></table></figure><h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><p>测试网址: <a class="link"   href="https://spa2.scrape.center/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E5%B7%B2%E7%BB%8F%E5%88%86%E6%9E%90%E8%BF%87%E4%BA%86%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E6%98%AF%E7%94%A8JavaScript%E6%B8%B2%E6%9F%93%E5%87%BA%E6%9D%A5%E7%9A%84%EF%BC%8C%E4%B8%80%E4%BA%9BAjax%E6%8E%A5%E5%8F%A3%E8%BF%98%E5%B8%A6%E6%9C%89%E5%8A%A0%E5%AF%86%E5%8F%82%E6%95%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E6%B2%A1%E6%B3%95%E7%9B%B4%E6%8E%A5%E7%94%A8requests%E7%88%AC%E5%8F%96%E7%9C%8B%E5%88%B0%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B9%9F%E4%B8%8D%E5%A4%AA%E5%A5%BD%E7%9B%B4%E6%8E%A5%E6%A8%A1%E6%8B%9F%EF%BC%8CAjax%E6%9D%A5%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%9B%E5%9C%A8%E5%89%8D%E9%9D%A2%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFSelenium%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E8%AF%95%E8%AF%95Pyppeteer" >https://spa2.scrape.center/，这个网站在前面已经分析过了整个页面是用JavaScript渲染出来的，一些Ajax接口还带有加密参数，所以没法直接用requests爬取看到数据，同时也不太好直接模拟，Ajax来获取数据；在前面我们使用的是Selenium，这里我们试试Pyppeteer<i class="fas fa-external-link-alt"></i></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch()  <span class="comment"># 调用launch方法新建了一个Browser对象，相当于启动了了浏览器</span></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()  <span class="comment"># 相当于在浏览器中新建一个选项卡</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://dynamic2.scrape.cuiqingcai.com/&#x27;</span>)  <span class="comment"># 相当于在浏览器中输入goto方法的参数中的URL，之后浏览器加载对应的页面</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.item .name&#x27;</span>)  <span class="comment"># 传入选择器，页面会等待选择器对应的节点信息加载出来后就立即返回，否则持续等待直到超时</span></span><br><span class="line">    doc = pq(<span class="keyword">await</span> page.content())  <span class="comment"># 获取当前浏览器页面的源代码，这就是JavaScript渲染后的结果</span></span><br><span class="line">    names = [item.text() <span class="keyword">for</span> item <span class="keyword">in</span> doc(<span class="string">&#x27;.item .name&#x27;</span>).items()]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Names:&#x27;</span>, names)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>相比来说是比Selenium简单点，接下来我们来看看另一个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">width, height = <span class="number">1366</span>, <span class="number">768</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)  <span class="comment"># 设置页面窗口大小</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://dynamic2.scrape.cuiqingcai.com/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(path=<span class="string">&#x27;example.png&#x27;</span>)  <span class="comment"># 保存页面截图</span></span><br><span class="line">    dimensions = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="string">            height: document.documentElement.clientHeight,</span></span><br><span class="line"><span class="string">            deviceScaleFactor: window.devicePixelRatio,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;&#x27;&#x27;</span>)  <span class="comment"># 调用evaluate执行JavaScript语句并返回了对应的数据，是一个json格式的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(dimensions)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>在screenshot方法中，我们通过path参数用于传入页面截图的保存路径，另外还可以指定截图的保存格式type、清晰度quality、是否全屏fullpage和裁切clip等参数</p><p>Pyppeteer所有的用法都在其官方文档中，我们不用死记硬背，即查即用即可: <a class="link"   href="https://pyppeteer.github.io/pyppeteer/reference.html" >https://pyppeteer.github.io/pyppeteer/reference.html<i class="fas fa-external-link-alt"></i></a></p><h4 id="launch方法"><a href="#launch方法" class="headerlink" title="launch方法"></a>launch方法</h4><p>launch方法相当于双击桌面上的浏览器图标，用于启动浏览器</p><p>launch方法的API链接为: <a class="link"   href="https://pyppeteer.github.io/pyppeteer/reference.html#launcher%EF%BC%8C%E5%85%B7%E4%BD%93%E5%8F%AF%E6%9F%A5%E7%9C%8B%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%BB%93%E5%90%88%E4%B9%A6%E6%9C%AC246%E9%A1%B5" >https://pyppeteer.github.io/pyppeteer/reference.html#launcher，具体可查看这个链接，也可结合书本246页<i class="fas fa-external-link-alt"></i></a></p><h4 id="无头模式-1"><a href="#无头模式-1" class="headerlink" title="无头模式"></a>无头模式</h4><p>无头模式，launch方法中使用参数<code>headless</code>，将它设置为False就是在启动的时候可以看到界面，反之则看不到，示例代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">await</span> launch(headless=<span class="literal">False</span>)  <span class="comment"># 显示浏览器界面</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><p>调试模式，launch方法中使用参数<code>devtools</code>，将它设置为True就会在开启页面的时候会弹出一个调试窗口，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(devtools=<span class="literal">True</span>)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-11_17-45-41.34cme8eh1w40.webp"                      alt="Snipaste_2022-02-11_17-45-41"                ></p><h4 id="禁用提示条"><a href="#禁用提示条" class="headerlink" title="禁用提示条"></a>禁用提示条</h4><p>如上图片所示，有一个提示，’Chrome正受到自动测试软件的控制’，这个提示有点烦人，我们可以使用args参数关闭:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(devtools=<span class="literal">True</span>, args=[<span class="string">&#x27;--disable-infobars&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="防止检测"><a href="#防止检测" class="headerlink" title="防止检测"></a>防止检测</h4><p>刚刚只是把提示关闭了，有些网站还是能检测到Webdriver属性，不妨拿之前的案例网站<a class="link"   href="https://antispider1.scrape.center/%E9%AA%8C%E8%AF%81%E4%B8%8B" >https://antispider1.scrape.center/验证下<i class="fas fa-external-link-alt"></i></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(devtools=<span class="literal">True</span>, args=[<span class="string">&#x27;--disable-infobars&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://antispider1.scrape.center/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-11_17-54-52.su7xyt0cxsw.webp"                      alt="Snipaste_2022-02-11_17-54-52"                ></p><p>果然就被检测出来了，这说明Pyppeteer开启Chromium后，照样能被检测到Webdriver属性的存在</p><p>那么如何规避此问题呢，Pyppeteer的page对象有一个叫做evaluateOneNewDocument的方法，意思是在每次加载网页的时候执行某条语句，这里可以利用它执行隐藏Webdriver属性的命令，代码改写如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(devtools=<span class="literal">True</span>, args=[<span class="string">&#x27;--disable-infobars&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(<span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://antispider1.scrape.center/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>这样就加载出来了:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-11_18-00-58.4njbw2rykqg0.webp"                      alt="Snipaste_2022-02-11_18-00-58"                ></p><h4 id="页面大小设置"><a href="#页面大小设置" class="headerlink" title="页面大小设置"></a>页面大小设置</h4><p>这时我们可以设置窗口大小，调用Page对象的setViewport方法即可，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">width, height = <span class="number">1366</span>, <span class="number">768</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>, args=[<span class="string">&#x27;--disable-infobars&#x27;</span>, <span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])  <span class="comment"># 这里设置了浏览器的宽高</span></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)  <span class="comment"># 这里设置了显示区域的宽高</span></span><br><span class="line">    <span class="keyword">await</span> page.evaluateOnNewDocument(<span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://antispider1.scrape.cuiqingcai.com/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>这里我们同时设置了浏览器窗口的宽高以及显示区域的宽高，让二者保持一致</p><h4 id="用户数据持久化"><a href="#用户数据持久化" class="headerlink" title="用户数据持久化"></a>用户数据持久化</h4><p>我们发现，每次打开Pyppeteer都是一个新的空白的浏览器，如果网页需要登录，那么下次打开同样需要登录，这是因为它默认没保存cookie，既然要下次还处于登录状态，那么就是需要存储一些数据，那么这些数据保存到哪里呢？答案是用户目录下，其中不仅包括浏览器的基本配置信息，还包括一些Cache、cookie等信息，如果我们能在浏览器启动的时候读取这些信息，就可恢复一些历史记录甚至登录状态信息了，那么如何设置用户目录呢？很简单，在启动浏览器的时候设置userDataDir属性就好了，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">width, height = <span class="number">1366</span>, <span class="number">768</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>, userDataDir=<span class="string">&#x27;./userdata&#x27;</span>,</span><br><span class="line">                           args=[<span class="string">&#x27;--disable-infobars&#x27;</span>, <span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h4><p>我们了解了launch方法，它的返回值是一个Browser对象，也就是浏览器对象，我们通常会将其赋值给browser变量，它就是Browser的一个实例，browser作为Browser的实例，自然有很多用于操作浏览器的方法，下面我们选取一些比较有用的方法介绍下:</p><h4 id="开启无痕模式"><a href="#开启无痕模式" class="headerlink" title="开启无痕模式"></a>开启无痕模式</h4><p>我们知道Chrome浏览器有无痕模式，其好处就是环境比较干净，不与其他浏览器示例共享Cache、cookie等内容，可以通过createIncognitoBrowserContext方法开启无痕模式，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">width, height = <span class="number">1200</span>, <span class="number">768</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>,</span><br><span class="line">                           args=[<span class="string">&#x27;--disable-infobars&#x27;</span>, <span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])</span><br><span class="line">    context = <span class="keyword">await</span> browser.createIncognitoBrowserContext()</span><br><span class="line">    page = <span class="keyword">await</span> context.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>使用close方法关闭浏览器，很多时候会因为忘记关闭浏览器而产生额外的开销</p><h4 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h4><p>page即页面，对应一个网页，一个选项卡，下面来看看它的一些常见用法</p><ul><li><p>选择器</p><p>page对象内置了很多用于选取节点的选择器方法，例如<strong>J方法，给它传入一个选择器，就能返回匹配到的第一个节点，等价于querySelector方法</strong>；又如<strong>JJ方法，给它传入选择器，会返回符合选择器的所有节点组成的列表，等价于querySectorAll方法</strong>，下面我们分别调用了J方法、querySelector方法、JJ方法、和querySelectorAll方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://dynamic2.scrape.cuiqingcai.com/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line">    j_result1 = <span class="keyword">await</span> page.J(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line">    j_result2 = <span class="keyword">await</span> page.querySelector(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line">    jj_result1 = <span class="keyword">await</span> page.JJ(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line">    jj_result2 = <span class="keyword">await</span> page.querySelectorAll(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;J Result1:&#x27;</span>, j_result1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;J Result2:&#x27;</span>, j_result2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;JJ Result1:&#x27;</span>, jj_result1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;JJ Result2:&#x27;</span>, jj_result2)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">J Result1: &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E565C8</span>&gt;</span><br><span class="line">J Result2: &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E5BC48</span>&gt;</span><br><span class="line">JJ Result1: [&lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63888</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63BC8</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63A08</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63C88</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63808</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E61E88</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E61E08</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E61DC8</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E61E48</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E61D88</span>&gt;]</span><br><span class="line">JJ Result2: [&lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63F48</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63948</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E631C8</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E63388</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E638C8</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E5BCC8</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E5B388</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E5B348</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E5BC88</span>&gt;, &lt;pyppeteer.element_handle.ElementHandle <span class="built_in">object</span> at <span class="number">0x0000000003E5B308</span>&gt;]</span><br></pre></td></tr></table></figure><p>可以看到J方法和querySelector方法的返回结果都是传入的选择器相匹配的单个节点，返回值为ElementHandle对象；JJ方法和querySectorAll方法则都是返回了和选择器相匹配的节点组成的列表，列表中的内容是ElementHandle对象</p></li><li><p>选项卡操作</p><p>前面使用的newPage方法用于新建选项卡的操作，那么新建选项卡之后怎么获取和切换呢？我们可以先调用pages方法获取所有打开的页面，然后选择一个页面调用其bringToFront方法即可，来看看例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.bing.com&#x27;</span>)</span><br><span class="line">    pages = <span class="keyword">await</span> browser.pages()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Pages:&#x27;</span>, pages)</span><br><span class="line">    page1 = pages[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">await</span> page1.bringToFront()</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>效果如下:</p><p><a href="https://imgtu.com/i/bSdXut"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/22/bSdXut.png"                      alt="bSdXut.png"                ></a></p></li><li><p>页面操作</p><p>一定要有对应的方法来控制一个页面的加载、前进、后退、关闭和保存等行为，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://cuiqingcai.com/31099.html/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.cnblogs.com/youyouxiaosheng-lh/p/11212340.html&#x27;</span>)</span><br><span class="line">    <span class="comment"># 后退</span></span><br><span class="line">    <span class="keyword">await</span> page.goBack()</span><br><span class="line">    <span class="comment"># 前进</span></span><br><span class="line">    <span class="keyword">await</span> page.goForward()</span><br><span class="line">    <span class="comment"># 刷新</span></span><br><span class="line">    <span class="keyword">await</span> page.reload()</span><br><span class="line">    <span class="comment"># 保存 PDF</span></span><br><span class="line">    <span class="keyword">await</span> page.pdf()  <span class="comment"># 运行显示还未实现</span></span><br><span class="line">    <span class="comment"># 截图</span></span><br><span class="line">    <span class="keyword">await</span> page.screenshot()</span><br><span class="line">    <span class="comment"># 设置页面 HTML</span></span><br><span class="line">    <span class="keyword">await</span> page.setContent(<span class="string">&#x27;&lt;h2&gt;Hello World&lt;/h2&gt;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置 User-Agent</span></span><br><span class="line">    <span class="keyword">await</span> page.setUserAgent(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置 Headers</span></span><br><span class="line">    <span class="keyword">await</span> page.setExtraHTTPHeaders(headers=&#123;&#125;)</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    <span class="keyword">await</span> page.close()</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure></li><li><p>点击</p><p>Pyppeteer同样可以模拟点击，调用其click方法即可；以<a class="link"   href="https://spa2.scrape.center/%E4%B8%BA%E4%BE%8B%EF%BC%8C%E7%AD%89%E5%85%B6%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E9%83%BD%E5%8A%A0%E8%BD%BD%E5%87%BA%E6%9D%A5%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%A8%A1%E6%8B%9F%E9%82%AE%E4%BB%B6%E7%82%B9%E5%87%BB" >https://spa2.scrape.center/为例，等其所有节点都加载出来之后，模拟邮件点击<i class="fas fa-external-link-alt"></i></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://spa2.scrape.center/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.click(<span class="string">&#x27;.item .name&#x27;</span>, options=&#123;</span><br><span class="line">        <span class="string">&#x27;button&#x27;</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;clickCount&#x27;</span>: <span class="number">1</span>,  <span class="comment"># 1 or 2</span></span><br><span class="line">        <span class="string">&#x27;delay&#x27;</span>: <span class="number">3000</span>,  <span class="comment"># 毫秒</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/bSB96s"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/22/bSB96s.png"                      alt="bSB96s.png"                ></a></p><p>这里click方法中的第一个参数就是选择器，即在哪里操作；第二个参数是几项配置，具体有以下内容:</p><ul><li>button: 鼠标按钮，取值有left、middle、right</li><li>clickCount: 点击次数，取值有1和2，表示单击和双击</li><li>delay: 延迟点击</li></ul></li><li><p>Pyppeteer也可以输入文本，使用type方法即可，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    <span class="comment"># 后退</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="built_in">type</span>(<span class="string">&#x27;#q&#x27;</span>, <span class="string">&#x27;iPad&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>效果如下:</p><p><a href="https://imgtu.com/i/bSBhBq"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/22/bSBhBq.png"                      alt="bSBhBq.png"                ></a></p><p>这里我们打开了淘宝，给type方法的第一个参数传入选择器，第二个参数传入要输入的内容</p></li><li><p>获取信息</p><p>Page对象需要调用content方法获取源码，Cookie对象调用cookies方法获取，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;HTML:&#x27;</span>, <span class="keyword">await</span> page.content())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Cookies:&#x27;</span>, <span class="keyword">await</span> page.cookies())</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure></li><li><p>执行</p><p>Pyppeteer可以支持执行JavaScript语句，使用evaluate方法即可，我们来看一个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;http://quotes.toscrape.com/js/&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(path=<span class="string">&#x27;example.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.pdf(path=<span class="string">&#x27;example.pdf&#x27;</span>)</span><br><span class="line">    dimensions = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="string">            height: document.documentElement.clientHeight,</span></span><br><span class="line"><span class="string">            deviceScaleFactor: window.devicePixelRatio,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(dimensions)</span><br><span class="line">    <span class="comment"># &gt;&gt;&gt; &#123;&#x27;width&#x27;: 800, &#x27;height&#x27;: 600, &#x27;deviceScaleFactor&#x27;: 1&#125;</span></span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure></li><li><p>延时等待</p><p>在本文章最开头的地方，我们演示了waitForSelector的用法，它可以让页面等待某些符合条件的节点加载出来再返回结果；例如这里我们给waitForSelector传入一个css选择器，如果找到符合条件的节点，就立马返回结果，否则等待直到超时，下面我们来看看其他的:</p><ul><li>waitForFunction: 等待某个Java方法执行完毕或返回结果</li><li>waitForNavigation: 等待页面跳转，如果没加载出来，就报错</li><li>waitForRequest: 等待某个特定的请求发出</li><li>waitFOrResponse: 等待某个特定的请求对应的响应</li><li>waitFor: 通用的等待方法</li><li>waitForXpth: 等待符合xpath的节点加载出来</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Pyppeteer还有其他很多功能，例如键盘事件、鼠标事件、对话框事件等，这里就不再一一赘述了，更多内容可以查看官方文档: <a class="link"   href="https://miyakogi.github.io/pyppeteer/reference.html" >https://miyakogi.github.io/pyppeteer/reference.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="Playwright的使用"><a href="#Playwright的使用" class="headerlink" title="Playwright的使用"></a>Playwright的使用</h3><h4 id="Playwright的特点"><a href="#Playwright的特点" class="headerlink" title="Playwright的特点"></a>Playwright的特点</h4><ul><li>支持当前所有主流浏览器，包括Chrome和Edge(基于Chromium)、Filefox、Safari(基于WebKit)，提供完善的自动化控制的API</li><li>支持移动端页面测试，使用设备模拟技术，可以让我们在移动Web浏览器中测试响应式的Web应用程序</li><li>支持所有浏览器的无头和非无头模式的测试</li><li>安装和配置过程非常简单，安装过程中会自动安装对应的浏览器和驱动，不需要额外配置WebDriver</li><li>提供自动等待相关的API，在页面加载时会自动等待对应的节点加载，大大减小了API编写的复杂度</li></ul><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>首先请确保Python的版本大于或等于3.7，直接使用pip工具安装，命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install playwright</span><br></pre></td></tr></table></figure><p>具体的安装说明可以参考: <a class="link"   href="https://setup.scrape.center/playwright" >https://setup.scrape.center/playwright<i class="fas fa-external-link-alt"></i></a></p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>playwright支持两种编写模式，一种是和Pyppeteer一样的异步模式，另一种是和Selenium一样的同步模式，可以根据实际需要选择不同的模式，下面先来看一个同步模式的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    <span class="keyword">for</span> browser_type <span class="keyword">in</span> [p.chromium, p.firefox, p.webkit]:</span><br><span class="line">        browser = browser_type.launch(headless=<span class="literal">False</span>)</span><br><span class="line">        page = browser.new_page()</span><br><span class="line">        page.goto(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">        page.screenshot(path=<span class="string">f&#x27;screenshot-<span class="subst">&#123;browser_type.name&#125;</span>.png&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(page.title())</span><br><span class="line">        browser.close()</span><br></pre></td></tr></table></figure><p>这里我们首先导入了并直接调用了sync_playwright方法，该方法的返回值是一个PlaywrightContextManger对象，可以理解为一个浏览器上下文管理器，我们将其赋值为P变量；然后依次调用p的chromium、firefox和webkit属性创建了Chromium、Firefox以及WebKit浏览器实例，接着用一个for循环依次执行了这3个浏览器的launch方法，同时设置headless的参数为false，如果不设置为false，这里我们将看不到任何效果，然后分别打印网页标题然后保存了浏览器截图</p><p>这里由于我的playwright安装出了点问题，不知道是不是工作电脑的问题，现在报这个错:</p><p><a href="https://imgtu.com/i/bCpAaQ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/bCpAaQ.png"                      alt="bCpAaQ.png"                ></a></p><p>来看看异步模式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> playwright.async_api <span class="keyword">import</span> async_playwright</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> async_playwright() <span class="keyword">as</span> p:</span><br><span class="line">        <span class="keyword">for</span> browser_type <span class="keyword">in</span> [p.chromium, p.firefox, p.webkit]:</span><br><span class="line">            browser = <span class="keyword">await</span> browser_type.launch(headless=<span class="literal">False</span>)</span><br><span class="line">            page = <span class="keyword">await</span> browser.new_page()</span><br><span class="line">            <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">            <span class="keyword">await</span> page.screenshot(path=<span class="string">f&#x27;screenshot-<span class="subst">&#123;browser_type.name&#125;</span>.png&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">await</span> page.title())</span><br><span class="line">            <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>对比这两个代码，我们可以看到，写法和同步模式基本一样，只不过这里导入的是async_playwright方法，不再是sync_playwright方法，以及写法上添加了async/await关键字，最后的运行效果是和同步一样的，另外可以注意到，这个例子中使用了with as语句，with用于管理上下文对象，可以返回一个上下文管理器，即一个PlaywrightContextManger对象，无论代码运行期间是否抛出异常，该对象都能帮助我们自动分配并且释放Playwright的资源</p><h4 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h4><p>Playwright还有一个强大的功能，是可以录制我们在浏览器中的操作，并自动生成代码，有了这个功能，我们甚至可以一行代码不用写，这个功能可以通过playwright调用condegen实现，先来看下condgen命令都有什么参数，输入如下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playwright codegen --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>由于我工作的电脑的问题，我的playwright安装有点问题，以上命令无法执行，大家知道知道这个可以查看所有的参数即可</p><p>了解了以上用法之后，我们来尝试启动一个Firefox浏览器，然后将操作结果输出到script.py文件，命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playwright codegen -o script.py -b firefox</span><br></pre></td></tr></table></figure><p>运行代码后会弹出一个Firefox浏览器，同时右侧输出一个脚本窗口，实时显示当前操作对应的代码；我们可以在浏览器中随意操作，例如打开百度，点击搜索框并输入nba，再点击搜索按钮，由于无法使用playwright，这里我就用语言描述下:</p><p>浏览器会高亮显示我们正在操作的页面节点，同时显示对应的节点信息，在操作浏览器的过程中，该窗口中的代码会跟着实时变化，所有操作完成后，关闭浏览器后，playwright会生成一个scrit.py文件，这个生成的代码和我们之前写的示例代码几乎差不多，而且也是可以运行的，运行之后会看到它在复现我们刚才所做的操作，所以，有了代码生成功能，只通过简单的可视化点击就能生成代码，可谓非常方便，另外这还有一个值得注意的点，仔细观察一下生成的代码，和前面例子不同的是，这里的new_page方法并不是直接通过browser调用的，而是通过context，这个context又是由browser调用new_context方法生成的，那么这个context究竟是做什么的呢，其实context变量是一个BrowserContext对象，这是一个类似隐身模式的独立上下文环境，其运行资源是单独隔离的，在一些自动化测试过程中，我们可以为每个测试用例单独创建一个BroserContext对象，这样能够保证各个测试用例互不干扰</p><h4 id="支持移动端浏览器"><a href="#支持移动端浏览器" class="headerlink" title="支持移动端浏览器"></a>支持移动端浏览器</h4><p>示例代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    iphone_12_pro_max = p.devices[<span class="string">&#x27;iPhone 12 Pro Max&#x27;</span>]</span><br><span class="line">    browser = p.webkit.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    context = browser.new_context(</span><br><span class="line">        **iphone_12_pro_max,</span><br><span class="line">        locale=<span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">        geolocation=&#123;<span class="string">&#x27;longitude&#x27;</span>: <span class="number">116.39014</span>, <span class="string">&#x27;latitude&#x27;</span>: <span class="number">39.913904</span>&#125;,</span><br><span class="line">        permissions=[<span class="string">&#x27;geolocation&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line">    page = context.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://amap.com&#x27;</span>)</span><br><span class="line">    page.wait_for_load_state(state=<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    page.screenshot(path=<span class="string">&#x27;location-iphone.png&#x27;</span>)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>这里我们先用 PlaywrightContextManager 对象的 devices 属性指定了一台移动设备，这里传入的是手机的型号，比如 iPhone 12 Pro Max，当然也可以传其他名称，比如 iPhone 8，Pixel 2 等。</p><p>前面我们已经了解了 BrowserContext 对象，BrowserContext 对象也可以用来模拟移动端浏览器，初始化一些移动设备信息、语言、权限、位置等信息，这里我们就用它来创建了一个移动端 BrowserContext 对象，通过 geolocation 参数传入了经纬度信息，通过 permissions 参数传入了赋予的权限信息，最后将得到的 BrowserContext 对象赋值为 context 变量。</p><p>接着我们就可以用 BrowserContext 对象来新建一个页面，还是调用 new_page 方法创建一个新的选项卡，然后跳转到高德地图，并调用了 wait_for_load_state 方法等待页面某个状态完成，这里我们传入的 state 是 networkidle，也就是网络空闲状态。因为在页面初始化和加载过程中，肯定是伴随有网络请求的，所以加载过程中肯定不算 networkidle 状态，所以这里我们传入 networkidle 就可以标识当前页面和数据加载完成的状态。加载完成之后，我们再调用 screenshot 方法获取当前页面截图，最后关闭浏览器。</p><p>运行下代码，可以发现这里就弹出了一个移动版浏览器，然后加载了高德地图，并定位到了故宫的位置，如图所示:</p><p><a href="https://imgtu.com/i/bCEl4O"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/bCEl4O.png"                      alt="bCEl4O.png"                ></a></p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>前面我们注意到 click 和 fill 等方法都传入了一个字符串，这些字符串有的符合 CSS 选择器的语法，有的又是 text= 开头的，感觉似乎没太有规律的样子，它到底支持怎样的匹配规则呢？下面我们来了解下。</p><p>传入的这个字符串，我们可以称之为 Element Selector，它不仅仅支持 CSS 选择器、XPath，Playwright 还扩展了一些方便好用的规则，比如直接根据文本内容筛选，根据节点层级结构筛选等等</p><h5 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h5><p>文本选择支持直接使用 <code>text=</code> 这样的语法进行筛选，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.click(<span class="string">&quot;text=Log in&quot;</span>)</span><br></pre></td></tr></table></figure><p>这就代表选择文本是 Log in 的节点，并点击</p><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><p>CSS 选择器之前也介绍过了，比如根据 id 或者 class 筛选:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page.click(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">page.click(<span class="string">&quot;#nav-bar .contact-us-item&quot;</span>)</span><br></pre></td></tr></table></figure><p>根据特定的节点属性筛选:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page.click(<span class="string">&quot;[data-test=login-button]&quot;</span>)</span><br><span class="line">page.click(<span class="string">&quot;[aria-label=&#x27;Sign in&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="CSS-选择器-文本"><a href="#CSS-选择器-文本" class="headerlink" title="CSS 选择器 + 文本"></a>CSS 选择器 + 文本</h5><p>我们还可以使用 CSS 选择器结合文本值进行海选，比较常用的就是 has-text 和 text，前者代表包含指定的字符串，后者代表字符串完全匹配，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page.click(<span class="string">&quot;article:has-text(&#x27;Playwright&#x27;)&quot;</span>)</span><br><span class="line">page.click(<span class="string">&quot;#nav-bar :text(&#x27;Contact us&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><p>第一个就是选择文本中包含 Playwright 的 article 节点，第二个就是选择 id 为 nav-bar 节点中文本值等于 Contact us 的节点</p><h5 id="CSS-选择器-节点关系"><a href="#CSS-选择器-节点关系" class="headerlink" title="CSS 选择器 + 节点关系"></a>CSS 选择器 + 节点关系</h5><p>还可以结合节点关系来筛选节点，比如使用 has 来指定另外一个选择器，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.click(<span class="string">&quot;.item-description:has(.item-promo-banner)&quot;</span>)</span><br></pre></td></tr></table></figure><p>比如这里选择的就是选择 class 为 item-description 的节点，且该节点还要包含 class 为 item-promo-banner 的子节点</p><p>另外还有一些相对位置关系，比如 right-of 可以指定位于某个节点右侧的节点，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.click(<span class="string">&quot;input:right-of(:text(&#x27;Username&#x27;))&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里选择的就是一个 input 节点，并且该 input 节点要位于文本值为 Username 的节点的右侧</p><h5 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h5><p>当然 XPath 也是支持的，不过 xpath 这个关键字需要我们自行制定，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.click(<span class="string">&quot;xpath=//button&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里需要在开头指定 <code>xpath=</code> 字符串，代表后面是一个 XPath 表达式</p><p>关于更多选择器的用法和最佳实践，可以参考官方文档：<a class="link"   href="https://playwright.dev/python/docs/selectors%E3%80%82" >https://playwright.dev/python/docs/selectors<i class="fas fa-external-link-alt"></i></a></p><h4 id="常用操作方法"><a href="#常用操作方法" class="headerlink" title="常用操作方法"></a>常用操作方法</h4><p>上面我们了解了浏览器的一些初始化设置和基本的操作实例，下面我们再对一些常用的操作 API 进行说明。</p><p>常见的一些 API 如点击 click，输入 fill 等操作，这些方法都是属于 Page 对象的，所以所有的方法都从 Page 对象的 API 文档查找，文档地址：<a class="link"   href="https://playwright.dev/python/docs/api/class-page%E3%80%82" >https://playwright.dev/python/docs/api/class-page<i class="fas fa-external-link-alt"></i></a></p><h5 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h5><p>Page 对象提供了一个 on 方法，它可以用来监听页面中发生的各个事件，比如 close、console、load、request、response 等等。</p><p>比如这里我们可以监听 response 事件，response 事件可以在每次网络请求得到响应的时候触发，我们可以设置对应的回调方法获取到对应 Response 的全部信息，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_response</span>(<span class="params">response</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Statue <span class="subst">&#123;response.status&#125;</span>: <span class="subst">&#123;response.url&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.on(<span class="string">&#x27;response&#x27;</span>, on_response)</span><br><span class="line">    page.goto(<span class="string">&#x27;https://spa6.scrape.center/&#x27;</span>)</span><br><span class="line">    page.wait_for_load_state(<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>这里我们在创建 Page 对象之后，就开始监听 response 事件，同时将回调方法设置为 on_response，on_response 对象接收一个参数，然后把 Response 的状态码和链接都输出出来了</p><p>运行之后可以看到控制台输出结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/css/app.ea9d802a.css</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/js/app<span class="number">.5</span>ef0d454.js</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/js/chunk-vendors<span class="number">.77</span>daf991.js</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/css/chunk-19c920f8<span class="number">.2</span>a6496e0.css</span><br><span class="line">...</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/css/chunk-19c920f8<span class="number">.2</span>a6496e0.css</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/js/chunk-19c920f8.c3a1129d.js</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/img/logo.a508a8f0.png</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/fonts/element-icons<span class="number">.535877</span>f5.woff</span><br><span class="line">Statue <span class="number">301</span>: https://spa6.scrape.center/api/movie?limit=<span class="number">10</span>&amp;offset=<span class="number">0</span>&amp;token=NGMwMzFhNGEzMTFiMzJkOGE0ZTQ1YjUzMTc2OWNiYTI1Yzk0ZDM3MSwxNjIyOTE4NTE5</span><br><span class="line">Statue <span class="number">200</span>: https://spa6.scrape.center/api/movie/?limit=<span class="number">10</span>&amp;offset=<span class="number">0</span>&amp;token=NGMwMzFhNGEzMTFiMzJkOGE0ZTQ1YjUzMTc2OWNiYTI1Yzk0ZDM3MSwxNjIyOTE4NTE5</span><br><span class="line">Statue <span class="number">200</span>: https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@464w_644h_1e_1c</span><br><span class="line">Statue <span class="number">200</span>: https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@464w_644h_1e_1c</span><br><span class="line">....</span><br><span class="line">Statue <span class="number">200</span>: https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@464w_644h_1e_1c</span><br></pre></td></tr></table></figure><p>这个网站我们之前分析过，其真实的数据都是 Ajax 加载的，同时 Ajax 请求中还带有加密参数，不好轻易获取，但有了这个方法之后，这里如果我们想要的Ajax请求，就非常容易了，改写下判定条件，输出对应的JSON结果，改写如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_response</span>(<span class="params">response</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;/api/movie/&#x27;</span> <span class="keyword">in</span> response.url <span class="keyword">and</span> response.status == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(response.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.on(<span class="string">&#x27;response&#x27;</span>, on_response)</span><br><span class="line">    page.goto(<span class="string">&#x27;https://spa6.scrape.center/&#x27;</span>)</span><br><span class="line">    page.wait_for_load_state(<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>控制台输出如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;霸王别姬&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;Farewell My Concubine&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;剧情&#x27;</span>, <span class="string">&#x27;爱情&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1993-07-26&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">171</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.5</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;中国大陆&#x27;</span>, <span class="string">&#x27;中国香港&#x27;</span>]&#125;, </span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;published_at&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">103</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;狮子王&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>: <span class="string">&#x27;The Lion King&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>: <span class="string">&#x27;https://p0.meituan.net/movie/27b76fe6cf3903f3d74963f70786001e1438406.jpg@464w_644h_1e_1c&#x27;</span>, <span class="string">&#x27;categories&#x27;</span>: [<span class="string">&#x27;动画&#x27;</span>, <span class="string">&#x27;歌舞&#x27;</span>, <span class="string">&#x27;冒险&#x27;</span>], <span class="string">&#x27;published_at&#x27;</span>: <span class="string">&#x27;1995-07-15&#x27;</span>, <span class="string">&#x27;minute&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">9.0</span>, <span class="string">&#x27;regions&#x27;</span>: [<span class="string">&#x27;美国&#x27;</span>]&#125;]&#125;</span><br></pre></td></tr></table></figure><h5 id="获取页面源码"><a href="#获取页面源码" class="headerlink" title="获取页面源码"></a>获取页面源码</h5><p>要获取页面的 HTML 代码其实很简单，我们直接通过 content 方法获取即可，用法如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://spa6.scrape.center/&#x27;</span>)</span><br><span class="line">    page.wait_for_load_state(<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    html = page.content()</span><br><span class="line">    <span class="built_in">print</span>(html)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>运行结果就是页面的 HTML 代码。获取了 HTML 代码之后，我们通过一些解析工具就可以提取想要的信息了</p><h5 id="页面点击"><a href="#页面点击" class="headerlink" title="页面点击"></a>页面点击</h5><p>刚才我们通过示例也了解了页面点击的方法，那就是 click，这里详细说一下其使用方法</p><p>页面点击的 API 定义如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.click(selector, **kwargs)</span><br></pre></td></tr></table></figure><p>这里可以看到必传的参数是 selector，其他的参数都是可选的。第一个 selector 就代表选择器，可以用来匹配想要点击的节点，如果传入的选择器匹配了多个节点，那么只会用第一个节点。</p><p>这个方法的内部执行逻辑如下：</p><ul><li>根据 selector 找到匹配的节点，如果没有找到，那就一直等待直到超时，超时时间可以由额外的 timeout 参数设置，默认是 30 秒。</li><li>等待对该节点的可操作性检查的结果，比如说如果某个按钮设置了不可点击，那它会等待该按钮变成了可点击的时候才去点击，除非通过 force 参数设置跳过可操作性检查步骤强制点击。</li><li>如果需要的话，就滚动下页面，把需要被点击的节点呈现出来。</li><li>调用 page 对象的 mouse 方法，点击节点中心的位置，如果指定了 position 参数，那就点击指定的位置。</li></ul><p>click 方法的一些比较重要的参数如下：</p><ul><li>click_count：点击次数，默认为 1。</li><li>timeout：等待要点击的节点的超时时间，默认是 30 秒。</li><li>position：需要传入一个字典，带有 x 和 y 属性，代表点击位置相对节点左上角的偏移位置。</li><li>force：即使不可点击，那也强制点击。默认是 False。</li></ul><p>具体的 API 设置参数可以参考官方文档：<a class="link"   href="https://playwright.dev/python/docs/api/class-page/#pageclickselector-kwargs%E3%80%82" >https://playwright.dev/python/docs/api/class-page/#pageclickselector-kwargs<i class="fas fa-external-link-alt"></i></a></p><h5 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h5><p>文本输入对应的方法是 fill，API 定义如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.fill(selector, value, **kwargs)</span><br></pre></td></tr></table></figure><p>这个方法有两个必传参数，第一个参数也是 selector，第二个参数是 value，代表输入的内容，另外还可以通过 timeout 参数指定对应节点的最长等待时间</p><h5 id="获取节点属性"><a href="#获取节点属性" class="headerlink" title="获取节点属性"></a>获取节点属性</h5><p>除了对节点进行操作，我们还可以获取节点的属性，方法就是 get_attribute，API 定义如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.get_attribute(selector, name, **kwargs)</span><br></pre></td></tr></table></figure><p>这个方法有两个必传参数，第一个参数也是 selector，第二个参数是 name，代表要获取的属性名称，另外还可以通过 timeout 参数指定对应节点的最长等待时间</p><p>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://spa6.scrape.center/&#x27;</span>)</span><br><span class="line">    page.wait_for_load_state(<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    href = page.get_attribute(<span class="string">&#x27;a.name&#x27;</span>, <span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(href)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>这里我们调用了 get_attribute 方法，传入的 selector 是 <code>a.name</code>，选定了 class 为 name 的 a 节点，然后第二个参数传入了 href，获取超链接的内容，输出结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIx</span><br></pre></td></tr></table></figure><p>可以看到对应 href 属性就获取出来了，但这里只有一条结果，因为这里有个条件，那就是如果传入的选择器匹配了多个节点，那么只会用第一个节点。</p><p>那怎么获取所有的节点呢</p><h5 id="获取多个节点"><a href="#获取多个节点" class="headerlink" title="获取多个节点"></a>获取多个节点</h5><p>获取所有节点可以使用 query_selector_all 方法，它可以返回节点列表，通过遍历获取到单个节点之后，我们可以接着调用单个节点的方法来进行一些操作和属性获取，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://spa6.scrape.center/&#x27;</span>)</span><br><span class="line">    page.wait_for_load_state(<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    elements = page.query_selector_all(<span class="string">&#x27;a.name&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">        <span class="built_in">print</span>(element.get_attribute(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(element.text_content())</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>这里我们通过 query_selector_all 方法获取了所有匹配到的节点，每个节点对应的是一个 ElementHandle 对象，然后 ElementHandle 对象也有 get_attribute 方法来获取节点属性，另外还可以通过 text_content 方法获取节点文本，运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIx</span><br><span class="line">霸王别姬 - Farewell My Concubine</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIy</span><br><span class="line">这个杀手不太冷 - Léon</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIz</span><br><span class="line">肖申克的救赎 - The Shawshank Redemption</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI0</span><br><span class="line">泰坦尼克号 - Titanic</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI1</span><br><span class="line">罗马假日 - Roman Holiday</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI2</span><br><span class="line">唐伯虎点秋香 - Flirting Scholar</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI3</span><br><span class="line">乱世佳人 - Gone <span class="keyword">with</span> the Wind</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI4</span><br><span class="line">喜剧之王 - The King of Comedy</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI5</span><br><span class="line">楚门的世界 - The Truman Show</span><br><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIxMA==</span><br><span class="line">狮子王 - The Lion King</span><br></pre></td></tr></table></figure><h5 id="获取单个节点"><a href="#获取单个节点" class="headerlink" title="获取单个节点"></a>获取单个节点</h5><p>获取单个节点也有特定的方法，就是 query_selector，如果传入的选择器匹配到多个节点，那它只会返回第一个节点，示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line">    page.goto(<span class="string">&#x27;https://spa6.scrape.center/&#x27;</span>)</span><br><span class="line">    page.wait_for_load_state(<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    element = page.query_selector(<span class="string">&#x27;a.name&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(element.get_attribute(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(element.text_content())</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIx</span><br><span class="line">霸王别姬 - Farewell My Concubine</span><br></pre></td></tr></table></figure><p>可以看到这里只输出了第一个匹配节点的信息</p><h5 id="网络劫持"><a href="#网络劫持" class="headerlink" title="网络劫持"></a>网络劫持</h5><p>最后再介绍一个实用的方法 route，利用 route 方法，我们可以实现一些网络劫持和修改操作，比如修改 request 的属性，修改 response 响应结果等</p><p>看一个实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cancel_request</span>(<span class="params">route, request</span>):</span></span><br><span class="line">        route.abort()</span><br><span class="line"></span><br><span class="line">    page.route(re.<span class="built_in">compile</span>(<span class="string">r&quot;(\.png)|(\.jpg)&quot;</span>), cancel_request)</span><br><span class="line">    page.goto(<span class="string">&quot;https://spa6.scrape.center/&quot;</span>)</span><br><span class="line">    page.wait_for_load_state(<span class="string">&#x27;networkidle&#x27;</span>)</span><br><span class="line">    page.screenshot(path=<span class="string">&#x27;no_picture.png&#x27;</span>)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>这里我们调用了 route 方法，第一个参数通过正则表达式传入了匹配的 URL 路径，这里代表的是任何包含 <code>.png</code> 或 <code>.jpg</code> 的链接，遇到这样的请求，会回调 cancel_request 方法处理，cancel_request 方法可以接收两个参数，一个是 route，代表一个 CallableRoute 对象，另外一个是 request，代表 Request 对象。这里我们直接调用了 route 的 abort 方法，取消了这次请求，所以最终导致的结果就是图片的加载全部取消了，运行结果如下所示:</p><p><a href="https://imgtu.com/i/bCNuq0"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/bCNuq0.png"                      alt="bCNuq0.png"                ></a></p><p>这个设置有什么用呢？其实是有用的，因为图片资源都是二进制文件，而我们在做爬取过程中可能并不想关心其具体的二进制文件的内容，可能只关心图片的 URL 是什么，所以在浏览器中是否把图片加载出来就不重要了。所以如此设置之后，我们可以提高整个页面的加载速度，提高爬取效率。</p><p>另外，利用这个功能，我们还可以将一些响应内容进行修改，比如直接修改 Response 的结果为自定义的文本文件内容。</p><p>首先这里定义一个 HTML 文本文件，命名为 custom_response.html，内容如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hack Response&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hack Response&lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码编写如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    page = browser.new_page()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_response</span>(<span class="params">route, request</span>):</span></span><br><span class="line">        route.fulfill(path=<span class="string">&quot;./custom_response.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    page.route(<span class="string">&#x27;/&#x27;</span>, modify_response)</span><br><span class="line">    page.goto(<span class="string">&quot;https://spa6.scrape.center/&quot;</span>)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>这里我们使用 route 的 fulfill 方法指定了一个本地文件，就是刚才我们定义的 HTML 文件，运行结果如下:</p><p><a href="https://imgtu.com/i/bCN5FS"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/bCN5FS.png"                      alt="bCN5FS.png"                ></a></p><p>可以看到，Response 的运行结果就被我们修改了，URL 还是不变的，但是结果已经成了我们修改的 HTML 代码。</p><p>所以通过 route 方法，我们可以灵活地控制请求和响应的内容，从而在某些场景下达成某些目的</p><h3 id="Selenium爬取实战"><a href="#Selenium爬取实战" class="headerlink" title="Selenium爬取实战"></a>Selenium爬取实战</h3><p>目标网站: <a class="link"   href="https://spa2.scrape.center/" >https://spa2.scrape.center/<i class="fas fa-external-link-alt"></i></a></p><p>我们要完成以下工作:</p><ul><li>通过Selenium遍历列表页，获取每部电影的详情页URL</li><li>通过Selenium根据上一步获取的详情页URL爬取每部电影的详情页</li><li>从详情页中提取每部电影的名称、类别、分数、简介、封面等信息</li></ul><p>下面就直接上代码叭:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> makedirs</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> exists</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">INDEX_URL = <span class="string">&#x27;https://spa2.scrape.center/page/&#123;page&#125;&#x27;</span></span><br><span class="line">TIMEOUT = <span class="number">10</span></span><br><span class="line">TOTAL_PAGE = <span class="number">10</span></span><br><span class="line"><span class="comment"># 以上代码都是初始化操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RESULTS_DIR = <span class="string">&#x27;results&#x27;</span></span><br><span class="line"></span><br><span class="line">exists(RESULTS_DIR) <span class="keyword">or</span> makedirs(RESULTS_DIR)</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;useAutomationExtension&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=options)  <span class="comment"># 创建一个浏览器对象</span></span><br><span class="line">wait = WebDriverWait(browser, TIMEOUT)  <span class="comment"># 利用它可以配置页面加载的最长时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scrape_page</span>(<span class="params">url, condition, locator</span>):</span>  <span class="comment"># 通用的爬取方法，可以对任意的URL进行爬取、状态监听以及异常处理</span></span><br><span class="line">    logging.info(<span class="string">&#x27;scraping %s&#x27;</span>, url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.get(url)</span><br><span class="line">        wait.until(condition(locator))</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        logging.error(<span class="string">&#x27;error occurred while scraping %s&#x27;</span>, url, exc_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scrape_index</span>(<span class="params">page</span>):</span>  <span class="comment"># 爬取列表页</span></span><br><span class="line">    url = INDEX_URL.<span class="built_in">format</span>(page=page)</span><br><span class="line">    scrape_page(url, condition=EC.visibility_of_all_elements_located,</span><br><span class="line">                locator=(By.CSS_SELECTOR, <span class="string">&#x27;#index .item&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span>():</span>  <span class="comment"># 解析列表页</span></span><br><span class="line">    elements = browser.find_elements_by_css_selector(<span class="string">&#x27;#index .item .name&#x27;</span>)  <span class="comment"># 从列表页中提取所有电影节点</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">        href = element.get_attribute(<span class="string">&#x27;href&#x27;</span>)  <span class="comment"># 提取详情页的href</span></span><br><span class="line">        <span class="keyword">yield</span> urljoin(INDEX_URL, href)  <span class="comment"># 合并成完整的URL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scrape_detail</span>(<span class="params">url</span>):</span>  <span class="comment"># 爬取详情页之前，先判断页面是否加载成功，用visibility_of_element_located查看是否将h2加载出来，如果加载出来了，那页面就加载成功</span></span><br><span class="line">    scrape_page(url, condition=EC.visibility_of_element_located,</span><br><span class="line">                locator=(By.TAG_NAME, <span class="string">&#x27;h2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>():</span>  <span class="comment"># 爬取详情页</span></span><br><span class="line">    url = browser.current_url</span><br><span class="line">    name = browser.find_element_by_tag_name(<span class="string">&#x27;h2&#x27;</span>).text</span><br><span class="line">    categories = [element.text <span class="keyword">for</span> element <span class="keyword">in</span> browser.find_elements_by_css_selector(<span class="string">&#x27;.categories button span&#x27;</span>)]</span><br><span class="line">    cover = browser.find_element_by_css_selector(<span class="string">&#x27;.cover&#x27;</span>).get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    score = browser.find_element_by_class_name(<span class="string">&#x27;score&#x27;</span>).text</span><br><span class="line">    drama = browser.find_element_by_css_selector(<span class="string">&#x27;.drama p&#x27;</span>).text</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: url,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;categories&#x27;</span>: categories,</span><br><span class="line">        <span class="string">&#x27;cover&#x27;</span>: cover,</span><br><span class="line">        <span class="string">&#x27;score&#x27;</span>: score,</span><br><span class="line">        <span class="string">&#x27;drama&#x27;</span>: drama</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    name = data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    data_path = <span class="string">f&#x27;<span class="subst">&#123;RESULTS_DIR&#125;</span>/<span class="subst">&#123;name&#125;</span>.json&#x27;</span></span><br><span class="line">    json.dump(data, <span class="built_in">open</span>(data_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>), ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, TOTAL_PAGE + <span class="number">1</span>):</span><br><span class="line">            scrape_index(page)</span><br><span class="line">            detail_urls = parse_index()</span><br><span class="line">            <span class="keyword">for</span> detail_url <span class="keyword">in</span> <span class="built_in">list</span>(detail_urls):</span><br><span class="line">                logging.info(<span class="string">&#x27;get detail url %s&#x27;</span>, detail_url)</span><br><span class="line">                scrape_detail(detail_url)</span><br><span class="line">                detail_data = parse_detail()</span><br><span class="line">                logging.info(<span class="string">&#x27;detail data %s&#x27;</span>, detail_data)</span><br><span class="line">                save_data(detail_data)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="Pyppeteer爬取实战"><a href="#Pyppeteer爬取实战" class="headerlink" title="Pyppeteer爬取实战"></a>Pyppeteer爬取实战</h3><p>目标网站: <a class="link"   href="https://spa2.scrape.center/" >https://spa2.scrape.center/<i class="fas fa-external-link-alt"></i></a></p><p>要完成的工作和上面的一样</p><p>准备工作，安装好Python，最低版本为3.6，安装好Pyppeteer并能成功运行实例</p><p>下面就直接上代码叭:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> exists</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> makedirs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> pyppeteer.errors <span class="keyword">import</span> TimeoutError</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">INDEX_URL = <span class="string">&#x27;https://spa2.scrape.center/page/&#123;page&#125;&#x27;</span></span><br><span class="line">TIMEOUT = <span class="number">10</span></span><br><span class="line">TOTAL_PAGE = <span class="number">10</span></span><br><span class="line">RESULTS_DIR = <span class="string">&#x27;results&#x27;</span></span><br><span class="line">WINDOW_WIDTH, WINDOW_HEIGHT = <span class="number">1366</span>, <span class="number">768</span></span><br><span class="line"></span><br><span class="line">exists(RESULTS_DIR) <span class="keyword">or</span> makedirs(RESULTS_DIR)</span><br><span class="line"></span><br><span class="line">browser, tab = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">HEADLESS = <span class="literal">True</span>  <span class="comment"># 不会弹出窗口</span></span><br><span class="line"><span class="comment"># 以上代码都是准备工作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    <span class="keyword">global</span> browser, tab  <span class="comment"># 设置为全局变量，方便其他方法调用</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=HEADLESS,</span><br><span class="line">                           args=[<span class="string">&#x27;--disable-infobars&#x27;</span>, <span class="string">f&#x27;--window-size=<span class="subst">&#123;WINDOW_WIDTH&#125;</span>,<span class="subst">&#123;WINDOW_HEIGHT&#125;</span>&#x27;</span>])  <span class="comment"># 隐藏提示条和设置了浏览器宽高</span></span><br><span class="line">    tab = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> tab.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: WINDOW_WIDTH, <span class="string">&#x27;height&#x27;</span>: WINDOW_HEIGHT&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrape_page</span>(<span class="params">url, selector</span>):</span>  <span class="comment"># 通用的爬取方法，url为要爬取的页面的URL，使用 goto即可调用此URL访问对应页面，Selector即等待渲染出的节点对应的CSS选择器</span></span><br><span class="line">    logging.info(<span class="string">&#x27;scraping %s&#x27;</span>, url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> tab.goto(url)</span><br><span class="line">        <span class="keyword">await</span> tab.waitForSelector(selector, options=&#123;</span><br><span class="line">            <span class="string">&#x27;timeout&#x27;</span>: TIMEOUT * <span class="number">1000</span></span><br><span class="line">        &#125;)  <span class="comment"># 调用waitForSelector方法，传入selector，并通过options指定了最长等待时间</span></span><br><span class="line">    <span class="keyword">except</span> TimeoutError:</span><br><span class="line">        logging.error(<span class="string">&#x27;error occurred while scraping %s&#x27;</span>, url, exc_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrape_index</span>(<span class="params">page</span>):</span>  <span class="comment"># 爬取列表页</span></span><br><span class="line">    url = INDEX_URL.<span class="built_in">format</span>(page=page)</span><br><span class="line">    <span class="keyword">await</span> scrape_page(url, <span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">parse_index</span>():</span>  <span class="comment"># 解析列表页</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> tab.querySelectorAllEval(<span class="string">&#x27;.item .name&#x27;</span>, <span class="string">&#x27;nodes =&gt; nodes.map(node =&gt; node.href)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrape_detail</span>(<span class="params">url</span>):</span>  <span class="comment"># 爬取详情页</span></span><br><span class="line">    <span class="keyword">await</span> scrape_page(url, <span class="string">&#x27;h2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>():</span></span><br><span class="line">    url = tab.url</span><br><span class="line">    name = <span class="keyword">await</span> tab.querySelectorEval(<span class="string">&#x27;h2&#x27;</span>, <span class="string">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class="line">    categories = <span class="keyword">await</span> tab.querySelectorAllEval(<span class="string">&#x27;.categories button span&#x27;</span>, <span class="string">&#x27;nodes =&gt; nodes.map(node =&gt; node.innerText)&#x27;</span>)</span><br><span class="line">    cover = <span class="keyword">await</span> tab.querySelectorEval(<span class="string">&#x27;.cover&#x27;</span>, <span class="string">&#x27;node =&gt; node.src&#x27;</span>)</span><br><span class="line">    score = <span class="keyword">await</span> tab.querySelectorEval(<span class="string">&#x27;.score&#x27;</span>, <span class="string">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class="line">    drama = <span class="keyword">await</span> tab.querySelectorEval(<span class="string">&#x27;.drama p&#x27;</span>, <span class="string">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: url,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;categories&#x27;</span>: categories,</span><br><span class="line">        <span class="string">&#x27;cover&#x27;</span>: cover,</span><br><span class="line">        <span class="string">&#x27;score&#x27;</span>: score,</span><br><span class="line">        <span class="string">&#x27;drama&#x27;</span>: drama</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    name = data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    data_path = <span class="string">f&#x27;<span class="subst">&#123;RESULTS_DIR&#125;</span>/<span class="subst">&#123;name&#125;</span>.json&#x27;</span></span><br><span class="line">    json.dump(data, <span class="built_in">open</span>(data_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>), ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">await</span> init()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, TOTAL_PAGE + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">await</span> scrape_index(page)</span><br><span class="line">            detail_urls = <span class="keyword">await</span> parse_index()</span><br><span class="line">            <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">                <span class="keyword">await</span> scrape_detail(detail_url)</span><br><span class="line">                detail_data = <span class="keyword">await</span> parse_detail()</span><br><span class="line">                logging.info(<span class="string">&#x27;data %s&#x27;</span>, detail_data)</span><br><span class="line">                <span class="keyword">await</span> save_data(detail_data)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h3 id="CSS位置偏移反爬案例分析与爬取实战"><a href="#CSS位置偏移反爬案例分析与爬取实战" class="headerlink" title="CSS位置偏移反爬案例分析与爬取实战"></a>CSS位置偏移反爬案例分析与爬取实战</h3><p>我们学习了Selenium、Pyppeteer等工具，体会了它们的强大，但千万别以为这些工具就是万能的，不容易爬取的数据依然存在，例如网页利用CSS控制文字的偏移位置，或者通过一些特殊的方式隐蔽关键信息，都有可能对数据爬取造成干扰，接下来我们就先了解下CSS位置偏移反爬虫的一些解决方案</p><h4 id="案例导入"><a href="#案例导入" class="headerlink" title="案例导入"></a>案例导入</h4><p>先介绍下一个案例<a class="link"   href="https://antispider3.scrape.center/%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA" >https://antispider3.scrape.center/，页面如下图所示<i class="fas fa-external-link-alt"></i></a>:</p><p><a href="https://imgtu.com/i/bP3Epn"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/bP3Epn.png"                      alt="bP3Epn.png"                ></a></p><p>乍一看似乎也没什么特别之处，但如果真用Selenium等工具爬取和提取数据，坑就立马显现出来了，不妨试一试，我们先尝试用Selenium获取首页的页面源代码，并解析每个标题的内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://antispider3.scrape.center/&#x27;</span>)</span><br><span class="line">WebDriverWait(browser, <span class="number">10</span>) \</span><br><span class="line">    .until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, <span class="string">&#x27;.item&#x27;</span>)))</span><br><span class="line">html = browser.page_source</span><br><span class="line">doc = pq(html)</span><br><span class="line">names = doc(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names.items():</span><br><span class="line">    <span class="built_in">print</span>(name.text())</span><br></pre></td></tr></table></figure><p>然而结果确是这样的：</p><p><a href="https://imgtu.com/i/bPGhSs"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/bPGhSs.png"                      alt="bPGhSs.png"                ></a></p><p>很多字的顺序都乱了，这是怎么回事呢</p><h4 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h4><p>我们进浏览器去看下源代码:</p><p>可以看到这源代码本身就是乱的，一个字对应一个span节点，所以用pyqueqy提取出来的标题内容乱序就不足为怪了，那么源代码本身就是乱的，那为什么在网页上看到的标题是正确的?这是因为网页本身利用CSS控制了文字的偏移位置，什么意思呢，我们先观察以下源代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">data-v-7f1a77ef</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-b-sm name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-v-7f1a77ef</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;char&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: 48px;&quot;</span>&gt;</span></span><br><span class="line">                      风</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-v-7f1a77ef</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;char&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: 16px;&quot;</span>&gt;</span></span><br><span class="line">                      白</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-v-7f1a77ef</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;char&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: 0px;&quot;</span>&gt;</span></span><br><span class="line">                      清</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-v-7f1a77ef</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;char&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: 32px;&quot;</span>&gt;</span></span><br><span class="line">                      家</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现，每个span节点都有一个style属性，表示CSS样式，left的取值各不相同；另外，在浏览器中观察一下每各span节点的完整样式，如下图所示:</p><p><a href="https://imgtu.com/i/bPYdKI"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/23/bPYdKI.png"                      alt="bPYdKI.png"                ></a></p><p>可以看到，span还有两个额外的样式，是display: inline-block和position: absolute，后者比较重要，代表绝对定位，设置这个样式后，就可以通过left的值控制span节点在页面中的偏移位置了，例如left:0px代表不偏移，left:16px代表从左边起向右偏移16像素，于是节点就到了右边，那这样就能解释上面字的顺序了</p><h4 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h4><p>了解了基本原理后，我们就可以对症下药了，这里只需要获取每个span节点的style属性，提取出偏移值，然后排序就可以得到最终结果了，我们先实现基本的提取方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_name</span>(<span class="params">name_html</span>):</span>  <span class="comment"># name_html:标题的HTML文本</span></span><br><span class="line">    chars = name_html(<span class="string">&#x27;.char&#x27;</span>)</span><br><span class="line">    items = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars.items():</span><br><span class="line">        items.append(&#123;</span><br><span class="line">            <span class="string">&#x27;text&#x27;</span>: char.text().strip(),</span><br><span class="line">            <span class="string">&#x27;left&#x27;</span>: <span class="built_in">int</span>(re.search(<span class="string">&#x27;(\d+)px&#x27;</span>, char.attr(<span class="string">&#x27;style&#x27;</span>)).group(<span class="number">1</span>))  <span class="comment"># 提取style属性值</span></span><br><span class="line">        &#125;)</span><br><span class="line">    items = <span class="built_in">sorted</span>(items, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;left&#x27;</span>], reverse=<span class="literal">False</span>)  <span class="comment"># 字典排序</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([item.get(<span class="string">&#x27;text&#x27;</span>) <span class="keyword">for</span> item <span class="keyword">in</span> items])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://antispider3.scrape.center/&#x27;</span>)</span><br><span class="line">WebDriverWait(browser, <span class="number">10</span>) \</span><br><span class="line">    .until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, <span class="string">&#x27;.item&#x27;</span>)))</span><br><span class="line">html = browser.page_source</span><br><span class="line">doc = pq(html)</span><br><span class="line">names = doc(<span class="string">&#x27;.item .name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name_html <span class="keyword">in</span> names.items():</span><br><span class="line">    name = parse_name(name_html)</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>以上代码不多做解释，最终最终的运行效果就没错了，可是我们发现，少了几个标题，然后内容之间还有空余，我们来看看源代码:</p><p><a href="https://imgtu.com/i/bPXurD"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/bPXurD.png"                      alt="bPXurD.png"                ></a><br>经过观察，我们发现内部没有span节点的h3标题节点都带有一个额外的取值为name whole的class属性，其余标题节点都分为了一个个span节点，搞清楚了问题所在，接下来稍加判断即可，改写解析方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_name</span>(<span class="params">name_html</span>):</span>  <span class="comment"># name_html:标题的HTML文本</span></span><br><span class="line">    has_whole = name_html(<span class="string">&#x27;.whole&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> has_whole:</span><br><span class="line">        <span class="keyword">return</span> name_html.text()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        chars = name_html(<span class="string">&#x27;.char&#x27;</span>)</span><br><span class="line">        items = []</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> chars.items():</span><br><span class="line">            items.append(&#123;</span><br><span class="line">                <span class="string">&#x27;text&#x27;</span>: char.text().strip(),</span><br><span class="line">                <span class="string">&#x27;left&#x27;</span>: <span class="built_in">int</span>(re.search(<span class="string">&#x27;(\d+)px&#x27;</span>, char.attr(<span class="string">&#x27;style&#x27;</span>)).group(<span class="number">1</span>))  <span class="comment"># 提取style属性值</span></span><br><span class="line">            &#125;)</span><br><span class="line">        items = <span class="built_in">sorted</span>(items, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;left&#x27;</span>], reverse=<span class="literal">False</span>)  <span class="comment"># 字典排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([item.get(<span class="string">&#x27;text&#x27;</span>) <span class="keyword">for</span> item <span class="keyword">in</span> items])</span><br></pre></td></tr></table></figure><p>这样我们就成功爬取了书籍网站上的每本书的名称，刚刚用火狐使了下，下面看看效果:</p><p><a href="https://imgtu.com/i/bPvqVe"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/bPvqVe.png"                      alt="bPvqVe.png"                ></a></p><h3 id="字体反爬案例分析与爬取实战"><a href="#字体反爬案例分析与爬取实战" class="headerlink" title="字体反爬案例分析与爬取实战"></a>字体反爬案例分析与爬取实战</h3><p>接下来我们再分析一个反爬案例，该案例将真实的数据隐藏到字体文件里，使我们即使获取到了页面源代码，也没法直接提取数据的真实值</p><h4 id="案例导入-1"><a href="#案例导入-1" class="headerlink" title="案例导入"></a>案例导入</h4><p>案例网站: <a class="link"   href="https://antispider4.scrape.center/" >https://antispider4.scrape.center/<i class="fas fa-external-link-alt"></i></a></p><p>我们先按正常的逻辑来爬取一些信息，例如电影标题、类别、评分等，代码实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">&#x27;https://antispider4.scrape.center/&#x27;</span>)</span><br><span class="line">WebDriverWait(browser, <span class="number">10</span>) \</span><br><span class="line">    .until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, <span class="string">&#x27;.item&#x27;</span>)))</span><br><span class="line">html = browser.page_source</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">&#x27;.item&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items.items():</span><br><span class="line">    name = item(<span class="string">&#x27;.name&#x27;</span>).text()</span><br><span class="line">    categories = [o.text() <span class="keyword">for</span> o <span class="keyword">in</span> item(<span class="string">&#x27;.categories button&#x27;</span>).items()]</span><br><span class="line">    score = item(<span class="string">&#x27;.score&#x27;</span>).text()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;name: <span class="subst">&#123;name&#125;</span> categories: <span class="subst">&#123;categories&#125;</span> score: <span class="subst">&#123;score&#125;</span>&#x27;</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>运行结果如下，我们发现score看不到任何东西，但是在页面上是能看到的啊:</p><p><a href="https://imgtu.com/i/bPxUsK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/bPxUsK.png"                      alt="bPxUsK.png"                ></a></p><p>经过观察，我们发现评分对应的源代码并不包含数字信息，如下图所示:</p><p><a href="https://imgtu.com/i/bPxTWn"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/bPxTWn.png"                      alt="bPxTWn.png"                ></a></p><p>span节点中啥也没有，那自然提取不出来了，那页面上的评分是怎么显示出来的呢，其实也是CSS在搞鬼</p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p>我们观察源码得到，各个span节点的不同之处在于内部i节点的class取值不太一样；可以看到下图中一共有3个span节点，对应的class取值分别是icon-789、icon-981和icon-504，这和显示出来的9.5有什么关系呢？</p><p><a href="https://imgtu.com/i/biSCNQ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/biSCNQ.png"                      alt="biSCNQ.png"                ></a></p><p>会发现i节点内部有一个::before字段，在CSS中，该字段用于创建一个伪节点，即这个节点和i节点或者span节点不一样；::before可以往特定的节点中插入内容，同时在CSS中使用content字段定义这个内容；我们在第一个i节点里看到了9这个数字，再观察另外两个i节点，可以看到，这三个组合起来就是9.5</p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>那class的取值和content字段值的映射关系是怎么定义的呢，我们可以在浏览器中追踪CSS源代码，代码文件如下图标注所示:</p><p><a href="https://imgtu.com/i/bipCqK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/bipCqK.png"                      alt="bipCqK.png"                ></a></p><p>进入文件之后，我们可以看到整个CSS源代码都放在一行，点击”{}”按钮格式化代码，如下图所示:</p><p><a href="https://imgtu.com/i/bip8iQ"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/bip8iQ.png"                      alt="bip8iQ.png"                ></a></p><p>我们可以在其中找出如下内容:</p><p><a href="https://imgtu.com/i/biPJRH"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/biPJRH.png"                      alt="biPJRH.png"                ></a></p><p>原来class对应的值就是一个个评分结果，这样我们就有底了，只需要解析对应的结果再做转换即可；这里需要读取CSS文件并提取映射关系，这个CSS文件是: <a class="link"   href="https://spa2.scrape.center/css/app.ea9d802a.css%EF%BC%8C%E5%85%B6%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%E6%89%80%E7%A4%BA" >https://spa2.scrape.center/css/app.ea9d802a.css，其部分内容如下所示<i class="fas fa-external-link-alt"></i></a>:</p><p><a href="https://imgtu.com/i/bFmegK"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/02/24/bFmegK.png"                      alt="bFmegK.png"                ></a></p><p>我们可以试着用requsest库读取结果，并通过正则表达式将映射关系提取出来，代码实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://antispider4.scrape.center/css/app.654ba59e.css&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;.icon-(.*?):before\&#123;content:&quot;(.*?)&quot;\&#125;&#x27;</span>)</span><br><span class="line">results = re.findall(pattern, response.text)</span><br><span class="line">icon_map = &#123;item[<span class="number">0</span>]: item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> results&#125;</span><br></pre></td></tr></table></figure><p>这里我们首先使用request库提取了CSS文件的内容，然后使用了正则表达式进行了文本匹配，表达式写作:<code>.icon-(.*?):before\&#123;content:&quot;(.*?)&quot;\&#125;</code>，这个表达式并没有考虑空格，因为CSS源代码本身就没有空格</p><p>以上结果就类似:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;at&quot;</span>: <span class="string">&quot;@&quot;</span>,</span><br><span class="line">    <span class="string">&quot;A&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如使用789索引，得到的结果就是9:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(icon_map[<span class="string">&#x27;789&#x27;</span>])  <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><p>所以我们只需要修改下逻辑，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://antispider4.scrape.center/css/app.654ba59e.css&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;.icon-(.*?):before\&#123;content:&quot;(.*?)&quot;\&#125;&#x27;</span>)</span><br><span class="line">results = re.findall(pattern, response.text)</span><br><span class="line">icon_map = &#123;item[<span class="number">0</span>]: item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> results&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_score</span>(<span class="params">item</span>):</span></span><br><span class="line">    elements = item(<span class="string">&#x27;.icon&#x27;</span>)</span><br><span class="line">    icon_values = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> elements.items():</span><br><span class="line">        class_name = (element.attr(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line">        icon_key = re.search(<span class="string">&#x27;icon-(\d+)&#x27;</span>, class_name).group(<span class="number">1</span>)</span><br><span class="line">        icon_value = icon_map.get(icon_key)</span><br><span class="line">        icon_values.append(icon_value)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(icon_values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://antispider4.scrape.center/&#x27;</span>)</span><br><span class="line">WebDriverWait(browser, <span class="number">10</span>) \</span><br><span class="line">    .until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, <span class="string">&#x27;.item&#x27;</span>)))</span><br><span class="line">html = browser.page_source</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">&#x27;.item&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items.items():</span><br><span class="line">    name = item(<span class="string">&#x27;.name&#x27;</span>).text()</span><br><span class="line">    categories = [o.text() <span class="keyword">for</span> o <span class="keyword">in</span> item(<span class="string">&#x27;.categories button&#x27;</span>).items()]</span><br><span class="line">    score = parse_score(item)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;name: <span class="subst">&#123;name&#125;</span> categories: <span class="subst">&#123;categories&#125;</span> score: <span class="subst">&#123;score&#125;</span>&#x27;</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>这里我们定义了一个parse_score方法，它接收一个Pyquery对象item，对应着一个电影条目；首先提取item中所有带icon这个class的节点，然后遍历这些节点，从class属性里提取对应的icon代号，例如icon-789，提取的结果就是789，和我们刚刚构造的icon_map是相对应的，将其赋值给icon_key，然后使用icon_key从icon_map中查找对应的真实值，赋值为icon_value，最后将icon_value拼合成一个字符串返回</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在第5章中，我们了解了Ajax数据的分析和爬取方式，其实这也是JavaScript动态渲染页面的一种情形，通过直接分析Ajax，使我们仍然可以借助request或urllib实现数据爬取，不过JavaScript动态渲染不止Ajax一种，有些页面的分页部分由JavaScri</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第6章-异步爬虫</title>
    <link href="http://example.com/2022/02/09/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC6%E7%AB%A0-%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/2022/02/09/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC6%E7%AB%A0-%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB/</id>
    <published>2022-02-09T03:25:30.000Z</published>
    <updated>2022-02-11T02:09:00.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="协程的基本原理"><a href="#协程的基本原理" class="headerlink" title="协程的基本原理"></a>协程的基本原理</h3><p>要实现异步机制的爬虫，那自然和协程脱不了关系，下面我们就来了解下使用协程实现加速的方法，这种方法<strong>对IO密集型任务非常有效</strong></p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><h5 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h5><p>阻塞状态是指<strong>程序未得到所需计算资源时被挂起的状态</strong>；程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的</p><p>常见的阻塞形式有以下几种:</p><ul><li>网络IO阻塞</li><li>磁盘IO阻塞</li><li>用户输入阻塞</li></ul><p>阻塞是无处不在的，包括CPU在执行上下文时，所有进程都无法真正干事情，它们也会阻塞；在多核CPU的情况下，正在执行上下文切换操作的核不可被利用</p><h5 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h5><p>非阻塞状态是指程序在等待某操作的时候，自身不被阻塞，可以继续干别的事情</p><p>非阻塞因阻塞而存在，正因阻塞导致程序运行的耗时增加与效率低下，我们才要把它变成非阻塞</p><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><p>举个栗子叭，在购物系统中更新商品库存时，需要用”行锁”，作为通行信号，强制让不同的更新请求<strong>排队并按顺序执行</strong>，这里的更新库存操作就是同步的，简而言之，<strong>同步意味着有序</strong>，不同程序单元在完成某个任务时需要靠某种通行方式保持协调一致才能完成任务</p><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><p>举个栗子叭，我们爬虫下载网页，<strong>调度程序调用下载程序后，即可调用其他下载任务</strong>，无需与该下载任务保持通行以协调行为，简而言之，<strong>异步意味着无序</strong>，不同程序单元在完成某个任务时不需要靠某种通行方式保持协调一致也能完成任务</p><h5 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h5><p>多进程就是利用CPU的多核优势，在同一时间并发执行多个任务，可以大大提高执行效率</p><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><p>线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位，而多线程就是指从软件或者硬件上实现多个线程并发执行的技术</p><h5 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h5><p>协程(coroutine)，又称微线程，是一种运行在用户态的轻量级线程，它拥有自己的寄存器上下文和栈，协程在调度切换时，将寄存器上下文和栈保存到其他地方， 等切回来的时候，再恢复先前保存的寄存器上下文和栈；因此，协程能保留上一次调用时的状态，每次进入都会进入上一次的所保留的状态</p><p>在我们的爬虫场景下，<strong>我们发出一个请求后，需要等待一定的时间才会响应，在这个等待过程中，程序可以做很多事情，等到得到响应后再切回来继续处理，这样可以充分利用CPU和其他资源</strong>，这就是协程的优势</p><h4 id="协程的用法"><a href="#协程的用法" class="headerlink" title="协程的用法"></a>协程的用法</h4><p>从Python3.4开始，Python中加入了协程的概念，但这个版本的协程还是以生成器对象为基础，Python3.5中增加了async、await，使得协程的实现更为方便，Python中使用协程最常用的库莫过于asyncio，下面我们来看看如何使用:</p><p>首先我们需要了解下面几个概念:</p><ul><li>event_loop: 事件循环，我们可以把一些函数注册到这个事件循环上</li><li>coroutine: 翻译过来是协程，在Python中常代指协程对象类型，我们可以<strong>将协程对象注册到事件循环中，它会被事件循环调用</strong>；我们可以<strong>使用async关键字来定义一个方法，这个方法在调用时不会立即执行，而是会返回一个协程对象</strong></li><li>task: 任务，这是<strong>对协程对象的进一步封装</strong>，包含协程对象的各个状态</li><li>future: 代表<strong>将来执行或没有执行的任务的结果</strong>，实际上和task没有本质区别</li></ul><p>另外，我们还需要知道，async是定义一个协程，await是用来挂起阻塞方法的执行，要使用这两个关键字要使用Python3.5以上</p><h4 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h4><p>我们来看一个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Number:&#x27;</span>, x)</span><br><span class="line"></span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Coroutine:&#x27;</span>, coroutine)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After calling execute&#x27;</span>)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(coroutine)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After calling loop&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Coroutine</span>: &lt;coroutine <span class="built_in">object</span> execute at <span class="number">0x0000000002D6E448</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure><p>首先，我们引入了asyncio包，这样才可以使用async和await关键字，然后使用async定义了一个execute方法，该方法接受一个数字参数x，执行之后会打印这个数字，随后我们直接调用了execute方法，然而这个方法并没有执行，而是返回了一个coroutine协程对象；之后我们使用get_event_loop方法创建了一个时间循环loop，并调用loop对象的run_until_complete方法将协程对象coroutine注册到了时间循环中，接着就会启动。最后我们才看到execute方法打印出了接受的数字</p><p>前面我们提到了<strong>task，它是对协程对象的进一步封装，比协程对象多了运行状态，例如running，finished等，我们可以利用这些状态获取协程的执行情况</strong></p><p>在上面的例子中，当把协程对象coroutine传递给run_until_complete方法的时候，实际上它进行了一个操作，就是将coroutine封装成task对象；对此，我们也可显式地进行声明，代码如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Number:&#x27;</span>, x)</span><br><span class="line"></span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Coroutine:&#x27;</span>, coroutine)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After calling execute&#x27;</span>)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(coroutine)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After calling loop&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Coroutine</span>: &lt;coroutine <span class="built_in">object</span> execute at <span class="number">0x0000000002D6E4C8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/Python_LHJ/test/Learn_asyncio/first_aio_demo.py:<span class="number">15</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task: &lt;Task finished coro=&lt;execute() done, defined at D:/Python_LHJ/test/Learn_asyncio/first_aio_demo.py:<span class="number">15</span>&gt; result=<span class="literal">None</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure><p>这里我们定义了loop对象之后，紧接着调用了它的create_task方法，将协程对象转化为task对象，随后打印发现它处于pending状态，随后把它放在run_until_complete方法中去执行，并再次打印task对象，发现它的状态变成了finished</p><p>定义task对象还有另外一种方式，就是直接调用asyncio包的ensure_future方法，返回结果也是task对象，这样的话我们就可以不借助loop对象，即使还没有声明loop，也可以提前定义好task对象，这种方式的写法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Number:&#x27;</span>, x)</span><br><span class="line"></span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Coroutine:&#x27;</span>, coroutine)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After calling execute&#x27;</span>)</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After calling loop&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行效果是一样的</p><h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><p>我们也可以为某个task对象绑定一个回调方法，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">status = requests.get(url).status_code</span><br><span class="line"><span class="keyword">return</span> status</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">task</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Status:&#x27;</span>, task.result())</span><br><span class="line"></span><br><span class="line">coroutine = request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">task.add_done_callback(callback)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br></pre></td></tr></table></figure><p>我们希望达到的效果是，当协程对象执行完毕之后，就去执行声明的callback方法，以上方法就为我们实现了</p><p>实际上，即使不使用回调方法，在task运行完毕之后，也可以直接调用result方法获取结果，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">status = requests.get(url).status_code</span><br><span class="line"><span class="keyword">return</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">coroutine = request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task Ruesult:&#x27;</span>, task.result())</span><br></pre></td></tr></table></figure><p>运行结果是一样的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Task: &lt;Task pending coro=&lt;request() running at D:/Python_LHJ/test/Learn_asyncio/bind_callback.py:<span class="number">17</span>&gt;&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/bind_callback.py:<span class="number">17</span>&gt; result=<span class="number">200</span>&gt;</span><br><span class="line">Task Ruesult: <span class="number">200</span></span><br></pre></td></tr></table></figure><h4 id="多任务协程"><a href="#多任务协程" class="headerlink" title="多任务协程"></a>多任务协程</h4><p>在上面的例子中，我们都只进行了一次请求，如果想执行多次请求，我们可以定义一个task列表，然后使用asyncio包中的wait方法执行，如下实例所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">status = requests.get(url).status_code</span><br><span class="line"><span class="keyword">return</span> status</span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Tasks:&#x27;</span>, tasks)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Task Result:&#x27;</span>, task.result())</span><br></pre></td></tr></table></figure><p>可以看到，这五个协程都被顺利执行</p><h4 id="协程实现"><a href="#协程实现" class="headerlink" title="协程实现"></a>协程实现</h4><p>上述案例只是为后面的使用做铺垫，现在我们来看看协程在解决IO密集型任务方面到底有怎样的优势</p><p>在前面的代码中，我们用一个网络请求作为例子，这本身就是一个耗时等待的操作，因为在请求网页之后需要等待页面响应并返回结果；耗时等待操作一般都是IO操作，例如文件读取，网络请求等；协程在处理这种操作时是有很大优势的，当遇到需要等待的情况时，程序可以暂时挂起，转而执行其他操作，避免一直等待下去</p><p>我们先来看几个错误的实现:</p><p>我们还是以之前的案例为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">url = <span class="string">&#x27;https://www.httpbin.org/delay/5&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Waiting for&#x27;</span>, url)</span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;get response from:&#x27;</span>, url, <span class="string">&#x27;response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cost time:&#x27;</span>, end-start)</span><br></pre></td></tr></table></figure><p>这里我们还是创建了10个task，然后将task列表传给wait方法并注册到时间循环中执行</p><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Waiting <span class="keyword">for</span> https://www.httpbin.org/delay/<span class="number">5</span></span><br><span class="line">get response <span class="keyword">from</span>: https://www.httpbin.org/delay/<span class="number">5</span> response: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Cost time: <span class="number">65.49599981307983</span></span><br></pre></td></tr></table></figure><p>我们发现耗时差不读66秒，这好像不是异步啊，其实，要实现异步，先得有挂起操作，当一个任务需要等待IO结果的时候，可以挂起当前任务，转而执行其他任务，而上面的方法都是一本正经地串行执行下来，连个挂起都没有，怎么可能实现异步</p><p>下面我们试试在请求的时候await一下是否有效果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">url = <span class="string">&#x27;https://www.httpbin.org/delay/5&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Waiting for&#x27;</span>, url)</span><br><span class="line">response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;get response from:&#x27;</span>, url, <span class="string">&#x27;response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cost time:&#x27;</span>, end-start)</span><br></pre></td></tr></table></figure><p>运行下发现会报错:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Task exception was never retrieved</span><br><span class="line">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:<span class="number">22</span>&gt; exception=TypeError(<span class="string">&quot;object Response can&#x27;t be used in &#x27;await&#x27; expression&quot;</span>)&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py&quot;</span>, line <span class="number">25</span>, <span class="keyword">in</span> request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: <span class="built_in">object</span> Response can<span class="string">&#x27;t be used in &#x27;</span><span class="keyword">await</span><span class="string">&#x27; expression</span></span><br><span class="line"><span class="string">Task exception was never retrieved</span></span><br><span class="line"><span class="string">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:22&gt; exception=TypeError(&quot;object Response can&#x27;</span>t be used <span class="keyword">in</span> <span class="string">&#x27;await&#x27;</span> expression<span class="string">&quot;)&gt;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;</span>D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py<span class="string">&quot;, line 25, in request</span></span><br><span class="line"><span class="string">    response = await requests.get(url)</span></span><br><span class="line"><span class="string">TypeError: object Response can&#x27;t be used in &#x27;await&#x27; expression</span></span><br><span class="line"><span class="string">Task exception was never retrieved</span></span><br><span class="line"><span class="string">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:22&gt; exception=TypeError(&quot;</span><span class="built_in">object</span> Response can<span class="string">&#x27;t be used in &#x27;</span><span class="keyword">await</span><span class="string">&#x27; expression&quot;)&gt;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py&quot;, line 25, in request</span></span><br><span class="line"><span class="string">    response = await requests.get(url)</span></span><br><span class="line"><span class="string">TypeError: object Response can&#x27;</span>t be used <span class="keyword">in</span> <span class="string">&#x27;await&#x27;</span> expression</span><br><span class="line">Task exception was never retrieved</span><br><span class="line">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:<span class="number">22</span>&gt; exception=TypeError(<span class="string">&quot;object Response can&#x27;t be used in &#x27;await&#x27; expression&quot;</span>)&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py&quot;</span>, line <span class="number">25</span>, <span class="keyword">in</span> request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: <span class="built_in">object</span> Response can<span class="string">&#x27;t be used in &#x27;</span><span class="keyword">await</span><span class="string">&#x27; expression</span></span><br><span class="line"><span class="string">Task exception was never retrieved</span></span><br><span class="line"><span class="string">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:22&gt; exception=TypeError(&quot;object Response can&#x27;</span>t be used <span class="keyword">in</span> <span class="string">&#x27;await&#x27;</span> expression<span class="string">&quot;)&gt;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;</span>D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py<span class="string">&quot;, line 25, in request</span></span><br><span class="line"><span class="string">    response = await requests.get(url)</span></span><br><span class="line"><span class="string">TypeError: object Response can&#x27;t be used in &#x27;await&#x27; expression</span></span><br><span class="line"><span class="string">Task exception was never retrieved</span></span><br><span class="line"><span class="string">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:22&gt; exception=TypeError(&quot;</span><span class="built_in">object</span> Response can<span class="string">&#x27;t be used in &#x27;</span><span class="keyword">await</span><span class="string">&#x27; expression&quot;)&gt;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py&quot;, line 25, in request</span></span><br><span class="line"><span class="string">    response = await requests.get(url)</span></span><br><span class="line"><span class="string">TypeError: object Response can&#x27;</span>t be used <span class="keyword">in</span> <span class="string">&#x27;await&#x27;</span> expression</span><br><span class="line">Task exception was never retrieved</span><br><span class="line">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:<span class="number">22</span>&gt; exception=TypeError(<span class="string">&quot;object Response can&#x27;t be used in &#x27;await&#x27; expression&quot;</span>)&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py&quot;</span>, line <span class="number">25</span>, <span class="keyword">in</span> request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: <span class="built_in">object</span> Response can<span class="string">&#x27;t be used in &#x27;</span><span class="keyword">await</span><span class="string">&#x27; expression</span></span><br><span class="line"><span class="string">Task exception was never retrieved</span></span><br><span class="line"><span class="string">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:22&gt; exception=TypeError(&quot;object Response can&#x27;</span>t be used <span class="keyword">in</span> <span class="string">&#x27;await&#x27;</span> expression<span class="string">&quot;)&gt;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;</span>D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py<span class="string">&quot;, line 25, in request</span></span><br><span class="line"><span class="string">    response = await requests.get(url)</span></span><br><span class="line"><span class="string">TypeError: object Response can&#x27;t be used in &#x27;await&#x27; expression</span></span><br><span class="line"><span class="string">Task exception was never retrieved</span></span><br><span class="line"><span class="string">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:22&gt; exception=TypeError(&quot;</span><span class="built_in">object</span> Response can<span class="string">&#x27;t be used in &#x27;</span><span class="keyword">await</span><span class="string">&#x27; expression&quot;)&gt;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py&quot;, line 25, in request</span></span><br><span class="line"><span class="string">    response = await requests.get(url)</span></span><br><span class="line"><span class="string">TypeError: object Response can&#x27;</span>t be used <span class="keyword">in</span> <span class="string">&#x27;await&#x27;</span> expression</span><br><span class="line">Task exception was never retrieved</span><br><span class="line">future: &lt;Task finished coro=&lt;request() done, defined at D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py:<span class="number">22</span>&gt; exception=TypeError(<span class="string">&quot;object Response can&#x27;t be used in &#x27;await&#x27; expression&quot;</span>)&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/Python_LHJ/test/Learn_asyncio/Learn_aiohttp/first_aiohttp_demo.py&quot;</span>, line <span class="number">25</span>, <span class="keyword">in</span> request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: <span class="built_in">object</span> Response can<span class="string">&#x27;t be used in &#x27;</span><span class="keyword">await</span><span class="string">&#x27; expression</span></span><br></pre></td></tr></table></figure><p>为什么会报错呢，这是因为requests返回的Response对象不能和await一起使用，官方文档说明，await后面的对象必须是如下格式之一:</p><ul><li>一个原生协程对象</li><li>一个由types.coroutine修饰过的生成器，这个生成器可以返回协程对象</li><li>由一个包含<code>__await__</code>方法的对象返回的一个迭代器</li></ul><p>既然await后面可以跟一个协程对象，那么async把请求的方法改成协程对象不就行了，于是代码就被改成了如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">res = requests.get(url)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">url = <span class="string">&#x27;https://www.httpbin.org/delay/5&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Waiting for&#x27;</span>, url)</span><br><span class="line">response = <span class="keyword">await</span> get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;get response from:&#x27;</span>, url, <span class="string">&#x27;response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cost time:&#x27;</span>, end-start)</span><br></pre></td></tr></table></figure><p>以上代码把请求的页面独立出来了，并用async修饰，就得到了一个协程对象，运行发现还是60多秒，这是为啥呢</p><p>这告诉我们仅仅将涉及IO操作的代码封装到async修饰的方法里是不可行的，只有使用支持异步操作的请求方式才可以实现真正的异步，这里就要使用aiohttp了</p><h4 id="使用aiohttp"><a href="#使用aiohttp" class="headerlink" title="使用aiohttp"></a>使用aiohttp</h4><p>aiohttp是一个支持异步请求的库，它和asyncio配合使用，可以非常方便地实现异步请求</p><p>安装aiohttp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiohttp</span><br></pre></td></tr></table></figure><p>下面我们将aiohttp投入使用，将代码改写成如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">session = aiohttp.ClientSession()</span><br><span class="line">response = <span class="keyword">await</span> session.get(url)</span><br><span class="line"><span class="keyword">await</span> response.text()</span><br><span class="line"><span class="keyword">await</span> session.close()</span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">url = <span class="string">&#x27;https://www.httpbin.org/delay/5&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Waiting for&#x27;</span>, url)</span><br><span class="line">response = <span class="keyword">await</span> get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;get response from:&#x27;</span>, url, <span class="string">&#x27;response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cost time:&#x27;</span>, end-start)</span><br></pre></td></tr></table></figure><p>这里我们就成功了，可见异步爬虫的速度是十分可观的</p><h3 id="aiohttp的使用"><a href="#aiohttp的使用" class="headerlink" title="aiohttp的使用"></a>aiohttp的使用</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>前面介绍的asyncio模块，其内部实现了对TCP，UDP，SSL协议的异步操作，但是对于HTTP请求来说，就需要用aiohttp来实现了</p><p> aiohttp是一个基于asyncio的异步HTTP网络模块，它既提供了服务端，又提供了客户端，其中，我们可以使用服务端搭建一个支持异步处理的服务器，用来处理请求并提供响应的，类似于Django、flask、Tornado等一些Web服务器；而客户端可以用来发起请求，类似于requests发起一个HTTP请求然后获得响应，但是request发起的是一个同步的网络请求，aiohttp则是异步的</p><h4 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span>(<span class="params">session, url</span>):</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> response.text(), response.status</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">html, status = <span class="keyword">await</span> fetch(session, <span class="string">&#x27;https://cuiqingcai.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="built_in">print</span>(status)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(main())</span><br><span class="line">loop.run_until_complete(task)</span><br></pre></td></tr></table></figure><p>能够发现，aiohttp的请求方法的定义和之前有明显区别，主要包括如下几点:</p><ul><li>首先在导入库的时候，除了必须导入aiohttp这个库，还必须导入asyncio这个库，因为要实现异步爬取，需要启动协程，而协程需要借助于asyncio里面的事件循环才能执行</li><li>异步爬取方法的定义和之前有所不同吗，在每个异步方法的前面都要统一加async来修饰</li><li>with as语句前面同样需要加async来修饰，在Python中，with as语句用于声明一个上下文管理器，<strong>能够帮助我们自动分配和释放资源</strong>， 而在异步方法中，with as前面加上async代表声明一个支持异步的上下文管理器</li><li>对于一些返回协程对象的操作，前面需要加上await，如果是协程对象或者前面提到的三种中的一种那就要加上，如果只是返回数字那就不需要，比如返回状态码</li></ul><h4 id="URL参数设置"><a href="#URL参数设置" class="headerlink" title="URL参数设置"></a>URL参数设置</h4><p>对于URL参数的设置，我们可以借助params参数，传入一个字典即可，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">params = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;https://www.httpbin.org/get&#x27;</span>, params=params) <span class="keyword">as</span> response:</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">await</span> response.text())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="其他请求类型"><a href="#其他请求类型" class="headerlink" title="其他请求类型"></a>其他请求类型</h4><p>aiohttp还支持其他请求类型，比如POST、PUT、DELETE等，这些和requests的使用方法相似，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session.post(<span class="string">&#x27;http://www.httpbin.org/post&#x27;</span>, data=<span class="string">b&#x27;data&#x27;</span>)</span><br><span class="line">session.put(<span class="string">&#x27;http://www.httpbin.org/post&#x27;</span>, data=<span class="string">b&#x27;data&#x27;</span>)</span><br><span class="line">session.delete(<span class="string">&#x27;http://www.httpbin.org/delete&#x27;</span>)</span><br><span class="line">session.head(<span class="string">&#x27;http://www.httpbin.org/get&#x27;</span>)</span><br><span class="line">session.options(<span class="string">&#x27;http://www.httpbin.org/get&#x27;</span>)</span><br><span class="line">session.patch(<span class="string">&#x27;http://www.httpbin.org/patch&#x27;</span>, data=<span class="string">b&#x27;data&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>对于POST请求，其对应的请求头中的Content-Type为application/x-www-form-urlencoded我们可以用如下方式来提交:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.post(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, data=data) <span class="keyword">as</span> response:</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">await</span> response.text())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;25&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;18&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python/3.7 aiohttp/3.8.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6203958d-60f5aa1f65cba41349a09e45&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;113.66.217.106&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于POST JSON数据提交，其对应的请求头中的Content-Type为application/json，我们只需要将post方法中的data参数改成json即可，实例代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.post(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, json=data) <span class="keyword">as</span> response:</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">await</span> response.text())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>对于响应来说，我们可以用如下方法分别获取其中的状态码、响应头、响应体、响应体二进制内容、响应体JSON结果，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.post(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, json=data) <span class="keyword">as</span> response:</span><br><span class="line"><span class="built_in">print</span>(response.status)</span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">await</span> response.text())</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">await</span> response.read())</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">await</span> response.json())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h4><p>我们可以借助ClientTimeout对象设置超时，比如设置1秒的超时时间，可以这么实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">timeout = aiohttp.ClientTimeout(total=<span class="number">1</span>)</span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(timeout=timeout) <span class="keyword">as</span> session:</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.post(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, json=data) <span class="keyword">as</span> response:</span><br><span class="line"><span class="built_in">print</span>(response.status)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>如果超时，则会抛出TimeoutError，其类型为asynico.TimeoutError，我们进行异常捕获即可，另外，ClientTimeout对象还有其他参数，比如connect、socket_connect等，详细可见官网</p><h4 id="并发限制"><a href="#并发限制" class="headerlink" title="并发限制"></a>并发限制</h4><p>由于aiohttp可以支持很高的并发量，可能高达上百万，面对如此高的并发量，目标网站可能会处理不过来而有挂掉的危险，这就警示我们需要控制一下爬取的并发量</p><p>一般情况下，可以借助asyncio的Semaphore来控制并发量，实例代码如下:</p><p>代码见: <a class="link"   href="https://github.com/Python3WebSpider/AsyncTest" >https://github.com/Python3WebSpider/AsyncTest<i class="fas fa-external-link-alt"></i></a></p><h3 id="aiohttp异步爬取实战"><a href="#aiohttp异步爬取实战" class="headerlink" title="aiohttp异步爬取实战"></a>aiohttp异步爬取实战</h3><h4 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h4><p>点击<a class="link"   href="https://spa5.scrape.center/" >跳转<i class="fas fa-external-link-alt"></i></a>到目标网站，这是个图书网站，我们要使用aiohttp把该网站上的所有数据爬取下来，将数据用异步的方式保存到MongoDB中</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>安装好了Python(最好为3.7或者以上)</li><li>了解了Ajax爬取的一些基本原理和模拟方法</li><li>了解了异步爬虫的基本原理和asyncio基本库的使用</li><li>了解了aiohttp基本库的使用</li><li>安装并成功运行了MongoDB数据库，而且安装了异步爬虫库motor</li></ul><p>要实现MongoDB异步存储，离不开异步实现的MongoDB存储库motor，其安装命令如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install motor</span><br></pre></td></tr></table></figure><p>由于这里有新的库motor，这里我就跟着书上的内容走一遍:</p><h4 id="页面分析"><a href="#页面分析" class="headerlink" title="页面分析"></a>页面分析</h4><ul><li><p>列表页的Ajax请求接口格式为<code>https://spa5.scrape.center/api/book/?limit=18&amp;offset=&#123;offset&#125;</code>，其中<code>limit</code>的值为每一页包含多少本书，offset的值为每一页的偏移量，计算公式为<code>limit * (page - 1)</code></p></li><li><p>我们随便点开一本图书，然后对比刚刚列表页请求接口返回的数据，我们会发现每本书的id字段就是图书本身的id:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-10_18-09-14.2ygmnawmlpa0.webp"                      alt="Snipaste_2022-02-10_18-09-14"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-10_18-09-35.3ouphwysn3y0.webp"                      alt="Snipaste_2022-02-10_18-09-35"                ></p><p>这样我们就可以用来进一步请求详情页</p></li></ul><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ul><li>第一阶段是异步爬取所有列表页，将所有列表页的爬取任务集合在一起，并将其声明为由task组成的列表，进行异步爬取</li><li>第二阶段则是拿到上一步列表页的所有内容并解析，将所有图书的id信息组合为所有详情页的爬取任务列表，并将其声明为task组成的列表，进行异步爬取，同时爬取结果也以异步方式存储到MongoDB中</li></ul><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>首先我们先配置一些基本的变量并引入一些必须的库，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">INDEX_URL = <span class="string">&#x27;https://spa5.scrape.center/api/book/?limit=18&amp;offset=&#123;offset&#125;&#x27;</span></span><br><span class="line">DETAIL_URL = <span class="string">&#x27;https://spa5.scrape.center/api/book/&#123;id&#125;&#x27;</span></span><br><span class="line">PAGE_SIZE = <span class="number">18</span></span><br><span class="line">PAGE_NUMBER = <span class="number">100</span></span><br><span class="line">CONCURRENCY = <span class="number">5</span></span><br></pre></td></tr></table></figure><p>这里我们导入了基本的库，然后定义了loggin的基本配置，接着定义了爬取的页数，并发量，每一页的书本数，列表页的URL以及详情页的URL</p><h4 id="直接看代码叭"><a href="#直接看代码叭" class="headerlink" title="直接看代码叭"></a>直接看代码叭</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">@File        : get_all_books</span></span><br><span class="line"><span class="string">@Project     : test</span></span><br><span class="line"><span class="string">@Time        : 2022/2/11 9:28</span></span><br><span class="line"><span class="string">@Author      : LiHouJian</span></span><br><span class="line"><span class="string">@Software    : PyCharm</span></span><br><span class="line"><span class="string">@issue       : </span></span><br><span class="line"><span class="string">@change      : </span></span><br><span class="line"><span class="string">@reason      : </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s: %(message)s&#x27;</span>)  <span class="comment"># loggin的基本配置</span></span><br><span class="line"></span><br><span class="line">INDEX_URL = <span class="string">&#x27;https://spa5.scrape.center/api/book/?limit=18&amp;offset=&#123;offset&#125;&#x27;</span>  <span class="comment"># 列表页的baseURL</span></span><br><span class="line">DETAIL_URL = <span class="string">&#x27;https://spa5.scrape.center/api/book/&#123;id&#125;&#x27;</span>  <span class="comment"># 详情页的baseURL</span></span><br><span class="line">PAGE_SIZE = <span class="number">18</span></span><br><span class="line">PAGE_NUMBER = <span class="number">100</span></span><br><span class="line">CONCURRENCY = <span class="number">5</span>  <span class="comment"># 并发量</span></span><br><span class="line"></span><br><span class="line">session = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">MONGO_CONNECTION_STRING = <span class="string">&#x27;mongodb://localhost:27017&#x27;</span></span><br><span class="line">MONGO_DB_NAME = <span class="string">&#x27;books&#x27;</span></span><br><span class="line">MONGO_COLLECTION_NAME = <span class="string">&#x27;books&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> motor.motor_asyncio <span class="keyword">import</span> AsyncIOMotorClient  <span class="comment"># 异步的插入数据库，需提前安装motor包</span></span><br><span class="line"></span><br><span class="line">client = AsyncIOMotorClient(MONGO_CONNECTION_STRING)</span><br><span class="line">db = client[MONGO_DB_NAME]</span><br><span class="line">collection = db[MONGO_COLLECTION_NAME]</span><br><span class="line"></span><br><span class="line">semaphore = asyncio.Semaphore(CONCURRENCY)  <span class="comment"># 声明信号量，用来控制最大并发数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrape_api</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> semaphore:  <span class="comment"># 引入信号量作为上下文</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            logging.info(<span class="string">&#x27;scraping %s&#x27;</span>, url)</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> response.json()  <span class="comment"># 返回json格式的结果</span></span><br><span class="line">        <span class="keyword">except</span> aiohttp.ClientError:  <span class="comment"># 捕获错误，类型为aiohttp.ClientError</span></span><br><span class="line">            logging.error(<span class="string">&#x27;error occurred while scraping %s&#x27;</span>, url, exc_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrape_index</span>(<span class="params">page</span>):</span>  <span class="comment"># 爬取列表页</span></span><br><span class="line">    url = INDEX_URL.<span class="built_in">format</span>(offset=PAGE_SIZE * (page - <span class="number">1</span>))  <span class="comment"># 构造列表页URL</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> scrape_api(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrape_detail</span>(<span class="params"><span class="built_in">id</span></span>):</span>  <span class="comment"># 爬取详情页并保存数据</span></span><br><span class="line">    url = DETAIL_URL.<span class="built_in">format</span>(<span class="built_in">id</span>=<span class="built_in">id</span>)  <span class="comment"># 构造真实详情页</span></span><br><span class="line">    data = <span class="keyword">await</span> scrape_api(url)</span><br><span class="line">    <span class="keyword">await</span> save_data(data)  <span class="comment"># 保存数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    logging.info(<span class="string">&#x27;saving data %s&#x27;</span>, data)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> collection.update_one(&#123;  <span class="comment"># 这里使用update_one方法，其第二个参数都要使用类似&#x27;$set&#x27;: data的格式</span></span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: data.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="string">&#x27;$set&#x27;</span>: data</span><br><span class="line">        &#125;, upsert=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># index tasks</span></span><br><span class="line">    <span class="keyword">global</span> session  <span class="comment"># 声明session为全局变量，这样的话就不用在各个方法中都传递session了</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    scrape_index_tasks = [asyncio.ensure_future(scrape_index(page)) <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, PAGE_NUMBER + <span class="number">1</span>)]</span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*scrape_index_tasks)  <span class="comment"># 执行asyncio.gather(*tasks)即可爬取列表页</span></span><br><span class="line">    <span class="comment"># detail tasks</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;results&#x27;</span>, results)</span><br><span class="line">    ids = []</span><br><span class="line">    <span class="keyword">for</span> index_data <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> index_data: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> index_data.get(<span class="string">&#x27;results&#x27;</span>):</span><br><span class="line">            ids.append(item.get(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">    scrape_detail_tasks = [asyncio.ensure_future(scrape_detail(<span class="built_in">id</span>)) <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> ids]  <span class="comment"># 所有爬取详情页的task组成的列表</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(scrape_detail_tasks)  <span class="comment"># 执行asynico.wait(tasks)即可爬取详情页，这里使用asyncio.gather()效果是一样的，只不过返回的结果略有差异</span></span><br><span class="line">    <span class="keyword">await</span> session.close()  <span class="comment"># 调用session.close()关闭session</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()  <span class="comment"># 使用事件循环启动main()对应的协程，main()是最外层的协程，需要放在事件循环中去执行</span></span><br><span class="line">    loop.run_until_complete(main())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;协程的基本原理&quot;&gt;&lt;a href=&quot;#协程的基本原理&quot; class=&quot;headerlink&quot; title=&quot;协程的基本原理&quot;&gt;&lt;/a&gt;协程的基本原理&lt;/h3&gt;&lt;p&gt;要实现异步机制的爬虫，那自然和协程脱不了关系，下面我们就来了解下使用协程实现加速的方法，这种方法&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第5章-Ajax数据爬取</title>
    <link href="http://example.com/2022/02/08/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC5%E7%AB%A0-Ajax%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
    <id>http://example.com/2022/02/08/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC5%E7%AB%A0-Ajax%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</id>
    <published>2022-02-08T09:10:30.000Z</published>
    <updated>2022-02-11T02:08:46.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h3><p>以下来自百度百科:</p><p>Ajax即<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML（异步JavaScript和<a class="link"   href="https://baike.baidu.com/item/XML/86251" >XML<i class="fas fa-external-link-alt"></i></a>）在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: <a class="link"   href="https://baike.baidu.com/item/HTML/97049" >HTML<i class="fas fa-external-link-alt"></i></a> 或 <a class="link"   href="https://baike.baidu.com/item/XHTML/316621" >XHTML<i class="fas fa-external-link-alt"></i></a>, CSS, <a class="link"   href="https://baike.baidu.com/item/JavaScript/321142" >JavaScript<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://baike.baidu.com/item/DOM/50288" >DOM<i class="fas fa-external-link-alt"></i></a>, XML, <a class="link"   href="https://baike.baidu.com/item/XSLT/1330564" >XSLT<i class="fas fa-external-link-alt"></i></a>, 以及最重要的<a class="link"   href="https://baike.baidu.com/item/XMLHttpRequest/6788735" >XMLHttpRequest<i class="fas fa-external-link-alt"></i></a>。 [3] 使用Ajax技术网页应用能够快速地将增量更新呈现在<a class="link"   href="https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/6582461" >用户界面<i class="fas fa-external-link-alt"></i></a>上，而不需要重载（刷新）整个页面，这使得程序能够更快地回应用户的操作</p><p>可以到豆瓣上体验几个实例: <a class="link"   href="https://movie.douban.com/typerank?type_name=%E5%89%A7%E6%83%85&amp;type=11&amp;interval_id=100:90&amp;action=" >https://movie.douban.com/typerank?type_name=%E5%89%A7%E6%83%85&amp;type=11&amp;interval_id=100:90&amp;action=<i class="fas fa-external-link-alt"></i></a></p><h4 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h4><p>我们在浏览网页的时候，一直下滑，在数据没有展现完毕之前会一直在网页不刷新的情况下呈现数据，这个过程就是Ajax加载的过程</p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>从发送Ajax请求到网页更新的这个过程可以简单分为以下三步:</p><ul><li><p>发送请求</p><p>我们知道Javascript可以实现页面的各种交互功能，Ajax也不例外，因为它就是由JavaScript实现的，最底层的实现代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// code for IE6、IE5</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;myDiv&#x27;</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/ajax/&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.send()</span><br></pre></td></tr></table></figure><p>以上代码可以拆分为以下几步:</p><ul><li>新建一个XMLHttpRequest对象xmlhttp</li><li>调用onreadystatechange属性设置监听</li><li>最后调用open和send方法向某个链接(也就是服务器)发送请求</li></ul><p>前面用Python实现请求发送，由于这里是Ajax，所以实际上这里的请求发送会由JavaScript完成，由于设置了监听，当服务器返回响应时，onreadystatechange对应的方法便会被触发，然后就会在浏览器显示内容，后面的数据解析就交给Python了</p></li></ul><h4 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h4><p>返回内容可能是HTML或者JSON，接下来只需要在方法中用JavaScript进一步处理即可，如果是JSON的话，可以进行解析和优化</p><h4 id="渲染网页"><a href="#渲染网页" class="headerlink" title="渲染网页"></a>渲染网页</h4><p>JavaScript有改变网页内容的能力，在解析完响应内容之后，就可以调用JavaScript来进行下一步处理了，例如，通过document.getElementById().innerHTML操作可以修改源代码，这种操作也称为dom操作，即对网页文档进行操作</p><p>再回想下豆瓣的下拉刷新，其实就是JavaScript向服务器发送了一个Ajax请求得到的，然后获取新的微博数据，对其做解析，并渲染在网页中</p><p>因此我们知道，真实的网页数据其实就是一次次向服务器发送Ajax请求得到的，要想抓取这些数据，需要知道Ajax请求到底是怎么发送的、发往哪里，发了哪些参数，我们知道这些以后，就可以用Python模拟发送操作</p><h3 id="Ajax分析方法"><a href="#Ajax分析方法" class="headerlink" title="Ajax分析方法"></a>Ajax分析方法</h3><p>这里略过</p><h3 id="Ajax分析与实战"><a href="#Ajax分析与实战" class="headerlink" title="Ajax分析与实战"></a>Ajax分析与实战</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>安装好Python3(最低为3.6版本)</li><li>了解Python HTTP请求库requests的基本用法</li><li>了解Ajax基础知识和分析Ajax的基本方法</li></ul><h4 id="爬取目标"><a href="#爬取目标" class="headerlink" title="爬取目标"></a>爬取目标</h4><p><a class="link"   href="https://spa1.scrape.center/" >点击跳转<i class="fas fa-external-link-alt"></i></a></p><p>我们需要完成的目标如下:</p><ul><li>分析页面数据的加载逻辑</li><li>用request实现Ajax数据的爬取</li><li>将每部电影的数据分别保存到MongoDB数据库</li></ul><p>我们直接上代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_single_page_data</span>(<span class="params">u</span>):</span></span><br><span class="line">    response = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">r</span>):</span></span><br><span class="line">    movies_data_list = json.loads(r)[<span class="string">&#x27;results&#x27;</span>]</span><br><span class="line">    movie_id_page_max = movies_data_list[-<span class="number">1</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    drama_list = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(movie_id_page_max - <span class="number">9</span>, movie_id_page_max + <span class="number">1</span>):</span><br><span class="line">        movie_drama_url = <span class="string">f&#x27;https://spa1.scrape.center/detail/<span class="subst">&#123;d&#125;</span>&#x27;</span></span><br><span class="line">        res = get_single_page_data(movie_drama_url)</span><br><span class="line">        drama = json.loads(res)[<span class="string">&#x27;drama&#x27;</span>]</span><br><span class="line">        drama_list.append(drama)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(movies_data_list):</span><br><span class="line">        value[<span class="string">&#x27;categories&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join(i[<span class="string">&#x27;categories&#x27;</span>])</span><br><span class="line">        value[<span class="string">&#x27;regions&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join(i[<span class="string">&#x27;regions&#x27;</span>])</span><br><span class="line">        value[<span class="string">&#x27;drama&#x27;</span>] = drama_list[key]</span><br><span class="line"></span><br><span class="line">    myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">    mydb = myclient[<span class="string">&quot;scrape&quot;</span>]</span><br><span class="line">    mycol = mydb[<span class="string">&#x27;movie_data&#x27;</span>]</span><br><span class="line">    result = mycol.insert_many(movies_data_list)</span><br><span class="line">    <span class="built_in">print</span>(result.inserted_ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        url = <span class="string">f&quot;https://spa1.scrape.center/api/movie/?limit=10&amp;offset=<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">        res = get_single_page_data(url)</span><br><span class="line">        save(res)</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-08_18-48-48.1ohxw6lnjclc.webp"                      alt="Snipaste_2022-02-08_18-48-48"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是Ajax&quot;&gt;&lt;a href=&quot;#什么是Ajax&quot; class=&quot;headerlink&quot; title=&quot;什么是Ajax&quot;&gt;&lt;/a&gt;什么是Ajax&lt;/h3&gt;&lt;p&gt;以下来自百度百科:&lt;/p&gt;
&lt;p&gt;Ajax即&lt;strong&gt;A&lt;/strong&gt;synchronou</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第4章-数据的存储</title>
    <link href="http://example.com/2022/02/08/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC4%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2022/02/08/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC4%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/</id>
    <published>2022-02-08T01:27:30.000Z</published>
    <updated>2022-02-11T02:08:22.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TXT文本文件存储"><a href="#TXT文本文件存储" class="headerlink" title="TXT文本文件存储"></a>TXT文本文件存储</h3><p>以txt格式存储</p><p>r: 以只读打开</p><p>rb: 以二进制只读方式打开</p><p>r+: 以读写方式打开</p><p>rb+: 以二进制读写方式打开</p><p>w: 以写入方式打开</p><p>wb: 以二进制写入方式打开</p><p>w+: 以读写方式打开</p><p>wb+: 以二进制读写方式打开</p><p>a: 以追加方式打开一个文件</p><p>ab: 以二进制追加方式打开一个文件</p><p>ab+: 以二进制追加方式打开一个文件，如果该文件不存在就新建一个文件用于读写</p><h3 id="JSON文件存储"><a href="#JSON文件存储" class="headerlink" title="JSON文件存储"></a>JSON文件存储</h3><p>在js中，一切皆对象，对象在js中是指用花括号{}包围起来的内容，数据结构是{key1: value1, key2: value2}这种键值对结构，key表示对象的属性，value表示属性的值，前者可以使用整数和字符串，后者可以是任意类型</p><p>关于Python的json文件存储以及提取可以参考<a class="link"   href="https://www.cnblogs.com/guguobao/p/9512696.html" >这里<i class="fas fa-external-link-alt"></i></a></p><h3 id="CSV文件存储"><a href="#CSV文件存储" class="headerlink" title="CSV文件存储"></a>CSV文件存储</h3><p>详情请见: <a class="link"   href="https://www.cnblogs.com/gdjlc/p/11406599.html" >https://www.cnblogs.com/gdjlc/p/11406599.html<i class="fas fa-external-link-alt"></i></a></p><p>还可以参照书本</p><h3 id="MySQL数据存储"><a href="#MySQL数据存储" class="headerlink" title="MySQL数据存储"></a>MySQL数据存储</h3><p>详情请见: <a class="link"   href="https://www.cnblogs.com/hanfanfan/p/10398244.html" >https://www.cnblogs.com/hanfanfan/p/10398244.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="MongoDB数据存储"><a href="#MongoDB数据存储" class="headerlink" title="MongoDB数据存储"></a>MongoDB数据存储</h3><p>NoSQL，全称为Not Only SQL，意为不仅仅是SQL，泛指菲关系型数据库，NoSQL是基于键值对的，而且不需要经过SQL层的解析，数据之间没有耦合性，性能非常高</p><p>非关系型数据库又可细分如下:</p><ul><li>键值存储数据库: 代表有Redis等</li><li>列存储数据库: 代表有Cassandra，HBase和Riak等</li><li>文档型数据库: 代表有CouchDB和MongoDB等</li><li>图形数据库: 代表有Neo4j，InfoGrid等</li></ul><p>我们爬虫使用非关系型数据库是比较方便的，我们来看看MongoDB:</p><h4 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install MongoDB</span><br></pre></td></tr></table></figure><h4 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h4><p>连接MongoDB，需要使用PyMongo库里面的MongoClient方法，一般而言，传入MongoDB的IP以及端口即可，MongoClient方法的第一个参数为地址host，第二个参数为端口port(如果不传入此参数默认为27017)</p><p>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">27017</span>)</span><br></pre></td></tr></table></figure><p>上面的client就是MongoDB的连接对象了</p><p>另外，还可以直接给MongoDB的第一个参数传入MongoDB的连接字符串，它以mongodb开头，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;mongodb://localhost:27017&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"> </span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br></pre></td></tr></table></figure><p>执行以上代码便创建了一个名叫runoobdb的数据库，但是要注意在MongoDB中数据库只有在内容插入后才会创建! 就是说，数据库创建后要创建集合(数据表)并插入一个文档(记录)，数据库才会真正创建</p><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br><span class="line"> </span><br><span class="line">mycol = mydb[<span class="string">&quot;sites&quot;</span>]</span><br></pre></td></tr></table></figure><p>执行以上代码便创建了一个名叫sites的集合，但是要注意在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建</p><h4 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h4><p>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库，当然也可以这样指定:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&#x27;test&#x27;]</span><br></pre></td></tr></table></figure><p>以上两种方式是等价的</p><h4 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h4><p>MongoDB下又包含多个集合，这些结合类似于关系型数据库的表</p><p>示例如下:(这里指定一个集合为students)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = db.students</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = [<span class="string">&#x27;students&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>我们在students这个集合中试着插入一个数据，这个数据以字典形式表示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br><span class="line">mycol = mydb[<span class="string">&#x27;students&#x27;</span>]</span><br><span class="line"></span><br><span class="line">studnet = &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;jkl&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="string">&quot;45&quot;</span>,</span><br><span class="line"><span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rsult = mycol.insert(studnet)  <span class="comment"># insert is deprecated(insert方法被弃用)</span></span><br><span class="line"><span class="built_in">print</span>(rsult)  <span class="comment"># 会返回一个ObjectId类型的_id属性，执行insert方法后会返回_id值</span></span><br></pre></td></tr></table></figure><p>当然我们也可以插入多条数据，用列表形式传递即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br><span class="line">mycol = mydb[<span class="string">&#x27;students&#x27;</span>]</span><br><span class="line"></span><br><span class="line">studnet1 = &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;jkl&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="string">&quot;45&quot;</span>,</span><br><span class="line"><span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">studnet2 = &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;jklg&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="string">&quot;453&quot;</span>,</span><br><span class="line"><span class="string">&quot;gender&quot;</span>: <span class="string">&quot;women&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rsult = mycol.insert([studnet1,studnet2])  <span class="comment"># insert is deprecated(insert方法被弃用)</span></span><br><span class="line"><span class="built_in">print</span>(rsult)  <span class="comment"># 会返回一个ObjectId类型的_id属性，执行insert方法后会返回_id值</span></span><br><span class="line"><span class="comment"># 插入多个将会返回_id的列表</span></span><br></pre></td></tr></table></figure><p>虽然在Python3.x中insert方法已经不被官方所推荐，但还是可以继续使用，官方推荐用insert_one插入一个，用insert_many插入多个:</p><p>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br><span class="line">mycol = mydb[<span class="string">&#x27;students&#x27;</span>]</span><br><span class="line"></span><br><span class="line">studnet1 = &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;jkvl&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="string">&quot;45&quot;</span>,</span><br><span class="line"><span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">result = mycol.insert_one(studnet1)  <span class="comment"># 官方推荐使用insert_one</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 返回这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id</span></span><br><span class="line"><span class="built_in">print</span>(result.inserted_id)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br><span class="line">mycol = mydb[<span class="string">&#x27;students&#x27;</span>]</span><br><span class="line"></span><br><span class="line">studnet1 = &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;jokvl&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="string">&quot;45&quot;</span>,</span><br><span class="line"><span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">studnet2 = &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;jlkvl&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="string">&quot;445&quot;</span>,</span><br><span class="line"><span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = mycol.insert_many([studnet1, studnet2])  <span class="comment"># 官方推荐使用insert_many</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 返回这次返回的是InsertOneResult对象，我们可以调用其inserted_ids属性获取_id</span></span><br><span class="line"><span class="built_in">print</span>(result.inserted_ids)</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>我们可以使用find_one或find方法进行查询，前者查询得到的是单个结果，后者则会返回一个生成器对象</p><p>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br><span class="line">mycol = mydb[<span class="string">&#x27;students&#x27;</span>]</span><br><span class="line">result = mycol.find_one(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jokvl&#x27;</span>&#125;)  <span class="comment"># 字典类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>我们还可以根据ObjectId来查询数据，需要用到bson库里的objectid:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">mydb = myclient[<span class="string">&quot;runoobdb&quot;</span>]</span><br><span class="line">mycol = mydb[<span class="string">&#x27;students&#x27;</span>]</span><br><span class="line">result = mycol.find_one(&#123;<span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;6201e6be4652abcba2496717&#x27;</span>)&#125;)  <span class="comment"># 字典类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>如果查询结果不存在，就会返回None</p><p>查询多条数据，可以使用find方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find(<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">   <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>如果要查询age大于20的数据，写法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">20</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>比较符号如下:</p><table><thead><tr><th>符号</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>$lt</td><td>小于</td><td>{‘age’: {‘$lt’: 20}}</td></tr><tr><td>$gt</td><td>大于</td><td>{‘age’: {‘$gt’: 20}}</td></tr><tr><td>$lte</td><td>小于等于</td><td>{‘age’: {‘$lte’: 20}}</td></tr><tr><td>$gte</td><td>大于等于</td><td>{‘age’: {‘$gte’: 20}}</td></tr><tr><td>$ne</td><td>不等于</td><td>{‘age’: {‘$ne’: 20}}</td></tr><tr><td>$in</td><td>在范围内</td><td>{‘age’: {‘$in’: [20, 30]}}</td></tr><tr><td>$nin</td><td>不在范围内</td><td>{‘age’: {‘$nin’: [20, 30]}}</td></tr></tbody></table><p>另外还可以使用正则表达式进行匹配，比如下面查询name以M为开头的学生数量:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find(&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^M.*&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h4><p>使用count方法来计数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count = collection.find().count()</span><br></pre></td></tr></table></figure><p>统计符合条件的个数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;).count()</span><br></pre></td></tr></table></figure><p>运行结果都是一个数值</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>使用sort方法，并传入排序的字段及升降序标准即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING)</span><br><span class="line"><span class="built_in">print</span>([result[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure><p>以上代码中的ASCENDING表示升序排序，降序排序可传入pymongo.DESCENDING</p><h4 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h4><p>在某些情况下，我们可能只想取某几个元素，这时候我们可以利用skip方法偏移几个位置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>([result[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure><p>还可以使用limit方法指定要获取的结果个数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>([result[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure><p>注意: 在数据库中数量非常庞大的时候，比如千万、亿级别的，最好不要使用大偏移量来查询数据，因为这样很可能导致内存溢出，这个时候可以采用以ObjectId的方法来查询</p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>对于数据更新，我们可以使用update方法，在其中指定更新的条件和更新后的数据即可，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">condition = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Kevin&#x27;</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">&#x27;age&#x27;</span>] = <span class="number">25</span></span><br><span class="line">result = collection.update(condition, student)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>执行以上语句会返回成功或者失败和影响数据的条数(nMdified)</p><p>对比以上代码，我们还可以使用$set操作符实现数据更新，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = collection.update(condition, &#123;<span class="string">&#x27;$set&#x27;</span>: student&#125;)</span><br></pre></td></tr></table></figure><p>这样可以只更新student字典内存在的字段，如果原先还有其他字段，是不会动的，不会被更新，也不会删除；而如果用update，就会把之前的数据全部用student字典替换，要是存在其他字段，会被删除</p><p>官方推荐使用update_one和update_many方法来处理单条和多条数据更新过程，它们的用法更为严格，第二个参数都需要使用$类型操作符作为字典的键名，实例代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">condition = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Kevin&#x27;</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">&#x27;age&#x27;</span>] = <span class="number">26</span></span><br><span class="line">result = collection.update_one(condition, &#123;<span class="string">&#x27;$set&#x27;</span>: student&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># UpdateResult类型</span></span><br><span class="line"><span class="built_in">print</span>(result.matched_count, result.modified_count)  <span class="comment"># 匹配的数据条目和影响的数据条目</span></span><br></pre></td></tr></table></figure><p>我们在来看一个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">condition = &#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">result = collection.update_one(condition, &#123;<span class="string">&#x27;$inc&#x27;</span>: &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">1</span>&#125;&#125;)  <span class="comment"># 对age+1对第一条符合的做出改变，如果用update_many就会更新所有被选中的</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># UpdateResult类型</span></span><br><span class="line"><span class="built_in">print</span>(result.matched_count, result.modified_count)  <span class="comment"># 匹配的数据条目和影响的数据条目</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除操作比较简单，直接调用remove方法并指定删除条件即可，实例代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.remove(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kevin&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;ok&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>这里依然有两个新方法，delete_one和delete_many，delete_one就是删除第一符合条件的数据，delete_many就是删除所有符合条件的数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = collection.delete_one(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kevin&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.deleted_count)  <span class="comment"># 1</span></span><br><span class="line">result = collection.delete_many(&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$lt&#x27;</span>: <span class="number">25</span>&#125;&#125;)</span><br><span class="line"><span class="built_in">print</span>(result.deleted_count)  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>两个方法返回的结果都是DeletedResult类型，可以调用deleted_coun属性获取删除的数量</p><h4 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h4><p>PyMongo还提供了一些组合方法:</p><p>find_one_and_delete: 查找后删除</p><p>find_one_and_raplace: 查找后替换</p><p>find_one_and_update: 查找后更新</p><h3 id="Redi缓存存储"><a href="#Redi缓存存储" class="headerlink" title="Redi缓存存储"></a>Redi缓存存储</h3><p>Redis是一个基于内存的、高效的键值型非关系型数据库，存取效率极高，而且支持多种数据存储结构，使用起来也非常简单，下面我们来看看:</p><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure><p>以上就是安装了redis-py库，即用来操作Redis的Python包</p><h5 id="Redis和StrictRedis"><a href="#Redis和StrictRedis" class="headerlink" title="Redis和StrictRedis"></a>Redis和StrictRedis</h5><p>StrictRedis类实现了绝大部分官方的Redis命令，参数也一一对应，例如set方法就对应着Redis命令的set方法，而Redis是StrictRedis的子类，其主要功能是向后兼容旧版本库里的几个方法；为了实现兼容，Redis类对方法做了改写，例如将lrem方法中的value和num参数的位置进行了互换，这和Redis命令行参数是不一样的，官方推荐使用StrictRedis！</p><h4 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h4><p>首先我们需要启动redis服务，步骤如下:</p><p>首先申明，我是在一个工作电脑上</p><ul><li><p>打开everything，然后搜索redis，进入到redis的安装目录:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220208/Snipaste_2022-02-08_16-13-31.61m7f9fmij00.webp"                      alt="Snipaste_2022-02-08_16-13-31"                ></p><p>然后在此路径打开cmd，输入以下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe</span><br></pre></td></tr></table></figure><p>以上命令只能启动6379端口，用以下命令可以在7000端口启动redis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  redis-server.exe redis.windows7000.conf</span><br><span class="line"></span><br><span class="line">​然后就启动了redis</span><br><span class="line"></span><br><span class="line">接下来我们进行连接并测试:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"></span><br><span class="line">redis = StrictRedis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="literal">None</span>)  <span class="comment"># 没有设置password就None吧</span></span><br><span class="line">redis.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(redis.get(<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ul><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure><p>以上代码我们传入了Redis的地址，运行端口，使用的数据库和密码信息，在默认不传数据的情况下这4个参数分别为localhost，6379,0和None</p><p>以上代码同时说明我们已经成功连接redis，当然我们也可使用ConnectionPool来连接Redis，实例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ConnectionPool(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="literal">None</span>)</span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br><span class="line">redis.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;tob&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(redis.get(<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure><p>另外，ConnectionPool还支持通过URL来构建，URL支持的格式有如下3中:</p><p>redis://[:password]@host:port/db</p><p>rediss://[:password]@host:port/db</p><p>unix://[password]@/path/to/socket.sock?db=db</p><p>这三种url分别表示创建Redis TCP连接、Redis TCP+SSL连接、Redis UNIX socket连接，我们只需要构造其中一种即可，其中password部分如果没有可以省略，下面用URL连接演示下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;redis://foobared@localhost:6379/0&#x27;</span></span><br><span class="line">pool = ConnectionPool.form_url(url)</span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><h4 id="键操作"><a href="#键操作" class="headerlink" title="键操作"></a>键操作</h4><p>点击<a class="link"   href="https://www.runoob.com/redis/redis-keys.html" >这里跳转<i class="fas fa-external-link-alt"></i></a>，可配合书第152页</p><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><p>点击<a class="link"   href="https://www.runoob.com/redis/redis-strings.html" >这里跳转<i class="fas fa-external-link-alt"></i></a>，可配合书第153页</p><h4 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h4><p>点击<a class="link"   href="https://www.runoob.com/redis/redis-lists.html" >这里操作<i class="fas fa-external-link-alt"></i></a>，可配合书第154页</p><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><p>点击<a class="link"   href="https://www.runoob.com/redis/redis-sets.html" >这里跳转<i class="fas fa-external-link-alt"></i></a>，可配合书第155页</p><h4 id="有序集合操作"><a href="#有序集合操作" class="headerlink" title="有序集合操作"></a>有序集合操作</h4><p>点击<a class="link"   href="https://www.runoob.com/redis/redis-sorted-sets.html" >这里跳转<i class="fas fa-external-link-alt"></i></a>，可配合书第157页</p><h4 id="散列操作"><a href="#散列操作" class="headerlink" title="散列操作"></a>散列操作</h4><p>点击<a class="link"   href="https://www.runoob.com/redis/redis-hashes.html" >这里跳转<i class="fas fa-external-link-alt"></i></a>，可配合书第158页</p><h3 id="Elasticsearch搜索引擎存储"><a href="#Elasticsearch搜索引擎存储" class="headerlink" title="Elasticsearch搜索引擎存储"></a>Elasticsearch搜索引擎存储</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;TXT文本文件存储&quot;&gt;&lt;a href=&quot;#TXT文本文件存储&quot; class=&quot;headerlink&quot; title=&quot;TXT文本文件存储&quot;&gt;&lt;/a&gt;TXT文本文件存储&lt;/h3&gt;&lt;p&gt;以txt格式存储&lt;/p&gt;
&lt;p&gt;r: 以只读打开&lt;/p&gt;
&lt;p&gt;rb: 以二进制只读</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第2章-基本库的使用</title>
    <link href="http://example.com/2022/02/07/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC2%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/02/07/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC2%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-07T09:18:30.000Z</published>
    <updated>2022-02-13T14:27:53.261Z</updated>
    
    <content type="html"><![CDATA[<p>Python提供了功能齐全的类库来帮助我们实现需求，最基础的有HTTP库有urllib、requests、httpx等</p><h2 id="urllib的使用"><a href="#urllib的使用" class="headerlink" title="urllib的使用"></a>urllib的使用</h2><p>注意: 在Python2中，有urllib和urllib2两个库来实现HTTP请求的发送，而在Python3中，urllib2库已经不存在了，统一为了urllib</p><p>urllib是Python内置的HTTP请求库，也就是说不需要额外安装，可直接使用；urllib库包括如下4个模块:</p><ul><li>request: 这是最基本的HTTP请求模块，可以模拟请求的发送，就像在浏览器中输入网址然后按下了回车一样，只需要给库方法传入URL以及额外的参数，就可以模拟实现发送请求的过程了</li><li>error: 异常处理模块，如果出现请求异常，那么我们可以捕获这些异常，然后进行重试或其他操作以保证程序运行不会意外终止</li><li>parse: 一个工具模块，提供了许多URL的处理方法，例如拆分、解析、合并等</li><li>robotparser: 主要用来识别网站的robots.txt文件，然后判断哪些网站可以爬，哪些网站不可以爬，它其实用的比较少</li></ul><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><h4 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h4><p>urllib.request模块提供了最基本的构造HTTP请求的方法，利用这个模块可以模拟浏览器的请求发起过程，同时它还具有处理授权验证，重定向，浏览器Cookie以及其他一些功能</p><p>下面以Python官网为例体验下这个模块:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果如下图所示:</p><p>我们来看看返回的是个什么类型:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个HTTPResponse类型的对象，主要包含read、readinto、getheader、getheaders、fileno等方法，以及msg、version、status、reason、debuglevel、closed等属性</p><p>我们来看看实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status)</span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br><span class="line"><span class="built_in">print</span>(response.getheader(<span class="string">&#x27;Server&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span></span><br><span class="line">[(<span class="string">&#x27;Connection&#x27;</span>, <span class="string">&#x27;close&#x27;</span>), (<span class="string">&#x27;Content-Length&#x27;</span>, <span class="string">&#x27;49476&#x27;</span>), (<span class="string">&#x27;Server&#x27;</span>, <span class="string">&#x27;nginx&#x27;</span>), (<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>), (<span class="string">&#x27;X-Frame-Options&#x27;</span>, <span class="string">&#x27;DENY&#x27;</span>), (<span class="string">&#x27;Via&#x27;</span>, <span class="string">&#x27;1.1 vegur, 1.1 varnish, 1.1 varnish&#x27;</span>), (<span class="string">&#x27;Accept-Ranges&#x27;</span>, <span class="string">&#x27;bytes&#x27;</span>), (<span class="string">&#x27;Date&#x27;</span>, <span class="string">&#x27;Sun, 06 Feb 2022 14:10:46 GMT&#x27;</span>), (<span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;283&#x27;</span>), (<span class="string">&#x27;X-Served-By&#x27;</span>, <span class="string">&#x27;cache-iad-kcgs7200085-IAD, cache-nrt18330-NRT&#x27;</span>), (<span class="string">&#x27;X-Cache&#x27;</span>, <span class="string">&#x27;HIT, HIT&#x27;</span>), (<span class="string">&#x27;X-Cache-Hits&#x27;</span>, <span class="string">&#x27;3, 353&#x27;</span>), (<span class="string">&#x27;X-Timer&#x27;</span>, <span class="string">&#x27;S1644156646.362936,VS0,VE0&#x27;</span>), (<span class="string">&#x27;Vary&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>), (<span class="string">&#x27;Strict-Transport-Security&#x27;</span>, <span class="string">&#x27;max-age=63072000; includeSubDomains&#x27;</span>)]</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>下面是urlopen方法的API:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=<span class="literal">None</span>, [timeout,]*, cafile=<span class="literal">None</span>, capath=<span class="literal">None</span>, cadefault=<span class="literal">False</span>, context=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>接下来详细说明下urlopen方法中几个参数的用法:</p><ul><li><p>data参数</p><p>data参数为可选，使用该参数需要使用bytes方法将参数转化为字节流编码格式的内容即bytes类型，如果传递了这个参数，那么它的请求方式就不再是GET了，而是POST了</p><p>以下是实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>&#125;), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>上面代码中转码时使用了bytes方法，该方法的第一个参数得是str类型，因此用urllib.parse模块里的urlencode方法将字典参数转化为字符串，第二个参数指定编码格式</p><p>此处我们请求的站点是<a class="link"   href="http://www.httpbin.org,它可以提供http请求测试,上面实例的运行结果如下/" >www.httpbin.org，它可以提供HTTP请求测试，上面实例的运行结果如下<i class="fas fa-external-link-alt"></i></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;germey&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;identity&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;11&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python-urllib/3.7&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-61ffda7a-05a2c9b60ba676290898d9d9&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;182.101.213.95&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>timeout参数</p><p>直接上实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.httpbin.org/get&#x27;</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read())</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">&quot;C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\urllib\request.py&quot;</span>, line <span class="number">1360</span>, <span class="keyword">in</span> https_open</span><br><span class="line">    context=self._context, check_hostname=self._check_hostname)</span><br><span class="line">  File <span class="string">&quot;C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\urllib\request.py&quot;</span>, line <span class="number">1319</span>, <span class="keyword">in</span> do_open</span><br><span class="line">    <span class="keyword">raise</span> URLError(err)</span><br><span class="line">urllib.error.URLError: &lt;urlopen error timed out&gt;</span><br></pre></td></tr></table></figure><p>利用try except语句也可实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">&#x27;https://www.httpbin.org/get&#x27;</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason, socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;time out&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time out</span><br></pre></td></tr></table></figure></li><li><p>其他参数</p><p>除了以上两个参数，urlopen还有context参数，该参数必须是ssl.SSLContext类型，用来指定SSL的设置，此外，cafile和capath这连个参数分别用来指定CA证书和其路径，这两个在请求HTTPS链接时会有用，cadefault参数现在已经弃用了，其默认值为Flase，到这里我们就讲完了urlopen方法的用法</p></li></ul><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><p>urlopen可以发起最基本的请求，但它那几个简单的参数并不足以构建一个完整的请求，如果需要往请求中加入Headers等信息，就需要使用更强大的Request来构建请求了</p><p>来看看最基本的实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>我们来看下可以通过怎样的参数来构造Request类，构造方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.Request(url, data=<span class="literal">None</span>, headers=&#123;&#125;, origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>, method=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li>url为请求的URL，这是必传参数，其他都是可选参数</li><li>data如果要传数据，必须传bytes类型的，如果数据是字典，可以先用urllib.parse模块里的urlencode方法进行编码</li><li>第三个参数是一个字典，这是请求头，可以用headers参数直接构造，也可以调用请求实例的add_heade方法添加</li><li>origin_req_host指的是请求方的host名称或者IP地址</li><li>unverifiable表示请求是否是无法验证的，默认取值是False，意思是用户没有足够的权限来接收这个请求的结果</li><li>method是一个字符串，指示请求使用的方法</li></ul><p>由于urllib使用不是太频繁，详情见书本</p><h2 id="requests的使用"><a href="#requests的使用" class="headerlink" title="requests的使用"></a>requests的使用</h2><p>我们感觉使用urllib不太方便，接下来我们来看看requests库的强大之处叭</p><p>首先我们需要安装requests:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install r</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python提供了功能齐全的类库来帮助我们实现需求，最基础的有HTTP库有urllib、requests、httpx等&lt;/p&gt;
&lt;h2 id=&quot;urllib的使用&quot;&gt;&lt;a href=&quot;#urllib的使用&quot; class=&quot;headerlink&quot; title=&quot;urllib的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python3网络爬虫开发实战第二版第1章-爬虫基础</title>
    <link href="http://example.com/2022/01/28/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC1%E7%AB%A0-%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/01/28/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%AC1%E7%AB%A0-%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-28T07:43:07.000Z</published>
    <updated>2022-02-13T14:27:40.445Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们将了解到HTTP原理、网页的基础知识、爬虫的基本原理、Cookie的基本原理、多进程和多线程的基本原理等，了解这些内容有助于我们更好地理解和编写网络爬虫相关的程序</p><h2 id="HTTP基本原理"><a href="#HTTP基本原理" class="headerlink" title="HTTP基本原理"></a>HTTP基本原理</h2><h3 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h3><p>URL: Uniform Resource Location(统一资源定位符)</p><p>URI: Uniform Resource Identifier(统一资源标识符)</p><p>URL是大家所熟知的，它指向网络服务器上的某个资源，而其实URI有两个子类，一个是上面提到的URL，还有一个叫做URN(Uniform Resource Name)，URN只为资源命名而不指定如何定位资源，也就是说<strong>URI包括了URL和URN</strong>；</p><h3 id="URL的基本组成格式"><a href="#URL的基本组成格式" class="headerlink" title="URL的基本组成格式"></a>URL的基本组成格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme://[username:password@]hostname[:port][path][;parameters][?query][#fragment]</span><br></pre></td></tr></table></figure><p>scheme: 协议，常用的协议有http、https、ftp等，另外，scheme也常被称作protocol，二者都代表协议的意思</p><p>username、password: 用户名和密码，在某些情况下URL需要提供用户名和密码才能访问</p><p>hostname: 主机地址，或IP地址</p><p>port: 端口，这是服务器设定的服务端口，但是有些URL中没有端口信息，这是使用了默认的端口，http协议的默认端口是80，https协议的默认端口是443</p><p>path: 路径，指的是网络资源在服务器中的指定位置</p><p>parameters: 参数，用来指定访问某个资源时的附加信息，这个用的比较少</p><p>query: 查询，用来查询某类资源，如果有多个查询，则用&amp;隔开</p><p>fragment: 片段，它是对资源描述的部分补充，可以理解为资源内部的书签</p><h3 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h3><p>在爬虫中，我们主要接触到的协议通常是基于http或https协议的，因此这里首先了解下这两个协议:</p><p>HTTP的全称是Hypertext Transfer Protocol，中文名为超文本传输协议，其作用是<strong>把超文本数据从网络传输到本地浏览器，能够保证高效而准确地传输超文本文档</strong>，目前被人们广泛使用的是HTTP1.1版本，当然，现在也有不少网站支持HTTP2.0</p><p>HTTPS的全称是<code>Hyper Text Transfer Protocol over SecureSocket Layer</code>，是以安全为目标的HTTP通道，简单讲就是<strong>HTTP的安全版，即在HTTP下加入SSL层</strong>，简称HTTPS</p><p>HTTPS的安全基础是SSL，因此通过该协议传输的内容都是经过SSL加密的，SSL的主要作用有以下两种:</p><ul><li>建立一个信息安全通道，保证数据传输的安全性</li><li>确认网站的真实性，凡是使用了HTTPS协议的网站，都可以通过单击浏览器地址栏的锁头编制来查看网站认证之后的真实信息，此外还可以通过CA机构颁发的安全签章来查询</li></ul><p>HTTP和HTTPS协议都属于计算机网络中的应用层协议，其下层是基于TCP协议实现的，TCP协议属于计算机网络中的传输层协议，包括建立连接时的三次握手和断开时的四次挥手等过程</p><h3 id="HTTP请求过程"><a href="#HTTP请求过程" class="headerlink" title="HTTP请求过程"></a>HTTP请求过程</h3><p>在浏览器地址栏输入一个URL，按下回车之后便可观察到对应的页面内容，实际上，这个过程是浏览器先向网站所在的服务器发送一个请求，网站服务器接收到请求后对其处理和解析，然后返回对应的响应，接着传回浏览器；由于响应里包含页面的源代码等响应内容，所以浏览器再对其进行解析，便将网页呈现出来</p><p>关于浏览器开发者工具的使用<a class="link"   href="http://kest.club/2022/01/19/Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/" >点此跳转<i class="fas fa-external-link-alt"></i></a></p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求，英文为Request，由客户端发往服务器，分为四部分内容: 请求方法(Request Method)、请求的网址(Request URL)，请求头(Request head)、请求体(Request body)</p><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>请求方法，用于标识客户端请求服务端的方式，常见的请求方法，有两种: GET和POST，在浏览器中直接输入URL并回车，便发起了一个GET请求，请求参数会直接包含到URL里；POST请求大多会在提交表单时发起，例如，对于一个登录表单，输入用户名和密码后，单击登录按钮，这时通常会发起一个POST请求，其数据通常会以表单的形式传输，而不会体现在URL中</p><h5 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h5><ul><li>GET请求中的参数包含在URL里面，数据可以在URL中看到；而POST请求的URL不会包含这些数据，数据都是通过表单形式传输，会包含在请求体中</li><li>GET请求提交的数据最多只有1024字节，POST方式则没有限制</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应，即Response，由服务器返回给客户端，可以分为三部分: 响应状态码(HTTP Status Code)，响应头(Response head)，响应体(Response body)</p><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><p>详情<a class="link"   href="http://kest.club/2022/01/19/%E5%85%B3%E4%BA%8EHTTP%E7%8A%B6%E6%80%81%E7%A0%81/" >点击这里<i class="fas fa-external-link-alt"></i></a></p><h2 id="Web网页基础"><a href="#Web网页基础" class="headerlink" title="Web网页基础"></a>Web网页基础</h2><h3 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h3><p>网页可以分为三大部分: HTML、CSS和JS</p><ul><li>HTML: HTML的全称为<a class="link"   href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6972570" >超文本标记语言<i class="fas fa-external-link-alt"></i></a>，是一种<a class="link"   href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436" >标记语言<i class="fas fa-external-link-alt"></i></a>。它包括一系列<a class="link"   href="https://baike.baidu.com/item/%E6%A0%87%E7%AD%BE/2440469" >标签<i class="fas fa-external-link-alt"></i></a>．通过这些标签可以将网络上的<a class="link"   href="https://baike.baidu.com/item/%E6%96%87%E6%A1%A3/1009768" >文档<i class="fas fa-external-link-alt"></i></a>格式统一，使分散的<a class="link"   href="https://baike.baidu.com/item/Internet/272794" >Internet<i class="fas fa-external-link-alt"></i></a>资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性<a class="link"   href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC/5443630" >文本<i class="fas fa-external-link-alt"></i></a>，HTML命令可以说明<a class="link"   href="https://baike.baidu.com/item/%E6%96%87%E5%AD%97/612910" >文字<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2/773307" >图形<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://baike.baidu.com/item/%E5%8A%A8%E7%94%BB/206564" >动画<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://baike.baidu.com/item/%E5%A3%B0%E9%9F%B3/33686" >声音<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://baike.baidu.com/item/%E8%A1%A8%E6%A0%BC/3371820" >表格<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://baike.baidu.com/item/%E9%93%BE%E6%8E%A5/2665501" >链接<i class="fas fa-external-link-alt"></i></a>等</li><li>CSS: 层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现<a class="link"   href="https://baike.baidu.com/item/HTML" >HTML<i class="fas fa-external-link-alt"></i></a>（<a class="link"   href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073" >标准通用标记语言<i class="fas fa-external-link-alt"></i></a>的一个应用）或<a class="link"   href="https://baike.baidu.com/item/XML" >XML<i class="fas fa-external-link-alt"></i></a>（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化</li><li>JavaScript: （简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的<a class="link"   href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131" >编程语言<i class="fas fa-external-link-alt"></i></a>。虽然它是作为开发<a class="link"   href="https://baike.baidu.com/item/Web/150564" >Web<i class="fas fa-external-link-alt"></i></a>页面的<a class="link"   href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708" >脚本语言<i class="fas fa-external-link-alt"></i></a>而出名，但是它也被用到了很多非<a class="link"   href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911" >浏览器<i class="fas fa-external-link-alt"></i></a>环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持<a class="link"   href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089" >面向对象<i class="fas fa-external-link-alt"></i></a>、命令式、声明式、<a class="link"   href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0/301912" >函数<i class="fas fa-external-link-alt"></i></a>式编程范式</li></ul><h3 id="网页的结构"><a href="#网页的结构" class="headerlink" title="网页的结构"></a>网页的结构</h3><p>看示例代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>        <span class="comment">&lt;!-- 声明文档。定义html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>         <span class="comment">&lt;!-- 元素是页面的根元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>                     <span class="comment">&lt;!-- 元素包含文档的元数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 定义网页编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个项目<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="comment">&lt;!-- 元素描述了文档的标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="comment">&lt;!--元素包含了页面可以看见的内容。定义文档主体。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个p是段落。可以把很多文字放到里面去。比如这是一段文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="comment">&lt;!-- 通过&lt;h1&gt;-&lt;h6&gt;标签来定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是h2标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是h3标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是h4标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是h5标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是h6标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--定义水平线--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。插入图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>这是跳转到的百度链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!--&lt;a&gt;标签来定义。在 href 属性中指定链接的地址。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/one.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span>   <span class="comment">&lt;!--图像是通过标签 &lt;img&gt; 来定义的。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/two.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本格式化的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>这是一句话。定义粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>这是一句话。定义着重文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>这是一句话。定义斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>这是一句话。定义小字号<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是一句话。定义加重语气<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>插入<span class="tag">&lt;<span class="name">sub</span>&gt;</span>这是一句话<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>定义下标字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>插入<span class="tag">&lt;<span class="name">sup</span>&gt;</span>这是一句话<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>定义上标字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>这是一句话。定义插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>这是一句话。定义删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 计算机输出标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是计算机输出标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span> &gt;</span>#定义计算机代码print(&quot;hello world!&quot;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>定义键盘码<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">samp</span>&gt;</span>定义计算机代码样本<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">var</span>&gt;</span>定义变量<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>定义预格式文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注释：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>这些标签常用于显示计算机/编程代码。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- HTML 引文 引用 标签定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span>定义缩写<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>定义地址<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>该段落文字从右到左显示。<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>定义长的引用<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q</span>&gt;</span>定义短的引用<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cite</span>&gt;</span>定义引用、引证<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dfn</span>&gt;</span>定义一个定义项目<span class="tag">&lt;/<span class="name">dfn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点树及节点间的关系"><a href="#节点树及节点间的关系" class="headerlink" title="节点树及节点间的关系"></a>节点树及节点间的关系</h3><p>在HTML中，所有标签定义的内容都是节点，这些节点构成一个HTML节点树，也叫HTML DOM树；先来看下什么是DOM，DOM是W3C(万维网联盟)的标准，英文全称是Document Object Model，即文档对象模型，它定义了访问HTML和XML文档的标准，根据W3C的HTML DOM标准，HTML文档中的所有内容都是节点</p><ul><li>整个网站文档是一个文档节点</li><li>每个html标签对应一个根节点，即上例中的html标签，它属于一个根节点</li><li>节点内的文本是文本节点，比如a节点代表一个超链接，它内部的文本也被认为是一个文本节点</li><li>每个节点的属性是属性节点，比如a节点有一个href属性，它就是一个属性节点</li><li>注释是注释节点，在HTML中有特殊的语法会被解析为注释，它也会对应一个节点</li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>详情请见: <a class="link"   href="https://www.w3school.com.cn/cssref/css_selectors.asp" >https://www.w3school.com.cn/cssref/css_selectors.asp<i class="fas fa-external-link-alt"></i></a></p><h4 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h4><p>详情请见: <a class="link"   href="https://www.w3school.com.cn/xpath/index.asp" >https://www.w3school.com.cn/xpath/index.asp<i class="fas fa-external-link-alt"></i></a></p><h2 id="爬虫的基本原理"><a href="#爬虫的基本原理" class="headerlink" title="爬虫的基本原理"></a>爬虫的基本原理</h2><h3 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h3><p>简单点讲，爬虫就是<strong>获取网页并提取和保存信息的自动化程序</strong></p><h4 id="获取网页"><a href="#获取网页" class="headerlink" title="获取网页"></a>获取网页</h4><p>爬虫的工作首先是获取网页的源代码，源代码里包含网页的部分有用信息，所以只要获取源代码，就可以从中提取想要的信息了，Python提供了许多库，可以帮助我们获取源代码，比如urllib，requests等，我们可以用这些库完成HTTP请求操作，除此之外，请求和响应都可以用类库提供的数据结构来表示，因此得到相应之后只需要解析数据结构中的body部分，即可得到网页的源代码</p><h4 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h4><p>提取网页的源代码之后，接下来的就是分析源代码，从中提取我们想要的数据，首先，最通用的提取方式是采用正则表达式，这是一个万能的方法，但是构造正则表达式的过程比较复杂且容易出错；另外，由于网页结构具有一定的规则，所以还有一些库是根据网页节点属性、CSS选择器或Xpath来提取网页信息的，如BeautifulSoup、pyquery，lxml等，使用这些库，可以高效地从源代码中提取网页信息，如节点地属性，文本值等</p><h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><p>提取数据之后，我们一般会将提取到的数据保存到某处以便后续使用，保存数据的形式多种多样，可以简单保存为TXT文本或者JSON文本，也可以保存到数据库，如MySQL和MongoDB等，还可保存到远程服务器如借助SFTP进行操作等</p><h4 id="自动化程序"><a href="#自动化程序" class="headerlink" title="自动化程序"></a>自动化程序</h4><p>自动化程序的意思是爬虫可以代替人来完成上述操作，我们当然可以手动提取网页中的信息，但是当量特别大或者想快速大量获取数据的时候，肯定还是借助程序快，爬虫就是代替我们完成爬取工作的自动化程序，它可以在爬取过程中进行各种异常处理、错误重试等操作，确保爬取持续高效地运行</p><h3 id="能爬怎样的数据"><a href="#能爬怎样的数据" class="headerlink" title="能爬怎样的数据"></a>能爬怎样的数据</h3><p>网页中存在各种各样的信息，最常见的便是常规网页，这些网页对应着HTML代码，而最常抓取的便是HTML源代码</p><p>另外，可能有些网页返回的不是HTML代码，而是一个JSON字符串(其中API接口大多采用这种方式)，这种格式的数据方便传输和解析，爬虫同样可以抓取这些数据，而且数据提取会更加方便；</p><p>网页中还包含着各种二进制数据，如图片、视频音频文件，利用爬虫，我们可以将这些二进制数据抓取下来，然后保存成对应的文件名</p><p>除了上述数据，网页中还有各种扩展名文件，如CSS、Javascript和配置文件等</p><h3 id="Javascript渲染的页面"><a href="#Javascript渲染的页面" class="headerlink" title="Javascript渲染的页面"></a>Javascript渲染的页面</h3><p>对于Javascript渲染的网页，我们可以分析源代码后台Ajax接口，也可使用Selenium、Splash、Pyppeteer、Playwright这样的库来模拟Javascript渲染</p><h2 id="Session和Cookie"><a href="#Session和Cookie" class="headerlink" title="Session和Cookie"></a>Session和Cookie</h2><h3 id="神秘的凭证"><a href="#神秘的凭证" class="headerlink" title="神秘的凭证"></a>神秘的凭证</h3><p>很多页面是需要登录之后才可以查看的，按照一般的逻辑，输入用户名和密码登陆网站，肯定是拿到了一种类似凭证的东西，有了这个凭证，才能保持登录的状态，访问那些登录之后才能看到的页面</p><p>那么这种神秘的凭证到底是什么呢，其实它就是Session和Cookie共同产生的结果</p><h3 id="无状态HTTP"><a href="#无状态HTTP" class="headerlink" title="无状态HTTP"></a>无状态HTTP</h3><p>我们需要知道HTTP的一个特点: <strong>无状态</strong></p><p>什么叫无状态呢，也就是说<strong>HTTP协议对事物处理是没有记忆能力的，或者说服务并不知道客户端处于什么状态</strong>，这时，两种用于保持HTTP连接状态的技术出现了，分别是Session和Cookie；<strong>Session在服务端</strong>，也就是网站的服务器，用来保存用户的Session信息，<strong>Cookie在客户端</strong>，也可以理解为在浏览器端，有了Cookie，浏览器在下次访问相同网页时就会自动附带上它，并发送给服务器，服务器通过识别Cookie鉴定出是哪个用户在访问，然后判断此用户是否处于登录状态，并返回对应的响应</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session译为会话，其本意是指有始有终的一系列动作、消息，例如打电话时，从拿起电话拨号到挂断电话之间的一系列过程就可以称为一个Session</p><p>而在Web中，Session对象用来存储特定用户Session所需的属性及配置信息，这样，当用户在应用程序的页面之间跳转时，存储在Session对象中的变量将不会丢失，会在整个Session中一直保存下去；当用户请求来自应用程序的页面时，如果该用户还没有Session，那么Web服务器将自动创建一个Session对象，当Session过期或被放弃后，服务器将终止该Session</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>值某些网站为了鉴别用户身份、进行Session跟踪而存储在用户本地终端上的数据</p><h4 id="Session维持"><a href="#Session维持" class="headerlink" title="Session维持"></a>Session维持</h4><p>如何利用Cookie保持状态呢，在客户端第一次请求服务器时，服务器会返回一个响应头中带有Set-Cookie字段的响应给客户端，这个字段用来标记用户；客户端浏览器会把Cookie保存起来，当下一次请求相同的网站时，把保存的Cookie放到请求头中一起交给服务器；Cookie中携带着Session ID相关信息，服务器通过检查Cookie即可找到对应的Session，继而通过判断Session辨认用户状态；如果Session当前是有效的，就证明用户处于登录状态，此时服务器返回登录之后才可以查看的网页内容，浏览器再进行解析即可</p><p>反之，如果传给服务器的Cookie是无效的，或者Session已经过期了，客户端将不能继续访问页面</p><p>Cookie和Session需要配合，一个在客户端，一个在服务端，二者共同协作，就实现了登录控制</p><h4 id="属性结构"><a href="#属性结构" class="headerlink" title="属性结构"></a>属性结构</h4><p>接下来，我们看看Cookie都包含哪些内容:</p><p>Name: Cookie的名称，Cookie一旦创建，名称便不可更改</p><p>Value: Cookie的值，如果值为Unicode字符，则需要为字符编码；如果值为二进制数据，则需要使用base64编码</p><p>Domain: 指定可以访问该Cookie的域名，例如设置Domain为.zhihu.com，表示所有以.zhihu.com结尾的域名都可以访问该Cookie</p><p>Path: Cookie的使用路径，如果设置为/path/，则只有该路径为/path/的页面才可以访问该Cookie，如果设置为/，则本域名下的所有页面都可以访问该Cookie</p><p>Max-Age: Cookie失效的时间，单位为秒，常和Expires一起使用，通过此属性可以计算出Cookie的有效时间，Max-Age如果为正数，则表示Cookie在Max-Age秒之后失效，如果为负数，则Cookie在关闭浏览器时失效，而且浏览器不会以任何形式保存该Cookie</p><p>Size: Cookie的大小</p><p>HTTP: Cookie的httponly属性，若此属性为true，则只有在HTTP Headers中才会带有此Cookie的信息，而不能通过document.cookie来访为此Cookie</p><p>Secure: 是否允许使用安全协议传输Cookie，安全协议有HTTPS和SSL等，使用这些协议在网络上传输数据之前会先将数据加密，其默认值为false</p><h4 id="会话Cookie和持久Cookie"><a href="#会话Cookie和持久Cookie" class="headerlink" title="会话Cookie和持久Cookie"></a>会话Cookie和持久Cookie</h4><p>会话Cookie就是把Cookie放在浏览器内存里，关闭浏览器之后，Cookie即失效，持久Cookie则会把Cookie保存在客户端的硬盘中，下次还可以继续使用，用于长久保持用户的登录状态</p><p>其实没有会话Cookie和持久Cookie之说，只是Maxage或者Expires字段决定了Cookie失效的时间</p><p>因此，一些持久化登录的网站实际上就是把Cookie的有效时间和Session有效期设置得比较长</p><h4 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h4><p>关闭浏览器不会删除Session，关闭浏览器可能会删除会话Cookie，所以就找不到Session ID，如果是持久Cooike就能找到Session ID</p><h3 id="代理的基本原理"><a href="#代理的基本原理" class="headerlink" title="代理的基本原理"></a>代理的基本原理</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>代理实际上就是指代理服务器，形象点说代理就是网络信息的中转站</p><h4 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h4><ul><li>突破自身IP的限制，访问一些平时不能访问的站点</li><li>访问一些单位或团体的内部资源</li><li>提高访问速度，通常代理服务器会设置一个较大的硬盘缓冲区，当有外界信息通过时，会同时将其保存到自己的缓冲区中，当其他用户访问相同的信息时，直接从缓冲区中取出信息，所以提高了访问速度</li><li>隐藏真实的IP</li></ul><h4 id="爬虫代理"><a href="#爬虫代理" class="headerlink" title="爬虫代理"></a>爬虫代理</h4><p>爬虫中使用代理，可以隐藏我们真实的IP，让服务器误以为是代理服务器在请求自己，这样在爬取过程中不断更换代理，就可以实现避免IP被封锁，达到很好的爬取效果</p><h4 id="代理分类"><a href="#代理分类" class="headerlink" title="代理分类"></a>代理分类</h4><h5 id="根据协议区分"><a href="#根据协议区分" class="headerlink" title="根据协议区分"></a>根据协议区分</h5><ul><li>FTP代理服务器: 主要用于访问FTP服务器，一般有上传下载以及缓存功能，端口一般我为21、2121等</li><li>HTTP代理服务器: 主要用于访问网页，一般有内容过滤和缓存功能，端口一般为80，8080</li><li>SSL/TLS代理: 主要用于访问加密网站，一般有SSL或TLS加密功能(最高支持128位加密强度)，端口一般为443</li><li>RTSP代理: 主要用于Realplyer访问流媒体服务器，一般有缓存功能，端口一般为554</li><li>Telnet代理: 主要用于Telnet远程控制(黑客入侵计算机时常用于隐藏身份)，端口一般为23</li><li>POP3/SMTP代理: 主要用于以POP3/SMTP方式收发邮件，一般有缓存功能，端口一般为110/25</li><li>SOCKS代理: 只是单纯传递数据包，不关心具体协议和用法，所以速度快很多，一般有缓存功能，端口一般为1080</li></ul><h5 id="根据匿名程度区分"><a href="#根据匿名程度区分" class="headerlink" title="根据匿名程度区分"></a>根据匿名程度区分</h5><ul><li>高度匿名代理: 数据包会原封不动地转发</li><li>普通匿名代理: 数据包会做一些处理</li><li>透明代理: 会告诉服务器客户端真实的IP</li><li>间谍代理: 由组织或个人创建的代理服务器</li></ul><h5 id="常见代理设置"><a href="#常见代理设置" class="headerlink" title="常见代理设置"></a>常见代理设置</h5><ul><li>对于网上的免费代理，最好使用高度代理，可以在使用前把所有代理都抓取下来筛选一遍拿到可用代理，也可以进一步维护一个代理池</li><li>使用付费代理服务，使用付费的代理会好用很多</li><li>ADSL拨号，拨一次号换一次IP，稳定性高，也是一种比较有效的方法</li><li>蜂窝代理，使用4G或5G网卡等制作的代理，由于使用蜂窝网络作为代理的情形比较少，因此整体被封锁的概率会比较低，但搭建蜂窝代理的成本是比较高的</li></ul><h2 id="多线程和多进程的基本原理"><a href="#多线程和多进程的基本原理" class="headerlink" title="多线程和多进程的基本原理"></a>多线程和多进程的基本原理</h2><h3 id="多线程的含义"><a href="#多线程的含义" class="headerlink" title="多线程的含义"></a>多线程的含义</h3><p>先说说什么是进程:</p><p>进程可以理解为一个可以独立运行的程序单位，例如打开一个浏览器，这就是开启了一个浏览器进程；在一个进程中可以同时处理很多事情，比如浏览器可以打开很多个选项卡，这一个个选项卡其实就是一个个线程，<strong>进程就是线程的集合，进程是由一个或多个线程构成的，线程是操作系统进行运算调度的最小单位，是进程中的最小运行单位</strong></p><p>有了上面的铺垫，我们可以了解到，多线程就是一个进程中同时执行多个线程，上面的浏览器进程就是典型的多线程</p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>我们知道，在计算机中运行一个程序，底层是通过处理器运行一条条指令来实现的</p><p>并发是指多个线程对应的多条指令被快速轮换地执行</p><p>并行是指同一时刻有多条指令在多个处理器上同时执行</p><p>例如，系统处理器需要同时运行多个线程，<strong>如果系统处理器只有一个核，那它只能通过并发地方式来运行这些线程</strong>，然而如果系统处理器有多个核，那么在一个核执行一个线程地同时，另一个核可以执行另一个线程，这样两个线程就实现了并行执行</p><h3 id="多线程适用场景"><a href="#多线程适用场景" class="headerlink" title="多线程适用场景"></a>多线程适用场景</h3><p>如果任务不全是计算密集型任务，就可以使用多线程来提高程序的整体执行效率，尤其对于网络爬虫这种IO密集型任务，使用多线程能够大大提高程序整体的爬取效率</p><h3 id="多进程的含义"><a href="#多进程的含义" class="headerlink" title="多进程的含义"></a>多进程的含义</h3><p>顾名思义，<strong>多进程就是同时运行多个进程</strong>，由于进程就是线程的集合，而且进程是由一个或多个线程构成的，所以<strong>多进程就意味着有大于等于进程数量的线程在同时运行</strong></p><h3 id="Python中的多线程和多进程"><a href="#Python中的多线程和多进程" class="headerlink" title="Python中的多线程和多进程"></a>Python中的多线程和多进程</h3><p>Python中GIL(全局解释器锁，其设计之初是出于对数据安全的考虑)的限制导致不论是在单核还是多核条件下，同一时刻都只能运行一个线程，这使得Python多线程无法发挥多核并行的优势</p><p>在Python的多线程下，每个线程的执行方式分如下三步:</p><ul><li>获取GIL</li><li>执行对应线程的代码</li><li>释放GIL</li></ul><p>而对于多进程来说，每个进程都有属于自己的GIL，所以在多核处理器下，多进程的运行是不会受GIL影响的，也就是说，多进程能够更好地发挥多核优势</p><p>不过，对于爬虫这种IO密集型任务来说，多线程和多进程产生的影响差别并不大；但对于计算密集型任务来说，由于GIL的存在，Python多线程的整体运行效率在多核情况下可能反而比单核更低，而Python的多进程相比多线程，运行效率在多核的情况下比单核会有成倍提升</p><p>从整体来说，Python的多进程比多线程更有优势，所以，如果条件允许的话，尽量使用多进程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本章我们将了解到HTTP原理、网页的基础知识、爬虫的基本原理、Cookie的基本原理、多进程和多线程的基本原理等，了解这些内容有助于我们更好地理解和编写网络爬虫相关的程序&lt;/p&gt;
&lt;h2 id=&quot;HTTP基本原理&quot;&gt;&lt;a href=&quot;#HTTP基本原理&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js逆向腾讯动漫</title>
    <link href="http://example.com/2022/01/26/js%E9%80%86%E5%90%91%E8%85%BE%E8%AE%AF%E5%8A%A8%E6%BC%AB/"/>
    <id>http://example.com/2022/01/26/js%E9%80%86%E5%90%91%E8%85%BE%E8%AE%AF%E5%8A%A8%E6%BC%AB/</id>
    <published>2022-01-26T09:31:30.000Z</published>
    <updated>2022-01-26T10:44:11.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标网站"><a href="#目标网站" class="headerlink" title="目标网站"></a>目标网站</h3><p><a class="link"   href="https://ac.qq.com/ComicView/index/id/531490/cid/1" >点击跳转<i class="fas fa-external-link-alt"></i></a></p><h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><p>首先我们打开开发者工具，然后下滑动漫画，会发现一张张图片被加载出来:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-34-13.3o5kpreknbs.webp"                      alt="Snipaste_2022-01-26_17-34-13"                ></p><p>但是它又不是ajax方式的:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-35-56.72x5n5xna380.webp"                      alt="Snipaste_2022-01-26_17-35-56"                ></p><p>然后来看看是不是在js代码中，我们先取一部分搜索下:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-37-59.545sloo9lzk0.webp"                      alt="Snipaste_2022-01-26_17-37-59"                ></p><p>发现是没有的:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-39-13.78i7xgfimcw0.webp"                      alt="Snipaste_2022-01-26_17-39-13"                ></p><p>然后就只有一种可能，那就是在页面的代码中，这种方式肯定涉及到加密:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-41-55.17hhu0k0toqk.webp"                      alt="Snipaste_2022-01-26_17-41-55"                ></p><p>如上图，在页面的代码中发现了一段可疑的代码，怀疑这里有猫腻</p><p>然后我们就搜索这个DATA，搜素的时候注意大小写:</p><p>然后我们发现只有一个js文件中出现了DATA:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-49-02.g8080q6enqo.webp"                      alt="Snipaste_2022-01-26_17-49-02"                ></p><p>我们定位到这个js文件然后格式化下，继续搜索:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-50-28.50mdr6qmyf40.webp"                      alt="Snipaste_2022-01-26_17-50-28"                ></p><p>我们发现只有第一个DATA参数有点猫腻，然后我们打个断点看看:</p><p>发现这里的变量_V里面就有我们想要的图片数据:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_17-53-18.6ge3wybq9zk0.webp"                      alt="Snipaste_2022-01-26_17-53-18"                ></p><p>去掉双引号放在浏览器的地址栏发现就是我们要的图片数据</p><p>然后我们来看看这个_v是怎么来的，从哪里来的</p><p>看了一圈_v参数，我们发现第二个·<code>_v</code>参数前面的一个<a class="link"   href="https://www.cnblogs.com/gtscool/p/12607917.html" >立即执行函数<i class="fas fa-external-link-alt"></i></a>有点可疑，这是一个经过加密后的函数(经过eval编码加密):</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_18-05-27.3wvwak3txl80.webp"                      alt="Snipaste_2022-01-26_18-05-27"                ></p><p>我们可以用<a class="link"   href="https://wangye.org/tools/scripts/eval/" >这个网站<i class="fas fa-external-link-alt"></i></a>进行解密:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_18-06-13.2e9v6oewl2dc.webp"                      alt="Snipaste_2022-01-26_18-06-13"                ></p><p>以下是解密后的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _keyStr = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.decode = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>,</span><br><span class="line">        b, d, h, f, g, e = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (c = c.replace(<span class="regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="string">&quot;&quot;</span>); e &lt; c.length;) b = _keyStr.indexOf(c.charAt(e++)),</span><br><span class="line">        d = _keyStr.indexOf(c.charAt(e++)),</span><br><span class="line">        f = _keyStr.indexOf(c.charAt(e++)),</span><br><span class="line">        g = _keyStr.indexOf(c.charAt(e++)),</span><br><span class="line">        b = b &lt;&lt; <span class="number">2</span> | d &gt;&gt; <span class="number">4</span>,</span><br><span class="line">        d = (d &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span> | f &gt;&gt; <span class="number">2</span>,</span><br><span class="line">        h = (f &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span> | g,</span><br><span class="line">        a += <span class="built_in">String</span>.fromCharCode(b),</span><br><span class="line">        <span class="number">64</span> != f &amp;&amp; (a += <span class="built_in">String</span>.fromCharCode(d)),</span><br><span class="line">        <span class="number">64</span> != g &amp;&amp; (a += <span class="built_in">String</span>.fromCharCode(h));</span><br><span class="line">        <span class="keyword">return</span> a = _utf8_decode(a)</span><br><span class="line">    &#125;;</span><br><span class="line">    _utf8_decode = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="string">&quot;&quot;</span>,</span><br><span class="line">        b = <span class="number">0</span>,</span><br><span class="line">        d = c1 = c2 = <span class="number">0</span>; b &lt; c.length;) d = c.charCodeAt(b),</span><br><span class="line">        <span class="number">128</span> &gt; d ? (a += <span class="built_in">String</span>.fromCharCode(d), b++) : <span class="number">191</span> &lt; d &amp;&amp; <span class="number">224</span> &gt; d ? (c2 = c.charCodeAt(b + <span class="number">1</span>), a += <span class="built_in">String</span>.fromCharCode((d &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span> | c2 &amp; <span class="number">63</span>), b += <span class="number">2</span>) : (c2 = c.charCodeAt(b + <span class="number">1</span>), c3 = c.charCodeAt(b + <span class="number">2</span>), a += <span class="built_in">String</span>.fromCharCode((d &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span> | (c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span> | c3 &amp; <span class="number">63</span>), b += <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">new</span> Base(),</span><br><span class="line">T = W[<span class="string">&#x27;DA&#x27;</span> + <span class="string">&#x27;TA&#x27;</span>].split(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">N = W[<span class="string">&#x27;n&#x27;</span> + <span class="string">&#x27;onc&#x27;</span> + <span class="string">&#x27;e&#x27;</span>],</span><br><span class="line">len,</span><br><span class="line">locate,</span><br><span class="line">str;</span><br><span class="line">N = N.match(<span class="regexp">/\d+[a-zA-Z]+/g</span>);</span><br><span class="line">len = N.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    locate = <span class="built_in">parseInt</span>(N[len]) &amp; <span class="number">255</span>;</span><br><span class="line">    str = N[len].replace(<span class="regexp">/\d+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    T.splice(locate, str.length)</span><br><span class="line">&#125;</span><br><span class="line">T = T.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">_v = <span class="built_in">JSON</span>.parse(B.decode(T));</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出T应该就是页面代码中的那一长串字符串，我们来验证下:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_18-14-06.57lgr10pb5s0.webp"                      alt="Snipaste_2022-01-26_18-14-06"                ></p><p>然后_v就是刚刚打断点看到的包含图片url的变量</p><p>然后我们就可以通过以上的js代码获得_v，但是我们还有一个变量N未知，同样的我们在console中看一下:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_18-15-44.6a7z29eh0n00.webp"                      alt="Snipaste_2022-01-26_18-15-44"                ></p><p>但是这个N参数在哪里呢，我们在页面代码中看下，取一小部分搜索，这也是一个技巧:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_18-18-06.75bpfs6tq2s0.webp"                      alt="Snipaste_2022-01-26_18-18-06"                ></p><p>发现这是一句js代码生成的</p><h3 id="构造参数"><a href="#构造参数" class="headerlink" title="构造参数"></a>构造参数</h3><p>刚刚我们知道了_v这个变量的生成函数，然后目前有两个参数需要构建出来</p><p>这里我们用正则提取，主要用到了正则的(?=、?&lt;=)，可以跳转<a class="link"   href="https://www.runoob.com/regexp/regexp-syntax.html" >这里<i class="fas fa-external-link-alt"></i></a>查看如何使用</p><p>下面来看看代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://ac.qq.com/ComicView/index/id/531490/cid/1&#x27;</span></span><br><span class="line">res = requests.get(url).text</span><br><span class="line">data = re.findall(<span class="string">&quot;(?&lt;=var DATA        = &#x27;).*?(?=&#x27;)&quot;</span>, res)[<span class="number">0</span>]   <span class="comment"># 提取DATA</span></span><br><span class="line">nonce = re.findall(<span class="string">&#x27;window\[&quot;.+?(?&lt;=;)&#x27;</span>, res)[<span class="number">0</span>]   <span class="comment"># 提取window[&quot;no&quot;+&quot;nce&quot;]</span></span><br><span class="line">nonce = <span class="string">&#x27;=&#x27;</span>.join(nonce.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>:])[:-<span class="number">1</span>]   <span class="comment"># 掐头去尾</span></span><br><span class="line">nonce = execjs.<span class="built_in">eval</span>(nonce)   <span class="comment"># 通过execjs模块计算js代码</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(nonce)</span><br></pre></td></tr></table></figure><p>以上对data的提取的正则有点问题，可以用beautifsuop来获取</p><p>获取到参数之后就可以很方便地进行获取_v变量了，可以像上面一样使用execjs来运行js代码然后获取到<code>_v</code>参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;目标网站&quot;&gt;&lt;a href=&quot;#目标网站&quot; class=&quot;headerlink&quot; title=&quot;目标网站&quot;&gt;&lt;/a&gt;目标网站&lt;/h3&gt;&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://ac.qq.com/ComicView/index/id/5</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于asyncio异步编程</title>
    <link href="http://example.com/2022/01/26/%E5%85%B3%E4%BA%8Easyncio%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/01/26/%E5%85%B3%E4%BA%8Easyncio%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</id>
    <published>2022-01-26T01:42:30.000Z</published>
    <updated>2022-01-26T07:56:34.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="协程-amp-异步编程-asyncio"><a href="#协程-amp-异步编程-asyncio" class="headerlink" title="协程&amp;异步编程(asyncio)"></a>协程&amp;异步编程(asyncio)</h3><p>协程(Coroutine)，也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line">func2()</span><br></pre></td></tr></table></figure><p>上述代码是普通的函数定义和执行，按流程分别执行两个函数中的代码，并先后会输出：<code>1、2、3、4</code>。但如果介入协程技术那么就可以实现函数见代码切换执行，最终输入：<code>1、3、2、4</code></p><h3 id="协程的实现"><a href="#协程的实现" class="headerlink" title="协程的实现"></a>协程的实现</h3><p>在Python中有多种方式可以实现协程，例如:</p><ul><li>greenlet，是一个第三方模块，用于实现协程代码(Gevent协程就是基于greenlet实现)</li><li>yield，生成器，借助生成器的特点也可以实现协程代码</li><li>asyncio，在Python3.4中引入的模块用于编写协程代码</li><li>async &amp; awiat，在Python3.5中引入的两个关键字，结合asyncio模块可以更方便的编写协程代码</li></ul><h4 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h4><p>greentlet是一个第三方模块，需要提前安装 <code>pip3 install greenlet</code>才能使用，来看一个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)        <span class="comment"># 第1步：输出 1</span></span><br><span class="line">    gr2.switch()    <span class="comment"># 第3步：切换到 func2 函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)        <span class="comment"># 第6步：输出 2</span></span><br><span class="line">    gr2.switch()    <span class="comment"># 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)        <span class="comment"># 第4步：输出 3</span></span><br><span class="line">    gr1.switch()    <span class="comment"># 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)        <span class="comment"># 第8步：输出 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gr1 = greenlet(func1)</span><br><span class="line">gr2 = greenlet(func2)</span><br><span class="line">gr1.switch() <span class="comment"># 第1步：去执行 func1 函数</span></span><br></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>注意: switch中也可以传递参数用于在切换执行时相互传递值</p><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>基于Python的生成器的yield和yield form关键字实现协程代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> func2()</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = func1()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f1:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>注意: yield form关键字是在Python3.3中引入的</p><h4 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h4><p>在Python3.4之前官方未提供协程的类库，一般大家都是使用greenlet等其他来实现。在Python3.4发布后官方正式支持协程，即:asyncio模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>) <span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future( func1() ),</span><br><span class="line">    asyncio.ensure_future( func2() )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()  <span class="comment"># 创建一个事件循环</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))  <span class="comment"># asyncio.wait会把task这个列表列表里的每一个Task对象也转化成一个Task对象，所以这里是重复了，可以看看以下代码，和这个代码的效果是一样的</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>) <span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    func1(),</span><br><span class="line">    func2()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()  <span class="comment"># 创建一个事件循环</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure><p>注意: 基于asyncio模块实现的协程比之前的要更厉害，因为他的内部还集成了遇到IO耗时操作自动切花的功能</p><h4 id="async-amp-await"><a href="#async-amp-await" class="headerlink" title="async&amp;await"></a>async&amp;await</h4><p>async &amp; awit 关键字在Python3.5版本中正式引入，基于他编写的协程代码其实就是 上一示例的加强版，让代码可以更加简便，Python3.8之后 <code>@asyncio.coroutine</code> 装饰器就会被移除，推荐使用async &amp; awit 关键字实现协程代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),  <span class="comment"># asyncio.ensure_future()将会把协程对象封装成一个Task对象</span></span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>关于协程有多种实现方式，目前主流使用是Python官方推荐的asyncio模块和async&amp;await关键字的方式，例如: 在tonado、sanic、fastapi、django3 中均已支持，接下来，我们也会针对 <code>asyncio模块</code> + <code>async &amp; await</code> 关键字进行更加详细的讲解</p><h3 id="协程的意义以及使用"><a href="#协程的意义以及使用" class="headerlink" title="协程的意义以及使用"></a>协程的意义以及使用</h3><p>通过学习，我们已经了解到协程可以通过一个线程在多个上下文中进行来回切换执行，<strong>但是</strong>，协程来回切换执行的意义何在呢?(网上看到很多文章舔协程，协程牛逼之处是哪里呢?)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算型的操作，利用协程来回切换执行，没有任何意义，来回切换并保存状态 反倒会降低性能。</span><br><span class="line">IO型的操作，利用协程在IO等待时间就去切换执行其他任务，当IO操作结束后再自动回调，那么就会大大节省资源并提供性能，从而实现异步编程(不等待任务结束就可以去执行其他代码)</span><br></pre></td></tr></table></figure><h4 id="爬虫案例"><a href="#爬虫案例" class="headerlink" title="爬虫案例"></a>爬虫案例</h4><p>例如：用代码实现下载 <code>url_list</code> 中的图片:</p><ul><li><p>方式一，同步编程实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始下载:&quot;</span>,url)</span><br><span class="line">    <span class="comment"># 发送网络请求，下载图片</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;下载完成&quot;</span>)</span><br><span class="line">    <span class="comment"># 图片保存到本地文件</span></span><br><span class="line">    file_name = url.rsplit(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">        file_object.write(response.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url_list = [</span><br><span class="line">        <span class="string">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> url_list:</span><br><span class="line">        download_image(item)</span><br></pre></td></tr></table></figure></li><li><p>方式二，基于协程的异步编程实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span>(<span class="params">session, url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发送请求：&quot;</span>, url)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, verify_ssl=<span class="literal">False</span>) <span class="keyword">as</span> response:</span><br><span class="line">        content = <span class="keyword">await</span> response.content.read()</span><br><span class="line">        file_name = url.rsplit(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">            file_object.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        url_list = [</span><br><span class="line">            <span class="string">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">        tasks = [asyncio.create_task(fetch(session, url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]  <span class="comment"># asyncio.create_task()将会把协程对象封装成一个Task对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><p>上述两种的执行对比之后会发现，<code>基于协程的异步编程</code> 要比 <code>同步编程</code>的效率高了很多。因为:</p><ul><li>同步编程，按照顺序逐一排队执行，如果图片下载时间为2分钟，那么全部执行完则需要6分钟</li><li>异步编程，几乎同时发出了3个下载任务的请求（遇到IO请求自动切换去发送其他任务请求），如果图片下载时间为2分钟，那么全部执行完毕也大概需要2分钟左右就可以了</li></ul></li></ul><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>协程一般应用在有IO操作的程序中，因为协程可以利用IO等待的时间去执行一些其他的代码，从而提升代码执行效率</p><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><p>基于<code>async</code> &amp; <code>await</code>关键字的协程可以实现异步编程，这也是目前python异步相关的主流技术</p><p>想要真正的了解Python中内置的异步编程，根据下文的顺序一点点来看</p><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p>事件循环，可以把他当做是一个while循环，这个while循环在周期性地运行并执行一些<code>任务</code>，在特定条件下终止循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"></span><br><span class="line">任务列表 = [ 任务<span class="number">1</span>, 任务<span class="number">2</span>, 任务<span class="number">3</span>,... ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将<span class="string">&#x27;可执行&#x27;</span>和<span class="string">&#x27;已完成&#x27;</span>的任务返回</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 就绪任务 <span class="keyword">in</span> 已准备就绪的任务列表:</span><br><span class="line">        执行已就绪的任务</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 已完成的任务 <span class="keyword">in</span> 已完成的任务列表:</span><br><span class="line">        在任务列表中移除 已完成的任务</span><br><span class="line"></span><br><span class="line">    如果 任务列表 中的任务都已完成，则终止循环</span><br></pre></td></tr></table></figure><p>在编写程序的时候可以通过如下代码来获取和创建事件循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><h4 id="协程和异步编程"><a href="#协程和异步编程" class="headerlink" title="协程和异步编程"></a>协程和异步编程</h4><p>协程函数，定义形式为<code>async def</code>的函数；协程对象，调用协程函数所返回的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个协程函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用协程函数，返回一个协程对象</span></span><br><span class="line">result = func()</span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 调用协程函数时，函数内部代码不会执行，只是会返回一个协程对象</p><h5 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h5><p>程序中，如果想要执行协程函数的内部代码，需要 <code>事件循环</code> 和 <code>协程对象</code> 配合才能实现，如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;协程内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用协程函数，返回一个协程对象(任务对象)</span></span><br><span class="line">result = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="comment"># loop = asyncio.get_event_loop() # 创建一个事件循环</span></span><br><span class="line"><span class="comment"># loop.run_until_complete(result) # 将协程对象当做任务提交到事件循环的任务列表中(这里只有一个协程对象，所以就直接把这个协程对象传进去)，任务列表中的所有协程对象执行完之后就终止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="comment"># 本质上方式一是一样的，内部先 创建事件循环 然后执行 run_until_complete，一个简便的写法。</span></span><br><span class="line"><span class="comment"># asyncio.run 函数在 Python 3.7 中加入 asyncio 模块，</span></span><br><span class="line">asyncio.run(result)</span><br></pre></td></tr></table></figure><p>这个过程可以简单理解为：将<code>协程对象</code>当做任务添加到 <code>事件循环</code> 的任务列表，然后事件循环检测列表中的<code>协程对象</code>是否 已准备就绪(默认可理解为就绪状态)，如果准备就绪则执行其内部代码</p><h5 id="await"><a href="#await" class="headerlink" title="await"></a>await</h5><p>await是一个只能在协程函数中使用的关键字，<strong>用于遇到IO操作时挂起当前协程(任务)，当前协程(任务)挂起过程中 事件循环可以去执行其他的协程(任务)，当前协程IO处理完成时，可以再次切换回来执行await之后的代码</strong>；代码如下:</p><p>示例1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。</span></span><br><span class="line">    <span class="comment"># 当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class="line">    response = <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class="line"></span><br><span class="line">result = func()</span><br><span class="line"></span><br><span class="line">asyncio.run(result)</span><br></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行协程函数内部代码</span><br><span class="line">IO请求结束，结果为： <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">others</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class="line">    response = <span class="keyword">await</span> others()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class="line"></span><br><span class="line">asyncio.run(func())</span><br></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行协程函数内部代码</span><br><span class="line">start</span><br><span class="line">end</span><br><span class="line">IO请求结束，结果为： 返回值</span><br></pre></td></tr></table></figure><p>示例3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">others</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class="line">    response1 = <span class="keyword">await</span> others()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;IO请求结束，结果为：&quot;</span>, response1)</span><br><span class="line"></span><br><span class="line">    response2 = <span class="keyword">await</span> others()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;IO请求结束，结果为：&quot;</span>, response2)</span><br><span class="line"></span><br><span class="line">asyncio.run(func())</span><br></pre></td></tr></table></figure><p>上述的所有示例都只是创建了一个任务(协程对象)，即: 事件循环的任务列表中只有一个任务(协程对象)，所以在IO等待时无法演示切换到其他任务效果</p><p>程序想要创建多个任务对象，需要使用Task对象来实现</p><h5 id="Task对象"><a href="#Task对象" class="headerlink" title="Task对象"></a>Task对象</h5><p><strong>Tasks用于并发调度协程</strong>，通过<code>asyncio.create_task(协程对象)</code>的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 <code>asyncio.create_task()</code> 函数以外，还可以用低层级的 <code>loop.create_task()</code> 或 <code>ensure_future()</code> 函数，不建议手动实例化Task对象</p><p>本质上是将协程对象们封装成task对象，一个<strong>协程对象列表</strong>，并将协程立即加入事件循环，同时追踪协程的状态</p><p><strong>注意</strong>: <code>asyncio.create_task()</code> 函数在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 <code>asyncio.ensure_future()</code> 函数</p><p>示例1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;返回值&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class="line">    task1 = asyncio.create_task(func())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class="line">    task2 = asyncio.create_task(func())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当执行某协程遇到IO操作时，会自动化切换执行其他任务。</span></span><br><span class="line">    <span class="comment"># 此处的await是等待相对应的协程全都执行完毕并获取结果</span></span><br><span class="line">    ret1 = <span class="keyword">await</span> task1</span><br><span class="line">    ret2 = <span class="keyword">await</span> task2</span><br><span class="line">    <span class="built_in">print</span>(ret1, ret2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;返回值&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main开始&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建协程，将协程封装到Task对象中并添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class="line">    <span class="comment"># 在调用</span></span><br><span class="line">    task_list = [</span><br><span class="line">        asyncio.create_task(func(), name=<span class="string">&quot;n1&quot;</span>),</span><br><span class="line">        asyncio.create_task(func(), name=<span class="string">&quot;n2&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当执行某协程遇到IO操作时，会自动化切换执行其他任务。</span></span><br><span class="line">    <span class="comment"># 此处的await是等待所有协程执行完毕，并将所有协程的返回值保存到done</span></span><br><span class="line">    <span class="comment"># 如果设置了timeout值，则意味着此处最多等待的秒，完成的协程返回值写入到done中，未完成则写到pending中。</span></span><br><span class="line">    done, pending = <span class="keyword">await</span> asyncio.wait(task_list, timeout=<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(done, pending)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>注意: <code>asyncio.wait</code>源码内部也会对列表中的每个协程<strong>执行ensure_future从而封装为Task对象</strong>，所以在和wait配合使用时task_list的值为<code>[func(),func()]</code> 也是可以的，如下示例所示:</p><p>示例3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class="line">    response = <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">coroutine_list = [func(), func()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误：coroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ]  </span></span><br><span class="line"><span class="comment"># 此处不能直接 asyncio.create_task，因为将Task立即加入到事件循环的任务列表，</span></span><br><span class="line"><span class="comment"># 但此时事件循环还未创建，所以会报错。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用asyncio.wait将列表封装为一个协程，并调用asyncio.run实现执行两个协程</span></span><br><span class="line"><span class="comment"># asyncio.wait内部会对列表中的每个协程执行ensure_future，封装为Task对象。</span></span><br><span class="line">done,pending = asyncio.run( asyncio.wait(coroutine_list) )</span><br></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例:"></a>综合案例:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Description : 抓取交易侠中的天然气期货的收盘价</span></span><br><span class="line"><span class="string">@File        : NGAS_close_price</span></span><br><span class="line"><span class="string">@Project     : aiostarload</span></span><br><span class="line"><span class="string">@Time        : 2021/11/11/0011 19:17</span></span><br><span class="line"><span class="string">@Author      : LiHouJian</span></span><br><span class="line"><span class="string">@Software    : PyCharm</span></span><br><span class="line"><span class="string">@issue       : http://120.76.207.186/jin10ts/2021issues/-/issues/707#note_114637</span></span><br><span class="line"><span class="string">@change      : </span></span><br><span class="line"><span class="string">@reason      : </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiostarlord.utils <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiostarlord.spiders <span class="keyword">import</span> BaseSpider</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>(<span class="params">BaseSpider</span>):</span></span><br><span class="line">    proxy = <span class="literal">None</span></span><br><span class="line">    _<span class="built_in">type</span> = <span class="string">&quot;快讯&quot;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.63&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.63&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time_tuple = time.localtime(time.time())</span><br><span class="line">    today = time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>, time_tuple)</span><br><span class="line"></span><br><span class="line">    n_api = <span class="string">&#x27;http://114.55.255.71:9088/index/klineData&#x27;</span></span><br><span class="line">    n_headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    n_data = json.dumps(&#123;</span><br><span class="line">        <span class="string">&quot;symbols&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;NGAS&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="number">1440</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    up_id = <span class="string">&#x27;5505&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getYesterday</span>(<span class="params">self</span>):</span></span><br><span class="line">        today = datetime.date.today()</span><br><span class="line">        oneday = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">        yesterday = today - oneday</span><br><span class="line">        yesterday = <span class="built_in">str</span>(today - oneday)</span><br><span class="line">        <span class="keyword">return</span> yesterday</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span>(<span class="params">self, url, headers, data=<span class="literal">None</span>, retry=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> session.post(</span><br><span class="line">                        url=url,</span><br><span class="line">                        headers=headers,</span><br><span class="line">                        data=data,</span><br><span class="line">                        timeout=<span class="number">10</span>,</span><br><span class="line">                ) <span class="keyword">as</span> resp:</span><br><span class="line">                    html = <span class="keyword">await</span> resp.json()</span><br><span class="line">                    <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            retry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> retry &lt; <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">await</span> self.fetch(url, headers, data, retry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.logger(<span class="string">f&quot;req_err: <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(self.history_path):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.history_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                his_data = json.load(f)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            his_data = &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> his_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_price_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        price_info = <span class="keyword">await</span> self.fetch(self.n_api, self.n_headers, data=self.n_data)</span><br><span class="line">        <span class="comment"># print(price_info)</span></span><br><span class="line">        close_time = price_info[<span class="string">&#x27;data&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;list&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;close_time&#x27;</span>].split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(close_time)</span></span><br><span class="line">        close_price = price_info[<span class="string">&#x27;data&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;list&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">        <span class="comment"># print(close_price)</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;pub_date&#x27;</span>: close_time, <span class="string">&#x27;pub_price&#x27;</span>: close_price&#125;</span><br><span class="line">        self.logger(<span class="string">&#x27;got yes-close-price successfully!&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.history_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># f.write()</span></span><br><span class="line">            json.dump(data, f)</span><br><span class="line">        <span class="keyword">return</span> close_price, close_time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge_upload</span>(<span class="params">self</span>):</span></span><br><span class="line">        history_data = self.read_data()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(history_data) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># self.logger(&#x27;Today data has uploaded yet!&#x27;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> history_data[<span class="string">&#x27;pub_date&#x27;</span>] != self.getYesterday():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">upload_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.judge_upload():</span><br><span class="line">            self.logger(<span class="string">&#x27;Data has uploaded yet!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pub_price, pub_date = <span class="keyword">await</span> self.get_price_info()</span><br><span class="line">        data_id = self.up_id</span><br><span class="line">        up_url = <span class="string">&#x27;http://09636cb288b4456385f023a597399ec6.z3c.jin10.com/admin/api/data/insert/batch&#x27;</span></span><br><span class="line">        up_headers = &#123;</span><br><span class="line">            <span class="string">&quot;sync-token&quot;</span>: <span class="string">&quot;3CD24FB0D6963F7D&quot;</span>,</span><br><span class="line">            <span class="string">&quot;x-app-id&quot;</span>: <span class="string">&quot;KYEcsGhEkPo9EMg3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;x-version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,  <span class="comment"># 正式服</span></span><br><span class="line">            <span class="comment"># &quot;x-version&quot;: &quot;1000&quot;,  # 测试服</span></span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &quot;data&quot;: [&#123;&quot;x_axis&quot;: date_info, &quot;y_axis&quot;: f&quot;&#123;end_price&#125;&quot;, &quot;status&quot;: 1&#125;]&#125;</span></span><br><span class="line">        pub_date = pub_date.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        data = &#123;<span class="string">&quot;data_set_id&quot;</span>: data_id,</span><br><span class="line">                <span class="string">&quot;data&quot;</span>: [&#123;<span class="string">&quot;x_axis&quot;</span>: pub_date, <span class="string">&quot;y_axis&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;pub_price&#125;</span>&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="number">1</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line">        upload_return_value = <span class="keyword">await</span> self.fetch(up_url, up_headers, data=json.dumps(data))</span><br><span class="line">        <span class="keyword">if</span> upload_return_value[<span class="string">&#x27;status&#x27;</span>] == <span class="number">200</span>:</span><br><span class="line">            self.logger(<span class="string">f&#x27;<span class="subst">&#123;data_id&#125;</span> up ok!&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(upload_return_value)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        self.history_path = os.path.join(self.spider_cache_dir, <span class="string">&#x27;ngas_history.json&#x27;</span>)</span><br><span class="line">        self.his_data = self.read_data()</span><br><span class="line">        <span class="keyword">await</span> self.upload_info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    s = Spider()</span><br><span class="line">    loop.run_until_complete(s.on_message(<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>loop = asyncio.get_event_loop()</code>创建一个事件循环，然后再把这个协程对象放到<code>loop.run_until_complete()</code>函数中，这个函数会把协程封装成task对象，然后在放进事件循环中去执行</p><h4 id="讲了这么多，主要记住以下三步"><a href="#讲了这么多，主要记住以下三步" class="headerlink" title="讲了这么多，主要记住以下三步:"></a>讲了这么多，主要记住以下三步:</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220124/Snipaste_2022-01-26_15-28-54.22e4znwmjtz4.webp"                      alt="Snipaste_2022-01-26_15-28-54"                ></p><p>本文参考自:<a class="link"   href="https://zhuanlan.zhihu.com/p/137057192" >https://zhuanlan.zhihu.com/p/137057192<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;协程-amp-异步编程-asyncio&quot;&gt;&lt;a href=&quot;#协程-amp-异步编程-asyncio&quot; class=&quot;headerlink&quot; title=&quot;协程&amp;amp;异步编程(asyncio)&quot;&gt;&lt;/a&gt;协程&amp;amp;异步编程(asyncio)&lt;/h3&gt;&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
