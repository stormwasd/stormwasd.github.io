<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-29T02:29:22.280Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中pip和pip3的区别</title>
    <link href="http://example.com/2021/12/29/Python%E4%B8%ADpip%E5%92%8Cpip3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/12/29/Python%E4%B8%ADpip%E5%92%8Cpip3%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-12-29T02:21:30.000Z</published>
    <updated>2021-12-29T02:29:22.280Z</updated>
    
    <content type="html"><![CDATA[<p>pip是Python的一款很好用的包管理工具，类似于node中的npm，Python有Python2和Python3的区别，那么pip也有pip和pip3的区别,大概是这样的: </p><p>相同点(虽然主要是区别，但还是有相同点的撒):</p><ol><li>pip和pip3版本不同，但二者都位于Script\目录下</li></ol><p>不同点：</p><ol><li>如果系统中只安装了Python2，那么就只能用pip</li><li>如果系统中只安装了Python3，那么既可以使用pip也可以使用pip3，二者是等价的</li><li>如果系统中同时安装了Python2和Python3，则pip默认给Python2使用，pip3默认给Python3使用</li><li>重要: 在虚拟环境中，若只存在一个Python版本，可以认为在用系统中的pip和pip3命令都是相同作用的</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pip是Python的一款很好用的包管理工具，类似于node中的npm，Python有Python2和Python3的区别，那么pip也有pip和pip3的区别,大概是这样的: &lt;/p&gt;
&lt;p&gt;相同点(虽然主要是区别，但还是有相同点的撒):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pip</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python如何升级pip,以及如何查看pip版本</title>
    <link href="http://example.com/2021/12/29/Python%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7pip,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bpip%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2021/12/29/Python%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7pip,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bpip%E7%89%88%E6%9C%AC/</id>
    <published>2021-12-29T02:04:30.000Z</published>
    <updated>2021-12-29T02:19:37.192Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候我们用pip安装包的时候会报红提示说安装失败，也有时候会出现一串黄色的警告说pip版本太低，这个时候我们可能就该考虑升级下pip，升级pip会获得更好的体验然后很多新的包也会收录在新版本的pip下，我们来看下如何升级: </p><ol><li><p>打开命令行键入以下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip -i <span class="string">&quot;https://pypi.mirrors.ustc.edu.cn/simple&quot;</span></span><br></pre></td></tr></table></figure><p>对以上命令做下解释:</p><ul><li>pip3: 如果在系统中既有Python2又有Python3那么且两个都有pip工具,pip3就是为Python3服务</li><li>-i: 指定包的源</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有些时候我们用pip安装包的时候会报红提示说安装失败，也有时候会出现一串黄色的警告说pip版本太低，这个时候我们可能就该考虑升级下pip，升级pip会获得更好的体验然后很多新的包也会收录在新版本的pip下，我们来看下如何升级: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开命令行键</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python每个版本都自带pip嘛,以及如何安装pip</title>
    <link href="http://example.com/2021/12/29/Python%E6%AF%8F%E4%B8%AA%E7%89%88%E6%9C%AC%E9%83%BD%E8%87%AA%E5%B8%A6pip%E5%98%9B,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85pip/"/>
    <id>http://example.com/2021/12/29/Python%E6%AF%8F%E4%B8%AA%E7%89%88%E6%9C%AC%E9%83%BD%E8%87%AA%E5%B8%A6pip%E5%98%9B,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85pip/</id>
    <published>2021-12-29T01:26:20.000Z</published>
    <updated>2021-12-29T01:47:55.888Z</updated>
    
    <content type="html"><![CDATA[<p>pip是Python的包管理工具，该工具提供了对Python包的查找、下载、安装、以及卸载的功能，目前如果你在Python.org下载最新版本的安装包，则是已经自带了该工具，Python2.7.9+或者Python3.4+以上版本都自带pip工具(通常跟wheel.exe在同一个目录下)</p><p>下面讲讲如果安装的时候没有自带pip工具那么如何安装pip工具：</p><ol><li>访问<a class="link"   href="https://bootstrap.pypa.io/get-pip.py%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%EF%BC%8C%E7%84%B6%E5%90%8ECtrl+S%E5%B0%86get-pip.py%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E4%BD%A0%E6%89%80%E5%AE%89%E8%A3%85%E7%9A%84Python%E7%9A%84Script%E7%9B%AE%E5%BD%95%E4%B8%8B" >https://bootstrap.pypa.io/get-pip.py这个网址，然后Ctrl+S将get-pip.py文件保存到你所安装的Python的Script目录下<i class="fas fa-external-link-alt"></i></a></li><li>然后进入Script目录，并且在该目录下进入下命令行界面</li><li>在命令行界面输入python get-pip.py，pip3工具就会自动安装</li><li>安装成功之后输入python -m pip –version，确保成功安装了pip</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pip是Python的包管理工具，该工具提供了对Python包的查找、下载、安装、以及卸载的功能，目前如果你在Python.org下载最新版本的安装包，则是已经自带了该工具，Python2.7.9+或者Python3.4+以上版本都自带pip工具(通常跟wheel.exe在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python魔法方法总览</title>
    <link href="http://example.com/2021/12/28/Python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/"/>
    <id>http://example.com/2021/12/28/Python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/</id>
    <published>2021-12-28T07:22:30.000Z</published>
    <updated>2021-12-28T07:29:11.606Z</updated>
    
    <content type="html"><![CDATA[<p>关于魔法方法: 使用魔法方法可以使Python的自由度变得更高，当不需要重写魔法方法也可以在规定的默认情况下生效，在需要重写时也可以让使用者根据自己的需求来重写部分方法来达到自己的预期。而且众所周知Python是支持面向对象的语言，其基本魔法方法就使得Python在面向对象方面做得更好。</p><p>今天在CSDN上看到了有一篇文章整理得还不错，讲述了很多魔法方法以及其作用，详情见:<a class="link"   href="https://blog.csdn.net/qq_38520096/article/details/79237593?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164067535716780261982154%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164067535716780261982154&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-79237593.first_rank_v2_pc_rank_v29&amp;utm_term=python%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95&amp;spm=1018.2226.3001.4187" >https://blog.csdn.net/qq_38520096/article/details/79237593?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164067535716780261982154%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164067535716780261982154&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-79237593.first_rank_v2_pc_rank_v29&amp;utm_term=python%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95&amp;spm=1018.2226.3001.4187<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于魔法方法: 使用魔法方法可以使Python的自由度变得更高，当不需要重写魔法方法也可以在规定的默认情况下生效，在需要重写时也可以让使用者根据自己的需求来重写部分方法来达到自己的预期。而且众所周知Python是支持面向对象的语言，其基本魔法方法就使得Python在面向对象</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python中with...as...语句的深度解刨</title>
    <link href="http://example.com/2021/12/28/Python%E4%B8%ADwith...as...%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%88%A8/"/>
    <id>http://example.com/2021/12/28/Python%E4%B8%ADwith...as...%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%88%A8/</id>
    <published>2021-12-28T03:35:51.472Z</published>
    <updated>2021-12-25T10:57:06.086Z</updated>
    
    <content type="html"><![CDATA[<p>任何一门编程语言中，文件的输入输出、数据库的连接断开等，都是很常见的资源管理操作。但资源都是有限的，在写程序时，必须保证这些资源在使用过后得到释放，不然就容易造成资源泄露，轻者使得系统处理缓慢，严重时会使系统崩溃。</p><p>例如，前面在介绍文件操作时，一直强调打开的文件最后一定要关闭，否则会程序的运行造成意想不到的隐患。但是，即便使用 close() 做好了关闭文件的操作，如果在打开文件或文件操作过程中抛出了异常，还是无法及时关闭文件。</p><p>为了更好地避免此类问题，不同的编程语言都引入了不同的机制。在 <a class="link"   href="http://c.biancheng.net/python/" >Python<i class="fas fa-external-link-alt"></i></a> 中，对应的解决方式是使用 with as 语句操作上下文管理器（context manager），它能够帮助我们自动分配并且释放资源，代码示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure><p>with…as…语句只会捕获异常而不会处理异常，代码示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若没有test.txt，会出现以下错误,程序会就此停下，说明并不会处理异常</span></span><br><span class="line"></span><br><span class="line">FileNotFoundError Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">4</span>-bf5e860f28d5&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> <span class="keyword">try</span>:</span><br><span class="line">----&gt; <span class="number">2</span>     file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">      <span class="number">3</span>     data = file.read()</span><br><span class="line">      <span class="number">4</span>     <span class="built_in">print</span>(data)</span><br><span class="line">      <span class="number">5</span> <span class="comment"># except Exception as err:</span></span><br><span class="line"></span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;test.txt&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;任何一门编程语言中，文件的输入输出、数据库的连接断开等，都是很常见的资源管理操作。但资源都是有限的，在写程序时，必须保证这些资源在使用过后得到释放，不然就容易造成资源泄露，轻者使得系统处理缓慢，严重时会使系统崩溃。&lt;/p&gt;
&lt;p&gt;例如，前面在介绍文件操作时，一直强调打开的文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python类中call函数的作用</title>
    <link href="http://example.com/2021/12/25/Python%E7%B1%BB%E4%B8%ADcall%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://example.com/2021/12/25/Python%E7%B1%BB%E4%B8%ADcall%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2021-12-25T08:37:29.000Z</published>
    <updated>2021-12-25T10:54:38.842Z</updated>
    
    <content type="html"><![CDATA[<p>本节再介绍 Python类中一个非常特殊的实例方法，即 <strong>call</strong>()。该方法的功能类似于在类中重载 () 运算符，使得类实例对象可以像调用普通函数那样，以“对象名()”的形式使用，一句话总结: call函数可以把类变成函数来调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line">Demo(<span class="string">&#x27;孙悟空&#x27;</span>)() <span class="comment"># 输出 孙悟空</span></span><br></pre></td></tr></table></figure><p>在Python中，凡是可以将()直接应用到自身并执行，都称为可调用对象，可调用对象包括自定义的函数，Python内置函数以及这里讲的类实例对象，对于可调用对象，实际上“名称()”可以理解为是“名称.<strong>call</strong>()”的简写。仍以上面程序中定义的 clangs 实例对象为例，其最后一行代码还可以改写为如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clangs.__call__(<span class="string">&quot;C语言中文网&quot;</span>,<span class="string">&quot;http://c.biancheng.net&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本节再介绍 Python类中一个非常特殊的实例方法，即 &lt;strong&gt;call&lt;/strong&gt;()。该方法的功能类似于在类中重载 () 运算符，使得类实例对象可以像调用普通函数那样，以“对象名()”的形式使用，一句话总结: call函数可以把类变成函数来调用&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
