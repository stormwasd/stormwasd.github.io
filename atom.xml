<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-30T03:19:56.160Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrapy添加User-agent的方法</title>
    <link href="http://example.com/2021/12/30/Scrapy%E6%B7%BB%E5%8A%A0User-agent%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/12/30/Scrapy%E6%B7%BB%E5%8A%A0User-agent%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2021-12-30T03:19:30.000Z</published>
    <updated>2021-12-30T03:19:56.160Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>直接在spider中指定，比如在Scrapy项目中有一个项目grasp_baidu:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graspbaidu</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;graspbaidu&#x27;</span></span><br><span class="line">    allowed_domians = [<span class="string">&#x27;www.baidu.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;http//:www.baidu.com&quot;</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        self.logger.debug(response.text)</span><br></pre></td></tr></table></figure><p>这里的start_urls会默认由scrapy自带的start_request处理，然后再交给parse函数，我们就可以重写个start_request，然后里面带个UA即可，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_request</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    url = f<span class="string">f&#x27;https://api2.fx361.com/JunJiProject/JUNJI_012_001/getSearchList?bkpagesize=14&amp;pagesize=30&amp;keyword=%E7%9B%91%E7%90%86%E5%88%9B%E6%96%B0&amp;pageIndex=<span class="subst">&#123;i&#125;</span>&amp;fragmentSize=150&#x27;</span></span><br><span class="line">    req = scrapy.Request(url, callback=self.parse, dont_filter=<span class="literal">True</span>, headers=self.headers)</span><br></pre></td></tr></table></figure></li><li><p>在配置文件settings.py中设置(一劳永逸):</p><p>将settings.py中的USER_AGENT修改一下即可</p></li><li><p>如果想修改的更加灵活，比如设置随机的Ua，那就需要如下用到一个库:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br></pre></td></tr></table></figure><p>然后需要在middlewares.py文件中添加一个RandomUserAgentMiddleware的类，如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgentMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 随机更换 user_agent</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,srawler</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RandomUserAgentMiddleware,self).__init__()</span><br><span class="line">        self.ua = UserAgent()</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls,crawler</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(crawler)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self,request,spider</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_ua</span>():</span></span><br><span class="line">        request.headers.setdefault(<span class="string">&#x27;User-Agent&#x27;</span>,self.ua.random)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>然后后我们在settings.py中调用这个中间件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;scrapydownloadertest.middlewares.RandomUserAgentMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;直接在spider中指定，比如在Scrapy项目中有一个项目grasp_baidu:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode最大回文子串</title>
    <link href="http://example.com/2021/12/30/Leetcode%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://example.com/2021/12/30/Leetcode%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2021-12-30T02:43:20.000Z</published>
    <updated>2021-12-30T02:44:01.942Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划:</p><p>对于一个字串而言，如果它是回文串，并且长度大于2，那么将它首位的两个字母去掉之后，它仍然是个回文串，根据这个思路，我们就可以用动态规划的方法解决本题，我们用s[i, j]表示字符串s的第i个到第j个字母组成的串是否为回文串:</p><p>我们可以得到只有s[i+1, j-1]是回文串，并且s的第i个和第j个字母相同时，s[i, j]才会是回文串</p><p>上文所有讨论都是建立在字串长度大于2的前提上的，我们还需要考虑动态规划中的边界条件，就是字串的长度为1或2。对于长度为1的字串，他显然是个回文串，对于长度为2的字串，只要它的两个字母相同，他就是一个回文串，因此我们就可以得到动态规划的边界条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">        max_len = <span class="number">1</span></span><br><span class="line">        begin = <span class="number">0</span></span><br><span class="line">        <span class="comment"># dp[i][j] 表示 s[i..j] 是否是回文串</span></span><br><span class="line">        dp = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[i][i] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 递推开始</span></span><br><span class="line">        <span class="comment"># 先枚举子串长度</span></span><br><span class="line">        <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 枚举左边界，左边界的上限设置可以宽松一些</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="comment"># 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span></span><br><span class="line">                j = L + i - <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果右边界越界，就可以退出当前循环</span></span><br><span class="line">                <span class="keyword">if</span> j &gt;= n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">if</span> s[i] != s[j]:</span><br><span class="line">                    dp[i][j] = <span class="literal">False</span> </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> j - i &lt; <span class="number">3</span>:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置</span></span><br><span class="line">                <span class="keyword">if</span> dp[i][j] <span class="keyword">and</span> j - i + <span class="number">1</span> &gt; max_len:</span><br><span class="line">                    max_len = j - i + <span class="number">1</span></span><br><span class="line">                    begin = i</span><br><span class="line">        <span class="keyword">return</span> s[begin:begin + max_len]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;动态规划:&lt;/p&gt;
&lt;p&gt;对于一个字串而言，如果它是回文串，并且长度大于2，那么将它首位的两个字母去掉之后，它仍然是个回文串，根据这个思路，我们就可以用动态规划的方法解决本题，我们用s[i, j]表示字符串s的第i个到第j个字母组成的串是否为回文串:&lt;/p&gt;
&lt;p&gt;我们可以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于入门Go需要知道的几个特性</title>
    <link href="http://example.com/2021/12/29/%E5%85%B3%E4%BA%8E%E5%85%A5%E9%97%A8Go%E7%9A%84%E5%87%A0%E4%B8%AA%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://example.com/2021/12/29/%E5%85%B3%E4%BA%8E%E5%85%A5%E9%97%A8Go%E7%9A%84%E5%87%A0%E4%B8%AA%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2021-12-29T10:01:33.781Z</published>
    <updated>2021-12-29T10:08:28.199Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>go的关键字比较少，只有25个，这样可以简化编码过程中的混乱和复杂度</p></li><li><p>go没有类和继承的概念，但它通过接口的概念来实现多态</p></li><li><p>go支持交叉编译，比如说可以在运行Linux系统的计算机开发能在windows上运行的应用，这是第一门完全支持UTF-8的编程语言，就连他的源码文件格式都是使用UTF-8编码</p></li><li><p>go被设计成一门应用与搭载web服务器，存储集群或类似用途的巨型中央服务器的系统编程语言，对于高性能分布式系统领域而言，go有着更高的开发效率，提供了海量并行的支持，这对于游戏服务端的开发最好不过了</p></li><li><p>尽管go编译器产生的是本地可执行代码，这些代码仍旧运行在go的runtime中，这个runtime类似java和.net所用到的虚拟机，它负责管理包括内存分配，垃圾回收，栈处理、goroutine、channel、切片，map和反射等</p></li><li><p>go fmt，这是个工具用来将你的源代码格式化成符合官方统一标准的风格</p></li><li><p>go doc，这是个工具从go程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档</p></li><li><p>go install, 这是go的包的安装工具，类似Ruby中的rubygems</p></li><li><p>go test是一个轻量级的单元测试框架</p></li><li><p>go fix用于将你的go代码从旧的发行版迁移到最新的发行版</p></li><li><p>cgo提供了对FFI(外部函数接口)的支持，能够使用go代码安全地调用c语言库，cgo会代替go编译器来产生可以组合在同一个包中的go和c代码</p></li><li><p>在go代码中使用c语言需要用<code>import&quot;C&quot;</code>来导入，一般还需要<code>import&quot;unsafe&quot;</code>,然后你可以在<code>import&quot;C&quot;</code>之前使用注释(但行或多行注释均可)的形势导入C语言库(甚至有效的C语言代码)，注意他们之间没有空格</p></li><li><p>左大括号需要放在函数定义这一行</p></li><li><p>fmt.Println和fmt.Print只差了一个空格</p><p>2021-12-29 18:08:20</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;go的关键字比较少，只有25个，这样可以简化编码过程中的混乱和复杂度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;go没有类和继承的概念，但它通过接口的概念来实现多态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;go支持交叉编译，比如说可以在运行Linux系统的计算机开发能在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/12/29/%E5%85%B3%E4%BA%8E%E5%85%A5%E9%97%A8Go%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E4%B8%AA%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2021/12/29/%E5%85%B3%E4%BA%8E%E5%85%A5%E9%97%A8Go%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E4%B8%AA%E7%89%B9%E6%80%A7/</id>
    <published>2021-12-29T09:25:22.422Z</published>
    <updated>2021-12-29T09:25:22.422Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux(ubuntu)提示command not fonund的解决</title>
    <link href="http://example.com/2021/12/29/Linux(ubuntu)%E6%8F%90%E7%A4%BAcommand%20not%20fonund%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2021/12/29/Linux(ubuntu)%E6%8F%90%E7%A4%BAcommand%20not%20fonund%E7%9A%84%E8%A7%A3%E5%86%B3/</id>
    <published>2021-12-29T09:17:20.000Z</published>
    <updated>2021-12-29T09:23:25.502Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统中，-bash: wget: comment not found是找不到命令的意思，也就是无法执行下载命令，这是因为系统太干净了，没有安装下载命令的控制器，我们给系统安装个下载命令即可:</p><p>CentOS系统:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget -y</span><br></pre></td></tr></table></figure><p>Debian/Ubuntu系统:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -get install -y wget</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux系统中，-bash: wget: comment not found是找不到命令的意思，也就是无法执行下载命令，这是因为系统太干净了，没有安装下载命令的控制器，我们给系统安装个下载命令即可:&lt;/p&gt;
&lt;p&gt;CentOS系统:&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>查看Docker是否安装成功以及使用Docker安装nginx</title>
    <link href="http://example.com/2021/12/29/%E6%9F%A5%E7%9C%8BDocker%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://example.com/2021/12/29/%E6%9F%A5%E7%9C%8BDocker%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85nginx/</id>
    <published>2021-12-29T08:54:30.000Z</published>
    <updated>2021-12-29T09:08:08.391Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>检查是否安装成功</p><p>使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>使用docker搜索nginx:</p><p>使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure></li><li><p>使用 docker安装nginx:</p><p>使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>运行nignx:</p><p>使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run nginx</span><br></pre></td></tr></table></figure></li><li><p>检查Docker是否安装成功可以使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>有client和service两部分表示docker安装启动都成功了</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;检查是否安装成功&lt;/p&gt;
&lt;p&gt;使用命令:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何在ubuntu16中安装Python</title>
    <link href="http://example.com/2021/12/29/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu16%E4%B8%AD%E5%AE%89%E8%A3%85Python/"/>
    <id>http://example.com/2021/12/29/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu16%E4%B8%AD%E5%AE%89%E8%A3%85Python/</id>
    <published>2021-12-29T08:40:00.000Z</published>
    <updated>2021-12-29T08:41:42.968Z</updated>
    
    <content type="html"><![CDATA[<p>详情见:(我这采用的是第二种方法)<a class="link"   href="https://www.runoob.com/docker/ubuntu-docker-install.html" >https://www.runoob.com/docker/ubuntu-docker-install.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;详情见:(我这采用的是第二种方法)&lt;a class=&quot;link&quot;   href=&quot;https://www.runoob.com/docker/ubuntu-docker-install.html&quot; &gt;https://www.runoob.com/docker/ubuntu-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在Docker中安装Python3.7</title>
    <link href="http://example.com/2021/12/29/%E5%9C%A8Docker%E4%B8%AD%E5%AE%89%E8%A3%85Python3.7/"/>
    <id>http://example.com/2021/12/29/%E5%9C%A8Docker%E4%B8%AD%E5%AE%89%E8%A3%85Python3.7/</id>
    <published>2021-12-29T08:25:09.941Z</published>
    <updated>2021-12-29T08:37:12.959Z</updated>
    
    <content type="html"><![CDATA[<p>详情见: </p><p><a class="link"   href="https://www.icode9.com/content-1-120863.html" >https://www.icode9.com/content-1-120863.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;详情见: &lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.icode9.com/content-1-120863.html&quot; &gt;https://www.icode9.com/content-1-120863.html&lt;i class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对Docker的认识</title>
    <link href="http://example.com/2021/12/29/%E5%AF%B9Docker%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <id>http://example.com/2021/12/29/%E5%AF%B9Docker%E7%9A%84%E8%AE%A4%E8%AF%86/</id>
    <published>2021-12-29T08:07:30.000Z</published>
    <updated>2021-12-29T08:22:42.527Z</updated>
    
    <content type="html"><![CDATA[<p>首先，Docker是个容器，使用的是宿主机的资源，因为都是Linux，所以内核资源是可以共用的，无论什么发行版，他们的内核都是Linux kernel，所以Docker才能实现，Docker其实只共用了宿主机的内核，然后我们可以在里面安装镜像，运行一个隔离于系统的独立系统，但是默认是不和宿主机发生交互的，如果要使用到宿主机的文件，就要用volumn将宿主机的文件挂载到容器中，让容器可以访问</p><p>现在windows上也可以安装Docker，其实windows上的Docker只是一个客户端，实际上还是开了一个虚拟机跑Linux，然后Linux里再跑Docker</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，Docker是个容器，使用的是宿主机的资源，因为都是Linux，所以内核资源是可以共用的，无论什么发行版，他们的内核都是Linux kernel，所以Docker才能实现，Docker其实只共用了宿主机的内核，然后我们可以在里面安装镜像，运行一个隔离于系统的独立系统，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python如何修改pip源</title>
    <link href="http://example.com/2021/12/29/Python%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9pip%E6%BA%90/"/>
    <id>http://example.com/2021/12/29/Python%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9pip%E6%BA%90/</id>
    <published>2021-12-29T02:41:30.000Z</published>
    <updated>2021-12-29T02:45:17.111Z</updated>
    
    <content type="html"><![CDATA[<p>如果每次都pip用-i指定源会比较麻烦，我们可以把某个国内源设置为默认，这样下次就会从默认源里面寻找包并且下载，来看看如何设为默认:</p><p>在命令行中键入以下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>以上以清华源的为例</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果每次都pip用-i指定源会比较麻烦，我们可以把某个国内源设置为默认，这样下次就会从默认源里面寻找包并且下载，来看看如何设为默认:&lt;/p&gt;
&lt;p&gt;在命令行中键入以下命令:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python中常用的国内pip源</title>
    <link href="http://example.com/2021/12/29/Python%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84pip%E6%BA%90/"/>
    <id>http://example.com/2021/12/29/Python%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84pip%E6%BA%90/</id>
    <published>2021-12-29T02:32:25.000Z</published>
    <updated>2021-12-29T07:00:28.997Z</updated>
    
    <content type="html"><![CDATA[<p>在我们下载包的时候，很可能由于网络原因会很卡，这个时候可能需要科学上网，但是我们又没有买节点，或者没有搭建海外服务器，这个时候我们就可以访问一些国内的pip源，这里面和国外上传的pip源几乎是一样的，也是一段时间就会更新:</p><ol><li>阿里云: <a class="link"   href="http://mirrors.aliyun.com/pypi/simple/" >http://mirrors.aliyun.com/pypi/simple/<i class="fas fa-external-link-alt"></i></a></li><li>中国科学技术大学: <a class="link"   href="https://pypi.mirrors.ustc.edu.cn/simple/" >https://pypi.mirrors.ustc.edu.cn/simple/<i class="fas fa-external-link-alt"></i></a></li><li>豆瓣: <a class="link"   href="http://pypi.douban.com/simple/" >http://pypi.douban.com/simple/<i class="fas fa-external-link-alt"></i></a></li><li>清华大学: <a class="link"   href="https://pypi.tuna.tsinghua.edu.cn/simple/" >https://pypi.tuna.tsinghua.edu.cn/simple/<i class="fas fa-external-link-alt"></i></a></li><li>华中科技大学: <a class="link"   href="http://pypi.hustunique.com/" >http://pypi.hustunique.com/<i class="fas fa-external-link-alt"></i></a></li></ol><p><strong>注意</strong>: 新版ubuntu要求使用https源</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我们下载包的时候，很可能由于网络原因会很卡，这个时候可能需要科学上网，但是我们又没有买节点，或者没有搭建海外服务器，这个时候我们就可以访问一些国内的pip源，这里面和国外上传的pip源几乎是一样的，也是一段时间就会更新:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阿里云: &lt;a clas</summary>
      
    
    
    
    <category term="Database" scheme="http://example.com/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>Python中pip和pip3的区别</title>
    <link href="http://example.com/2021/12/29/Python%E4%B8%ADpip%E5%92%8Cpip3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/12/29/Python%E4%B8%ADpip%E5%92%8Cpip3%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-12-29T02:21:30.000Z</published>
    <updated>2021-12-29T02:29:22.280Z</updated>
    
    <content type="html"><![CDATA[<p>pip是Python的一款很好用的包管理工具，类似于node中的npm，Python有Python2和Python3的区别，那么pip也有pip和pip3的区别,大概是这样的: </p><p>相同点(虽然主要是区别，但还是有相同点的撒):</p><ol><li>pip和pip3版本不同，但二者都位于Script\目录下</li></ol><p>不同点：</p><ol><li>如果系统中只安装了Python2，那么就只能用pip</li><li>如果系统中只安装了Python3，那么既可以使用pip也可以使用pip3，二者是等价的</li><li>如果系统中同时安装了Python2和Python3，则pip默认给Python2使用，pip3默认给Python3使用</li><li>重要: 在虚拟环境中，若只存在一个Python版本，可以认为在用系统中的pip和pip3命令都是相同作用的</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pip是Python的一款很好用的包管理工具，类似于node中的npm，Python有Python2和Python3的区别，那么pip也有pip和pip3的区别,大概是这样的: &lt;/p&gt;
&lt;p&gt;相同点(虽然主要是区别，但还是有相同点的撒):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pip</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python如何升级pip,以及如何查看pip版本</title>
    <link href="http://example.com/2021/12/29/Python%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7pip,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bpip%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2021/12/29/Python%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7pip,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bpip%E7%89%88%E6%9C%AC/</id>
    <published>2021-12-29T02:04:30.000Z</published>
    <updated>2021-12-29T02:19:37.192Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候我们用pip安装包的时候会报红提示说安装失败，也有时候会出现一串黄色的警告说pip版本太低，这个时候我们可能就该考虑升级下pip，升级pip会获得更好的体验然后很多新的包也会收录在新版本的pip下，我们来看下如何升级: </p><ol><li><p>打开命令行键入以下命令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip -i <span class="string">&quot;https://pypi.mirrors.ustc.edu.cn/simple&quot;</span></span><br></pre></td></tr></table></figure><p>对以上命令做下解释:</p><ul><li>pip3: 如果在系统中既有Python2又有Python3那么且两个都有pip工具,pip3就是为Python3服务</li><li>-i: 指定包的源</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有些时候我们用pip安装包的时候会报红提示说安装失败，也有时候会出现一串黄色的警告说pip版本太低，这个时候我们可能就该考虑升级下pip，升级pip会获得更好的体验然后很多新的包也会收录在新版本的pip下，我们来看下如何升级: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开命令行键</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python每个版本都自带pip嘛,以及如何安装pip</title>
    <link href="http://example.com/2021/12/29/Python%E6%AF%8F%E4%B8%AA%E7%89%88%E6%9C%AC%E9%83%BD%E8%87%AA%E5%B8%A6pip%E5%98%9B,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85pip/"/>
    <id>http://example.com/2021/12/29/Python%E6%AF%8F%E4%B8%AA%E7%89%88%E6%9C%AC%E9%83%BD%E8%87%AA%E5%B8%A6pip%E5%98%9B,%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85pip/</id>
    <published>2021-12-29T01:26:20.000Z</published>
    <updated>2021-12-29T01:47:55.888Z</updated>
    
    <content type="html"><![CDATA[<p>pip是Python的包管理工具，该工具提供了对Python包的查找、下载、安装、以及卸载的功能，目前如果你在Python.org下载最新版本的安装包，则是已经自带了该工具，Python2.7.9+或者Python3.4+以上版本都自带pip工具(通常跟wheel.exe在同一个目录下)</p><p>下面讲讲如果安装的时候没有自带pip工具那么如何安装pip工具：</p><ol><li>访问<a class="link"   href="https://bootstrap.pypa.io/get-pip.py%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%EF%BC%8C%E7%84%B6%E5%90%8ECtrl+S%E5%B0%86get-pip.py%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E4%BD%A0%E6%89%80%E5%AE%89%E8%A3%85%E7%9A%84Python%E7%9A%84Script%E7%9B%AE%E5%BD%95%E4%B8%8B" >https://bootstrap.pypa.io/get-pip.py这个网址，然后Ctrl+S将get-pip.py文件保存到你所安装的Python的Script目录下<i class="fas fa-external-link-alt"></i></a></li><li>然后进入Script目录，并且在该目录下进入下命令行界面</li><li>在命令行界面输入python get-pip.py，pip3工具就会自动安装</li><li>安装成功之后输入python -m pip –version，确保成功安装了pip</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pip是Python的包管理工具，该工具提供了对Python包的查找、下载、安装、以及卸载的功能，目前如果你在Python.org下载最新版本的安装包，则是已经自带了该工具，Python2.7.9+或者Python3.4+以上版本都自带pip工具(通常跟wheel.exe在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python魔法方法总览</title>
    <link href="http://example.com/2021/12/28/Python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/"/>
    <id>http://example.com/2021/12/28/Python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/</id>
    <published>2021-12-28T07:22:30.000Z</published>
    <updated>2021-12-28T07:29:11.606Z</updated>
    
    <content type="html"><![CDATA[<p>关于魔法方法: 使用魔法方法可以使Python的自由度变得更高，当不需要重写魔法方法也可以在规定的默认情况下生效，在需要重写时也可以让使用者根据自己的需求来重写部分方法来达到自己的预期。而且众所周知Python是支持面向对象的语言，其基本魔法方法就使得Python在面向对象方面做得更好。</p><p>今天在CSDN上看到了有一篇文章整理得还不错，讲述了很多魔法方法以及其作用，详情见:<a class="link"   href="https://blog.csdn.net/qq_38520096/article/details/79237593?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164067535716780261982154%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164067535716780261982154&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-79237593.first_rank_v2_pc_rank_v29&amp;utm_term=python%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95&amp;spm=1018.2226.3001.4187" >https://blog.csdn.net/qq_38520096/article/details/79237593?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164067535716780261982154%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164067535716780261982154&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-79237593.first_rank_v2_pc_rank_v29&amp;utm_term=python%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95&amp;spm=1018.2226.3001.4187<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于魔法方法: 使用魔法方法可以使Python的自由度变得更高，当不需要重写魔法方法也可以在规定的默认情况下生效，在需要重写时也可以让使用者根据自己的需求来重写部分方法来达到自己的预期。而且众所周知Python是支持面向对象的语言，其基本魔法方法就使得Python在面向对象</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python中with...as...语句的深度解刨</title>
    <link href="http://example.com/2021/12/28/Python%E4%B8%ADwith...as...%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%88%A8/"/>
    <id>http://example.com/2021/12/28/Python%E4%B8%ADwith...as...%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E5%88%A8/</id>
    <published>2021-12-28T03:35:51.472Z</published>
    <updated>2021-12-25T10:57:06.086Z</updated>
    
    <content type="html"><![CDATA[<p>任何一门编程语言中，文件的输入输出、数据库的连接断开等，都是很常见的资源管理操作。但资源都是有限的，在写程序时，必须保证这些资源在使用过后得到释放，不然就容易造成资源泄露，轻者使得系统处理缓慢，严重时会使系统崩溃。</p><p>例如，前面在介绍文件操作时，一直强调打开的文件最后一定要关闭，否则会程序的运行造成意想不到的隐患。但是，即便使用 close() 做好了关闭文件的操作，如果在打开文件或文件操作过程中抛出了异常，还是无法及时关闭文件。</p><p>为了更好地避免此类问题，不同的编程语言都引入了不同的机制。在 <a class="link"   href="http://c.biancheng.net/python/" >Python<i class="fas fa-external-link-alt"></i></a> 中，对应的解决方式是使用 with as 语句操作上下文管理器（context manager），它能够帮助我们自动分配并且释放资源，代码示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure><p>with…as…语句只会捕获异常而不会处理异常，代码示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若没有test.txt，会出现以下错误,程序会就此停下，说明并不会处理异常</span></span><br><span class="line"></span><br><span class="line">FileNotFoundError Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">4</span>-bf5e860f28d5&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> <span class="keyword">try</span>:</span><br><span class="line">----&gt; <span class="number">2</span>     file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">      <span class="number">3</span>     data = file.read()</span><br><span class="line">      <span class="number">4</span>     <span class="built_in">print</span>(data)</span><br><span class="line">      <span class="number">5</span> <span class="comment"># except Exception as err:</span></span><br><span class="line"></span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;test.txt&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;任何一门编程语言中，文件的输入输出、数据库的连接断开等，都是很常见的资源管理操作。但资源都是有限的，在写程序时，必须保证这些资源在使用过后得到释放，不然就容易造成资源泄露，轻者使得系统处理缓慢，严重时会使系统崩溃。&lt;/p&gt;
&lt;p&gt;例如，前面在介绍文件操作时，一直强调打开的文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python类中call函数的作用</title>
    <link href="http://example.com/2021/12/25/Python%E7%B1%BB%E4%B8%ADcall%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://example.com/2021/12/25/Python%E7%B1%BB%E4%B8%ADcall%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2021-12-25T08:37:29.000Z</published>
    <updated>2021-12-25T10:54:38.842Z</updated>
    
    <content type="html"><![CDATA[<p>本节再介绍 Python类中一个非常特殊的实例方法，即 <strong>call</strong>()。该方法的功能类似于在类中重载 () 运算符，使得类实例对象可以像调用普通函数那样，以“对象名()”的形式使用，一句话总结: call函数可以把类变成函数来调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line">Demo(<span class="string">&#x27;孙悟空&#x27;</span>)() <span class="comment"># 输出 孙悟空</span></span><br></pre></td></tr></table></figure><p>在Python中，凡是可以将()直接应用到自身并执行，都称为可调用对象，可调用对象包括自定义的函数，Python内置函数以及这里讲的类实例对象，对于可调用对象，实际上“名称()”可以理解为是“名称.<strong>call</strong>()”的简写。仍以上面程序中定义的 clangs 实例对象为例，其最后一行代码还可以改写为如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clangs.__call__(<span class="string">&quot;C语言中文网&quot;</span>,<span class="string">&quot;http://c.biancheng.net&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本节再介绍 Python类中一个非常特殊的实例方法，即 &lt;strong&gt;call&lt;/strong&gt;()。该方法的功能类似于在类中重载 () 运算符，使得类实例对象可以像调用普通函数那样，以“对象名()”的形式使用，一句话总结: call函数可以把类变成函数来调用&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于协程记录一下</title>
    <link href="http://example.com/2021/01/01/%E5%85%B3%E4%BA%8E%E5%8D%8F%E7%A8%8B%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B/"/>
    <id>http://example.com/2021/01/01/%E5%85%B3%E4%BA%8E%E5%8D%8F%E7%A8%8B%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B/</id>
    <published>2021-01-01T03:25:20.000Z</published>
    <updated>2021-12-30T06:49:31.311Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imgtu.com/i/T2737V"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2021/12/30/T2737V.png"                      alt="T2737V.png"                ></a></p><ol><li><p>什么是可迭代对象:</p><p>可迭代对象(iterable): Python中的任意对象，只要它定义了可以返回一个迭代器的<code>__iter__</code>方法，或者定义了可以支持下标索引的<code>__gititem__</code>方法这两个魔法方法，那么他就是一个可迭代对象，简单说，可迭代对象就是能提供迭代器的任意对象,常见的可迭代对象有:字符串，列表，字典，元组等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable, Iterator, Generator</span><br><span class="line"></span><br><span class="line">str_1 = <span class="string">&#x27;sixkery&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字符串是否是可迭代对象：&#x27;</span>,<span class="built_in">isinstance</span>(str_1,Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字符串是否是迭代器：&#x27;</span>,<span class="built_in">isinstance</span>(str_1,Iterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字符串是否是生成器：&#x27;</span>,<span class="built_in">isinstance</span>(str_1,Generator))</span><br><span class="line"></span><br><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列表是否是可迭代对象：&#x27;</span>,<span class="built_in">isinstance</span>(list_1,Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列表是否是迭代器：&#x27;</span>,<span class="built_in">isinstance</span>(list_1,Iterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列表是否是生成器：&#x27;</span>,<span class="built_in">isinstance</span>(list_1,Generator))</span><br><span class="line"></span><br><span class="line">dict_1 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小沐&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字典是否是可迭代对象：&#x27;</span>,<span class="built_in">isinstance</span>(dict_1,Iterable))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字典是否是迭代器：&#x27;</span>,<span class="built_in">isinstance</span>(dict_1,Iterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字典是否是生成器：&#x27;</span>,<span class="built_in">isinstance</span>(dict_1,Generator))</span><br></pre></td></tr></table></figure><p>以上都是可迭代对象，可以使用方法dir()查看是否有<code>__iter__</code>来判断一个变量是否是可迭代对象，<strong>可迭代对象都可以使用for循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;__iter__&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">list</span>()):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list是可迭代对象&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>什么是迭代器</p><p>迭代器，是在可迭代对象的基础上实现的，创建一个迭代器，首先要用一个可迭代对象:</p><p>用iter()方法即可把可迭代对象转化为迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_1 = <span class="string">&#x27;asdfg&#x27;</span> <span class="comment"># 字符串，是可迭代对象</span></span><br><span class="line">alterator = <span class="built_in">iter</span>(str_1) <span class="comment"># 通过方法 iter() 把字符串变成迭代器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否成功转换成迭代器:&#x27;</span>,<span class="built_in">isinstance</span>(alterator,Iterator))</span><br></pre></td></tr></table></figure><p>迭代器比可迭代对象多了一个函数next(),我们可以用它来获取元素，for循环也是支持的,这是因为在迭代器内部实现了<code>__next__</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">next</span>(alterator)</span><br><span class="line"><span class="comment"># &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alterator:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></li><li><p>生成器:</p><p>之所以引入生成器，是为了实现一个在计算下一个值时不需要浪费空间的结构，通常我们使用列表，即使很大一个列表在一开始也得生成，如果能需要使用的时候自动生成下一个那就节省了很大空间</p><p>之前说的迭代器，是在可迭代对象的基础上加了一个next方法，而生成器是在迭代器的基础上，再实现了yield,所以生成器也可以使用for和next()</p><p>yield是啥呢?它相当于我们函数中的return，在每次next(),或者for循环便利的时候，都会在yield的地方将新的值返回回去，并在这里阻塞，等待下一次的调用，正是有了这个机制，才使得生成器在Python中大放异彩，实现节省内存，实现异步编程。</p><ul><li><p>将列表生成式的中括号改成小括号就是一个生成器啦：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">next</span>(a)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">a = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否是生成器：&#x27;</span>,<span class="built_in">isinstance</span>(a,Generator))</span><br><span class="line"><span class="comment"># 是否是生成器： True</span></span><br></pre></td></tr></table></figure></li><li><p>实现生成器函数(yield)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_gen</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    gen = my_gen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是否是生成器：&#x27;</span>,<span class="built_in">isinstance</span>(gen,Generator))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> gen:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 是否是生成器： True</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>生成器的执行状态，生成器在其生命周期中，会有以下四个状态:</p><ul><li>GEN_CREATED: 等待开始执行</li><li>GEN_RUNNING: 解释器正在执行(只有在多线程应用中才能看到这个状态)</li><li>GEN_SUSPENDED: 在yield表达式处暂停</li><li>GEN_CLOSED: 执行结束</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> getgeneratorstate</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_gen</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    gen = my_gen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(getgeneratorstate(gen)) <span class="comment"># 等待开始执行</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line">    <span class="built_in">print</span>(getgeneratorstate(gen)) <span class="comment"># 在 yield 表达式出暂停</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line">    gen.close() <span class="comment"># 手动关闭结束生成器</span></span><br><span class="line">    <span class="built_in">print</span>(getgeneratorstate(gen)) <span class="comment"># 执行结束</span></span><br><span class="line"></span><br><span class="line">GEN_CREATED</span><br><span class="line"><span class="number">0</span></span><br><span class="line">GEN_SUSPENDED</span><br><span class="line"><span class="number">1</span></span><br><span class="line">GEN_CLOSED</span><br></pre></td></tr></table></figure></li><li><p>生成器的异常处理</p><p>在生成器工作中，若生成器不满足生成元素的条件，获取没有元素生产了，就会抛出异常(Stopiteration)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">next</span>(a)</span><br><span class="line"><span class="built_in">next</span>(a)</span><br><span class="line"><span class="built_in">next</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line"></span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">50</span>-0f82892640d1&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">2</span> <span class="built_in">next</span>(a)</span><br><span class="line">      <span class="number">3</span> <span class="built_in">next</span>(a)</span><br><span class="line">----&gt; <span class="number">4</span> <span class="built_in">next</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StopIteration: </span><br></pre></td></tr></table></figure><p>所以在定义生成器时，要考虑这个问题，在不满足生产元素条件的时候，抛出异常:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_gen</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">raise</span> StopIteration</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    gen = my_gen(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">next</span>(gen)</span><br><span class="line">    <span class="built_in">next</span>(gen)</span><br><span class="line">    <span class="built_in">next</span>(gen)</span><br></pre></td></tr></table></figure><p>不过如果用for循环遍历生成器就不会抛出异常</p></li></ul></li><li><p>从生成器过渡到协程: yield</p><p>通过上面的介绍，我们知道了生成器为我们引入了暂停函数执行(yield)的功能，当我们有了暂停函数的功能之后，就想能不能在生成器暂停的时候向生成器发送一点东西(gen.send(None)),这种机制催生了携程的诞生</p><p><strong>协程: 协程是为非抢占式多任务产生子程序组件的，协程允许不同入口点在不同位置暂停或开始执行任务</strong></p><p>从本质上来看，协程并不属于某种语言的概念，而是编程模型上的概念</p><p>协程和线程一样都能交叉串行执行任务，但是线程频繁加锁解锁，线程切换。协程只要在yield暂停处把任务交到别处执行，协程还是很有发展潜力的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        jump = <span class="keyword">yield</span> a</span><br><span class="line">        <span class="keyword">if</span> jump <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            jump = <span class="number">1</span></span><br><span class="line">        a += jump</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    itr = fn(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(itr))</span><br><span class="line">    <span class="built_in">print</span>(itr.send(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>yield a 是将a返回出去</p><p>jump = yield 是接收传递进来的值</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/T2737V&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                </summary>
      
    
    
    
    
  </entry>
  
</feed>
