<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-17T06:24:54.062Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐一个关于Go文档以及面试题的网站--来自Go学习群</title>
    <link href="http://example.com/2022/01/18/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8EGo%E6%96%87%E6%A1%A3%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E7%BD%91%E7%AB%99--%E6%9D%A5%E8%87%AAGo%E5%AD%A6%E4%B9%A0%E7%BE%A4/"/>
    <id>http://example.com/2022/01/18/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8EGo%E6%96%87%E6%A1%A3%E4%BB%A5%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E7%BD%91%E7%AB%99--%E6%9D%A5%E8%87%AAGo%E5%AD%A6%E4%B9%A0%E7%BE%A4/</id>
    <published>2022-01-18T09:20:30.000Z</published>
    <updated>2022-01-17T06:24:54.062Z</updated>
    
    <content type="html"><![CDATA[<p>今天在Go语言中文网的QQ群中发现了一个分享Go文档以及面试题的网站，感觉挺不错的，<a class="link"   href="https://www.topgoer.cn/" >点击跳转<i class="fas fa-external-link-alt"></i></a>:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220117/Snipaste_2022-01-17_14-22-11.4q114603jaw0.webp"                      alt="Snipaste_2022-01-17_14-22-11"                ></p><p>关于Go面试题，<a class="link"   href="https://www.topgoer.cn/docs/gomianshiti/mianshiti" >点这里直达<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在Go语言中文网的QQ群中发现了一个分享Go文档以及面试题的网站，感觉挺不错的，&lt;a class=&quot;link&quot;   href=&quot;https://www.topgoer.cn/&quot; &gt;点击跳转&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python获取本机IP、Mac地址和计算机名</title>
    <link href="http://example.com/2022/01/18/Python%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP%E3%80%81mac%E5%9C%B0%E5%9D%80%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%90%8D/"/>
    <id>http://example.com/2022/01/18/Python%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIP%E3%80%81mac%E5%9C%B0%E5%9D%80%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%90%8D/</id>
    <published>2022-01-18T01:06:30.000Z</published>
    <updated>2022-01-18T01:17:37.714Z</updated>
    
    <content type="html"><![CDATA[<p>获得本机Mac地址:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mac_address</span>():</span> </span><br><span class="line">    mac=uuid.UUID(<span class="built_in">int</span> = uuid.getnode()).<span class="built_in">hex</span>[-<span class="number">12</span>:] </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;:&quot;</span>.join([mac[e:e+<span class="number">2</span>] <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>)])</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220117/Snipaste_2022-01-18_09-12-58.4d2sxwbsox00.webp"                      alt="Snipaste_2022-01-18_09-12-58"                ></p><p>获得本机IP(内网IP)和计算机名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#获取本机电脑名</span></span><br><span class="line">myname = socket.getfqdn(socket.gethostname())</span><br><span class="line"><span class="comment">#获取本机ip</span></span><br><span class="line">myaddr = socket.gethostbyname(myname)</span><br><span class="line"><span class="built_in">print</span> (myname)</span><br><span class="line"><span class="built_in">print</span> (myaddr)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220117/Snipaste_2022-01-18_09-16-43.24q861f1g5fk.webp"                      alt="Snipaste_2022-01-18_09-16-43"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;获得本机Mac地址:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python爬虫框架Scrapy的运行流程详解</title>
    <link href="http://example.com/2022/01/17/Python%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6Scrapy%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/01/17/Python%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6Scrapy%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-01-17T07:29:30.000Z</published>
    <updated>2022-01-17T08:03:19.290Z</updated>
    
    <content type="html"><![CDATA[<p>首先来看看Scrapy框架的介绍:</p><p>Scrapy是用纯Python语言实现的一个为爬取网站数据、提取结构性数据而编写的应用框架，Scrapy使用了Twisted异步网络框架来处理网络通信，可以加快我们的下载速度，不用自己去实现异步框架，并且包含了各种中间件接口，可以灵活地实现各种需求；Scrapy可以应用在包括数据挖掘、信息处理或存储历史数据等一系列的程序中，其最初是为页面抓取(更确切地说是网络抓取)而设计的，也可以应用于获取API所返回的数据(例如Amazon Associates Web Services)或者通用的网络爬虫</p><p>Scrapy框架的安装方法:</p><ol><li><p>通过anaconda安装: 通过anaconda→environments→最右边界面的第一个选项all，在搜索框里搜索scrapy→选择安装</p></li><li><p>在terminal或者cmd中使用pip安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure></li></ol><p>Scrapy内部实现了包括并发请求、免登录、URL去重等很多复杂操作，用户不需要明白Scrapy内部具体的爬取策略，只需要根据自己的需求去编写小部分的代码，就能抓取到所需要的数据</p><p>Scrapy框架整体流程图如下所示:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220117/Snipaste_2022-01-17_15-35-02.5sgg7iybmc00.webp"                      alt="Snipaste_2022-01-17_15-35-02"                ></p><p>上图所表达的大致意思为: 首先从初始URL开始，<strong>调度器</strong>(Scheduler)会将其交给<strong>下载器</strong>(Downloader)，下载器向<strong>网络服务器</strong>(Internet)发送服务请求以进行下载，得到响应后将下载的数据交给<strong>爬虫</strong>(Spider，爬虫会对网页进行分析，分析出来的结果有两种：一种是需要进一步抓取的链接，这些链接会被传回调度器；另一种是需要保存的数据，它们则被送到<strong>项目管道</strong>（Item Pipeline），Item会定义数据格式，最后由Pipeline对数据进行清洗、去重等处理，继而存储到文件或数据库，这里面的<strong>引擎是负责统筹协调</strong></p><p>Scrapy框架内组件及其作用:</p><ul><li><strong>爬虫中间件</strong>(Spider Middleware):位于Scrapy引擎和爬虫之间的框架，主要用于处理爬虫的请求输入和响应输出</li><li><strong>调度器中间件</strong>(Scheduler Middleware): 位于Scrapy引擎和调度器之间的框架，主要用于处理从Scrapy引擎发送到调度器的请求和响应</li><li><strong>调度器：</strong>用来接收引擎发过来的请求，压入队列中，并在引擎再次请求的时候返回。它就像是一个URL的优先队列，由它来决定下一个要抓取的网址是什么，同时在这里会去除重复的网址</li><li><strong>下载器中间件</strong>(Downloader Middleware): 位于Scrapy引擎和下载器之间的框架，主要用于处理Scrapy引擎与下载器之间的请求及响应; 代理IP和用户代理可以在这里设置</li><li><strong>下载器：</strong>用于下载网页内容，并将网页内容返回给爬虫</li><li><strong>Scrapy引擎</strong>(ScrapyEngine): 用来控制整个系统的数据处理流程，并进行事务处理的触发</li><li>爬虫主要是干活的，用于从特定网页中提取自己需要的信息，即所谓的项目(又称实体); 也可以从中提取URL，让Scrapy继续爬取下一个页面</li><li><strong>项目管道：</strong>负责处理爬虫从网页中爬取的项目，主要的功能就是持久化项目(保存数据)、验证项目的有效性、清除不需要的信息。当页面被爬虫解析后，将被送到项目管道，并经过几个特定的次序来处理其数据</li></ul><p>Scrapy框架运行流程如下:</p><ol><li>引擎从调度器中取出一个URL用于接下来的抓取</li><li>引擎把URL封装成一个请求（request）传给下载器</li><li>下载器把资源下载下来，并封装成一个响应(response)</li><li>爬虫解析响应</li><li>解析出的是项目，则交给项目管道进行进一步的处理(持久化存储)</li><li>解析出的是链接URL，则把URL交给调度器等待下一步的抓取</li></ol><p>Scrapy框架数据流向:</p><p>Scrapy数据流是由执行流程的核心引擎来控制的，如下图所示:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220117/Snipaste_2022-01-17_15-49-23.t7exlb838v4.webp"                      alt="Snipaste_2022-01-17_15-49-23"                ></p><ol><li>引擎打开网站，找到处理该网站的爬虫并要求该爬虫请求第一个要爬取的URL(入口URL)</li><li>引擎从爬虫中获取到第一个要爬取的URL，并在调度器中以请求调度</li><li>引擎向调度器请求下一个要爬取的URL</li><li>调度器返回下一个要爬取的URL给引擎，引擎通过下载中间件转给下载器</li><li>一旦页面下载完毕，下载器便会生成一个该页面的响应，并通过下载器中间件将其发送给引擎</li><li>引擎从下载器中接收到响应并通过爬虫中间件发送给爬虫处理</li><li>爬虫处理响应，并返回爬取到的项目及新的请求给引擎</li><li>引擎将爬虫爬取到的项目传给项目管道，将爬虫返回的请求传给调度器</li><li>从第2步重复直到调度器中没有更多的请求，引擎便会关闭该网站</li></ol><p>Scrapy框架中的Selector</p><p>当我们取得了网页的响应之后，最关键的就是如何从繁杂的网页中把我们需要的数据提取出来，Python中常用以下模块来处理HTTP文本解析问题</p><ul><li><strong>BeautifulSoup</strong>: 作为程序员间非常流行的网页分析库，它通常基于HTML代码的结构来构造一个Python对象，对不良标记的处理也非常合理，但它有一个缺点，就是“慢”</li><li><strong>lxml</strong>: 一个基于ElementTree的Python化的XML解析库</li></ul><p>我们可以在Scrapy中使用任意熟悉的网页数据提取工具，如上面的两种，但是，Scrapy本身也为我们提供了一套提取数据的机制，我们称之为选择器Selector，它通过特定的XPath或者CSS表达式来选择HTML文件中的某个部分</p><p><strong>XPath</strong>是一门用来在XML文件中选择节点的语言，也可以用在HTML上。<strong>CSS</strong>是一门将HTML文档样式化的语言。选择器由它定义，并与特定的HTML元素的样式相关连</p><p>Selector是基于lxml来构建的，支持XPath选择器、CSS选择器以及正则表达式，功能全面、解析速度快且和准确度高</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先来看看Scrapy框架的介绍:&lt;/p&gt;
&lt;p&gt;Scrapy是用纯Python语言实现的一个为爬取网站数据、提取结构性数据而编写的应用框架，Scrapy使用了Twisted异步网络框架来处理网络通信，可以加快我们的下载速度，不用自己去实现异步框架，并且包含了各种中间件接口</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python装饰器详解</title>
    <link href="http://example.com/2022/01/17/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/01/17/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-01-17T03:19:30.000Z</published>
    <updated>2022-01-17T07:14:58.562Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们看看什么是装饰器:</p><p>Python装饰器(decorator)就是用于拓展原来函数功能的一种函数，目的是在不改变原函数名(或类名)的情况下，给函数增加新的功能；<strong>在代码运行期间动态增加功能的方式，称之为”装饰器”</strong></p><p>这个函数的特殊之处在于它的返回值也是一个函数，这个函数是内嵌原函数的函数</p><p>一般而言，我们要想拓展原来函数代码以达到扩展功能的目的，最直接的办法就是侵入代码里面修改，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure><p>上面是我们最原始的一个函数，打印hello等待1秒钟然后再打印world，然后我们要增加一个功能(记录这个函数执行的总时间)，那最简单的做法就是改动原来的代码，改动之后是这样的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line"></span><br><span class="line">    execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;time is %d ms&quot;</span> %execution_time)</span><br></pre></td></tr></table></figure><p>但是实际工作中，有些时候核心代码并不可以直接去改，所以在不改动原代码的情况下，我们可以再定义一个函数(就比如下面的deco函数)去包裹另外一个函数(f函数)，从而在deco函数中增加功能(嵌入了计时功能)，就比如下面的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    f()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;time is %d ms&quot;</span> %execution_time)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    deco(f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f.__name__ is&quot;</span>,f.__name__)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>这确实实现了不修改原来函数代码的情况下给函数增加功能，调用deco函数就会执行f函数，然后执行实现新增功能的代码，既然要在deco函数中执行f函数，那就需要把f函数作为参数传入deco函数中，上面的代码实际上传的是f函数的地址，但一个函数名就指代着这个函数在内存中存放的地址，但是这看来表面调用的还是deco函数，既然要装饰那就是修饰函数并就调用这个函数，所以接下来我们试着用装饰器来实现以上计时功能，先来看看装饰器最原始的面貌:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time is %d ms&quot;</span> %execution_time )</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f()</span><br></pre></td></tr></table></figure><p>这里的deco函数就是最原始的装饰器，它的参数是一个函数，然后返回值也是一个函数；其中作为参数的这个函数f()就在返回函数wrapper()的内部执行。然后在函数f()前面加上@deco；f()函数就相当于被注入了计时功能，现在只要调用f()，它就已经变身为“新的功能更多”的函数了，把<code>@deco</code>放在f()函数前，相当于执行了语句:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = deco(f)</span><br></pre></td></tr></table></figure><p><strong>现在同名的f变量指向了新的函数，于是调用<code>f()</code>将执行新函数，即在<code>deco()</code>函数中返回的<code>wrapper()</code>函数</strong></p><p>扩展1: 带有固定参数的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">a,b</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f(a,b)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time is %d ms&quot;</span> % execution_time)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;be on&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result is %d&quot;</span> %(a+b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>扩展1: 无固定参数的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time_ = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time is %d ms&quot;</span> %execution_time)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;be on&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result is %d&quot;</span> %(a+b))</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;be on&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result is %d&quot;</span> %(a+b+c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f2(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    f(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>扩展3: 使用多个装饰器，装饰一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco01</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is deco01&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time is %d ms&quot;</span> % execution_time)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deco01 end here&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco02</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is deco02&quot;</span>)</span><br><span class="line">        f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deco02 end here&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco01</span></span><br><span class="line"><span class="meta">@deco02</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;be on&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result is %d&quot;</span> %(a+b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>装饰器的调用顺序:</p><p>像上面的代码中，装饰器是可以叠加使用的，那么使用装饰器以后代码是啥顺序呢?</p><p>对于Python中的”@”语法糖，装饰器的调用顺序与使用”@”语法糖的顺序相反，在上面的例子中，”f(3, 4) = deco01(deco02(f(3, 4)))”</p><p>Python内置装饰器:</p><p>在Python中有三个内置的装饰器，都是跟class相关的：staticmethod、classmethod 和property</p><ul><li><p>staticmethod 是类静态方法，其跟成员方法的区别是没有 self 参数，并且可以在类不进行实例化的情况下调用</p></li><li><p>classmethod 与成员方法的区别在于所接收的第一个参数不是 self(指向当前类实例，也就是指向当前对象)，而是cls(指向当前类)</p></li><li><p>property 是属性的意思，通过 @property 装饰器，可以直接通过方法名来访问方法，不需要在方法名后添加一对”()”小括号</p><p>@property的语法格式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">    代码块</span></span><br></pre></td></tr></table></figure><p>例如，定义一个矩形类，并定义用 @property 修饰的方法操作类中的 area 私有属性，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,area</span>):</span></span><br><span class="line">        self.__area = area</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__area</span><br><span class="line">rect = Rect(<span class="number">30</span>)</span><br><span class="line"><span class="comment">#直接通过方法名来访问 area 方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矩形的面积是：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">矩形的面积为： <span class="number">30</span></span><br></pre></td></tr></table></figure><p>上面程序中，使用 ＠property 修饰了 <code>area() </code>方法，这样就使得该方法变成了 area 属性的 getter 方法。需要注意的是，如果类中只包含该方法，那么 area 属性将是一个只读属性，也就是说，在使用 Rect 类时，无法对 area 属性重新赋值，即运行如下代码会报错:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rect.area = <span class="number">90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改后的面积：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure><p>报错信息为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\Users\mengma\Desktop\1.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    rect.area = <span class="number">90</span></span><br><span class="line">AttributeError: can<span class="string">&#x27;t set attribute</span></span><br></pre></td></tr></table></figure><p>而要想实现修改 area 属性的值，还需要为 area 属性添加 setter 方法，就需要用到 setter 装饰器，它的语法格式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@方法名.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名(<span class="params">self, value</span>):</span></span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>例如，为 Rect 类中的 area 方法添加 setter 方法，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@area.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    self.__area = value</span><br></pre></td></tr></table></figure><p>再次运行如下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rect.area = <span class="number">90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改后的面积：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改后的面积: <span class="number">90</span></span><br></pre></td></tr></table></figure><p>这样，area 属性就有了 getter 和 setter 方法，该属性就变成了具有读写功能的属性</p><p>除此之外，还可以使用 deleter 装饰器来删除指定属性，其语法格式为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@方法名.deleter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名(<span class="params">self</span>):</span></span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>例如，在 Rect 类中，给 area() 方法添加 deleter 方法，实现代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@area.deleter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.__area = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后运行如下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> rect.area</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;删除后的area值为：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除后的area值为： <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><ul><li> 案例: 不使用property装饰器实现分页</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">#不使用property装饰器实现分页</span></span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> li=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"> <span class="number">4</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>:</span></span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value</span>):</span></span><br><span class="line"> <span class="number">6</span>         <span class="keyword">if</span> value.isdigit():</span><br><span class="line"> <span class="number">7</span>             self.page=<span class="built_in">int</span>(value)</span><br><span class="line"> <span class="number">8</span>         <span class="keyword">else</span>:</span><br><span class="line"> <span class="number">9</span>             self.page=<span class="number">1</span>       </span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="number">11</span>         <span class="keyword">return</span> (self.page-<span class="number">1</span>)*<span class="number">10</span></span><br><span class="line"><span class="number">12</span>     <span class="function"><span class="keyword">def</span> <span class="title">end</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="number">13</span>         <span class="keyword">return</span> self.page*<span class="number">10</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="number">15</span>    p=<span class="built_in">input</span>(<span class="string">&quot;请输入你要查看的页码(退出请按0):&quot;</span>)</span><br><span class="line"><span class="number">16</span>    <span class="keyword">if</span> <span class="keyword">not</span>(p.isdigit()):</span><br><span class="line"><span class="number">17</span>        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入&quot;</span>)</span><br><span class="line"><span class="number">18</span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="number">19</span>        <span class="keyword">if</span> <span class="built_in">int</span>(p)==<span class="number">0</span>:</span><br><span class="line"><span class="number">20</span>            <span class="keyword">break</span></span><br><span class="line"><span class="number">21</span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="number">22</span>            pageBean=PageBean(p)</span><br><span class="line"><span class="number">23</span>            liP=li[pageBean.start():pageBean.end()]</span><br><span class="line"><span class="number">24</span>            <span class="built_in">print</span>(liP)</span><br></pre></td></tr></table></figure><ul><li><p>案例: 使用property装饰器实现分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">#利用property装饰器实现分页</span></span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> li=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"> <span class="number">4</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>:</span></span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value</span>):</span></span><br><span class="line"> <span class="number">6</span>         <span class="keyword">if</span> value.isdigit():</span><br><span class="line"> <span class="number">7</span>             self.page=<span class="built_in">int</span>(value)</span><br><span class="line"> <span class="number">8</span>         <span class="keyword">else</span>:</span><br><span class="line"> <span class="number">9</span>             self.page=<span class="number">1</span></span><br><span class="line"><span class="number">10</span>     <span class="comment">#使用property装饰器进行装饰</span></span><br><span class="line"><span class="number">11</span>     @<span class="built_in">property</span> </span><br><span class="line"><span class="number">12</span>     <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="number">13</span>         <span class="keyword">return</span> (self.page-<span class="number">1</span>)*<span class="number">10</span></span><br><span class="line"><span class="number">14</span>     @<span class="built_in">property</span></span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">def</span> <span class="title">end</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="number">16</span>         <span class="keyword">return</span> self.page*<span class="number">10</span></span><br><span class="line"><span class="number">17</span> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="number">18</span>    p=<span class="built_in">input</span>(<span class="string">&quot;请输入你要查看的页码(退出请按0):&quot;</span>)</span><br><span class="line"><span class="number">19</span>    <span class="keyword">if</span> <span class="keyword">not</span>(p.isdigit()):</span><br><span class="line"><span class="number">20</span>        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入&quot;</span>)</span><br><span class="line"><span class="number">21</span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="number">22</span>        <span class="keyword">if</span> <span class="built_in">int</span>(p)==<span class="number">0</span>:</span><br><span class="line"><span class="number">23</span>            <span class="keyword">break</span></span><br><span class="line"><span class="number">24</span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="number">25</span>            pageBean=PageBean(p)</span><br><span class="line"><span class="number">26</span>            liP=li[pageBean.start:pageBean.end]<span class="comment">#此处调用不用括号，形式上和属性一直</span></span><br><span class="line"><span class="number">27</span>            <span class="built_in">print</span>(liP)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先我们看看什么是装饰器:&lt;/p&gt;
&lt;p&gt;Python装饰器(decorator)就是用于拓展原来函数功能的一种函数，目的是在不改变原函数名(或类名)的情况下，给函数增加新的功能；&lt;strong&gt;在代码运行期间动态增加功能的方式，称之为”装饰器”&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sublime如何添加Gobuildsystem并运行Go代码</title>
    <link href="http://example.com/2022/01/17/Sublime%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0Gobuildsystem%E5%B9%B6%E8%BF%90%E8%A1%8CGo%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/01/17/Sublime%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0Gobuildsystem%E5%B9%B6%E8%BF%90%E8%A1%8CGo%E4%BB%A3%E7%A0%81/</id>
    <published>2022-01-17T01:21:30.000Z</published>
    <updated>2022-01-17T01:32:09.817Z</updated>
    
    <content type="html"><![CDATA[<p>今天早上来到公司，这边电脑是没有Goland编辑器的，这边有Sublime然后就想着在Sublime上写示例代码，下面来讲讲如何在Sublime上运行Go代码:</p><p>首先你需要安装Go的开发环境，并添加到环境变量，一般在安装的时候会默认添加，然后就看以下操作了:</p><ol><li><p>打开Sublime然后点击tools再点击Build System再点击New Build System:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220117/Snipaste_2022-01-17_09-25-44.15upn81oyxr4.webp"                      alt="Snipaste_2022-01-17_09-25-44"                ></p></li><li><p>然后复制以下代码并保存(可以命名为go-sublime-build):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;cmd&quot;: [&quot;go&quot;, &quot;run&quot;, &quot;$file_name&quot;], </span><br><span class="line">    &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(…*?)\&quot;, line ([0-9]*)&quot;, </span><br><span class="line">    &quot;working_dir&quot;: &quot;$file_path&quot;, </span><br><span class="line">    &quot;selector&quot;: &quot;source.go&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：文件直接保存在默认打开的位置，不要另存到新的文件夹</p></li><li><p>然后便可以运行Go代码啦(CTRL+B运行)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220117/Snipaste_2022-01-17_09-30-30.5mup3yw2pxs0.webp"                      alt="Snipaste_2022-01-17_09-30-30"                ></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天早上来到公司，这边电脑是没有Goland编辑器的，这边有Sublime然后就想着在Sublime上写示例代码，下面来讲讲如何在Sublime上运行Go代码:&lt;/p&gt;
&lt;p&gt;首先你需要安装Go的开发环境，并添加到环境变量，一般在安装的时候会默认添加，然后就看以下操作了:&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于Go的学习资讯宝藏站点--Go语言中文网</title>
    <link href="http://example.com/2022/01/16/%E5%85%B3%E4%BA%8EGo%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E8%AE%AF%E5%AE%9D%E8%97%8F%E7%AB%99%E7%82%B9--Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%96%87%E7%BD%91/"/>
    <id>http://example.com/2022/01/16/%E5%85%B3%E4%BA%8EGo%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E8%AE%AF%E5%AE%9D%E8%97%8F%E7%AB%99%E7%82%B9--Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%96%87%E7%BD%91/</id>
    <published>2022-01-16T15:57:20.000Z</published>
    <updated>2022-01-16T16:00:31.462Z</updated>
    
    <content type="html"><![CDATA[<p>今天在查资料的时候偶然访问到这个站点，发现挺不错的，有各种优质的文章和技术分享，项目以及图书，还有关于Go的官方文档，<a class="link"   href="https://studygolang.com/" >点击跳转<i class="fas fa-external-link-alt"></i></a></p><p><a href="https://imgtu.com/i/7NXXZV"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/01/16/7NXXZV.png"                      alt="7NXXZV.png"                ></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在查资料的时候偶然访问到这个站点，发现挺不错的，有各种优质的文章和技术分享，项目以及图书，还有关于Go的官方文档，&lt;a class=&quot;link&quot;   href=&quot;https://studygolang.com/&quot; &gt;点击跳转&lt;i class=&quot;fas fa-extern</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSDN的社区板块--一块宝地</title>
    <link href="http://example.com/2022/01/16/CSDN%E7%9A%84%E7%A4%BE%E5%8C%BA%E6%9D%BF%E5%9D%97--%E4%B8%80%E5%9D%97%E5%AE%9D%E5%9C%B0/"/>
    <id>http://example.com/2022/01/16/CSDN%E7%9A%84%E7%A4%BE%E5%8C%BA%E6%9D%BF%E5%9D%97--%E4%B8%80%E5%9D%97%E5%AE%9D%E5%9C%B0/</id>
    <published>2022-01-16T15:48:15.000Z</published>
    <updated>2022-01-16T15:49:49.383Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN的社区板块真是一块宝地，<a class="link"   href="https://bbs.csdn.net/" >点击跳转<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CSDN的社区板块真是一块宝地，&lt;a class=&quot;link&quot;   href=&quot;https://bbs.csdn.net/&quot; &gt;点击跳转&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>推荐一个面试题分享网站--来自鱼皮</title>
    <link href="http://example.com/2022/01/16/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E4%BA%AB%E7%BD%91%E7%AB%99--%E6%9D%A5%E8%87%AA%E9%B1%BC%E7%9A%AE/"/>
    <id>http://example.com/2022/01/16/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E4%BA%AB%E7%BD%91%E7%AB%99--%E6%9D%A5%E8%87%AA%E9%B1%BC%E7%9A%AE/</id>
    <published>2022-01-16T12:54:50.000Z</published>
    <updated>2022-01-16T12:57:17.964Z</updated>
    
    <content type="html"><![CDATA[<p>鱼皮大神新上线了一个面试题分享网站，感觉挺有意思的，<a class="link"   href="https://www.mianshiya.com/" >点击跳转<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鱼皮大神新上线了一个面试题分享网站，感觉挺有意思的，&lt;a class=&quot;link&quot;   href=&quot;https://www.mianshiya.com/&quot; &gt;点击跳转&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GoLand编辑器运行Go代码报错-package XXX is not in GOROOT (XXXXGosrcXXX)的解决方法</title>
    <link href="http://example.com/2022/01/16/GoLand%E7%BC%96%E8%BE%91%E5%99%A8%E8%BF%90%E8%A1%8CGo%E4%BB%A3%E7%A0%81%E6%8A%A5%E9%94%99-package%20XXX%20is%20not%20in%20GOROOT%20(XXXXGosrcXXX)%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/01/16/GoLand%E7%BC%96%E8%BE%91%E5%99%A8%E8%BF%90%E8%A1%8CGo%E4%BB%A3%E7%A0%81%E6%8A%A5%E9%94%99-package%20XXX%20is%20not%20in%20GOROOT%20(XXXXGosrcXXX)%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-01-16T10:47:18.000Z</published>
    <updated>2022-01-16T10:54:27.079Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统: win10</p><p>Go版本: 1.17.3</p><p>集成开发环境版本: GoLand 2019.3</p><p>GoLand编辑器运行Go代码报错: package XXX is not in GOROOT (XXXXGosrcXXX)</p><p>问题分析:</p><p>报错显示它是在寻找GOROOT下的包，应该是路径问题，或者环境设置问题，输入go env检查了一下环境，发现GO111MODULE=on，编译器没有去gopath下找包，在 gomod 模式下，查找包就不会去 gopath 查找</p><p>解决方法:</p><p>打开cmd，然后输入以下命令(设置GO111MODULE为off即可):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE=off</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;操作系统: win10&lt;/p&gt;
&lt;p&gt;Go版本: 1.17.3&lt;/p&gt;
&lt;p&gt;集成开发环境版本: GoLand 2019.3&lt;/p&gt;
&lt;p&gt;GoLand编辑器运行Go代码报错: package XXX is not in GOROOT (XXXXGosrcXXX)&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git命令行提交代码到GitHub或GitLab的几个基础步骤</title>
    <link href="http://example.com/2022/01/15/Git%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0GitHub%E6%88%96GitLab%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E7%A1%80%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2022/01/15/Git%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0GitHub%E6%88%96GitLab%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E7%A1%80%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-01-15T14:51:18.000Z</published>
    <updated>2022-01-15T16:07:30.919Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们有一个项目，它有如下文件:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220115/Snipaste_2022-01-15_22-52-44.4dwu2qvyzlk0.webp"                      alt="Snipaste_2022-01-15_22-52-44"                ></p><p>其实只有两个文件是真正属于我们项目中的，红框中的<code>.idea</code>是Jetbrain这一款编辑器自动生成的，这里由于我已经提交过所以生成了红框之外的<code>.git</code>文件，这里我们看到这个<code>.git</code>文件夹的颜色有点透明，这表明这个是个隐藏文件，只不过我设置了显示隐藏文件所以能看到，实际上它是由Git命令<code>git init</code>生成的</p><p>这里我们假设项目中只有红框中的后两个文件，那么如何提交呢</p><p>第一步: <code>git init</code></p><p>命令解释: <strong>初始化(生成并做一些默认配置)一个空的git本地仓库</strong>，执行完上面的命令，当前目录下会自动生成<code>.git</code>隐藏文件夹，该隐藏文件夹就是<code>git</code>版本库</p><p>第二步: <code>git remote add origin 远程仓库地址</code></p><p>命令解释: 这是一个<strong>添加远程仓库的命令，<code>origin</code>是给远程仓库起的一个别名</strong></p><p>命令格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><p>第三步: <code>git add 要上传的文件</code></p><p>命令解释: <strong>添加要上传的文件，提交到暂缓区</strong>，如果全部添加就<code>git add .</code>，这里的<code>.</code>就代表当前目录下的所有文件</p><p>第四步: <code>git commit -m &quot;备注信息&quot;</code></p><p>命令解释: 这是<strong>将暂缓区内容提交到本地仓库</strong>，然后-m后面可以用引号包裹一些备注信息</p><p>扩展一下，将<code>-m</code>改成<code>-a</code>的话，那下次如果修改这个文件就需要执行<code>git add</code>命令，直接就提交到本地仓库，后面仍然可以用引号包裹一些备注信息</p><p>第五步: <code>git push -u origin master</code></p><p>命令格式: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>命令解释: 上面的命令是<strong>将本地的master分支推送到origin仓库的master分支</strong>；如果后者不存在，则会被新建，比如<code>git push origin master</code>，同时**<code>-u</code>指定origin为默认主机，后面就可以不加任何参数使用<code>git push</code>直接提交**</p><p>注意: 分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以<code>git pull</code>是&lt;远程分支&gt;:&lt;本地分支&gt;，而<code>git push</code>是&lt;本地分支&gt;:&lt;远程分支&gt;，上面命令没有写冒号，这表示本地和远程都是master分支，而如果带了冒号且省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，下面的命令表示删除origin仓库的master分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :master</span><br><span class="line">等同于:</span><br><span class="line">git push origin --delete master</span><br></pre></td></tr></table></figure><p>题外话: 在你接管别人的工作电脑之后，你需要重设提交的用户信息，包括用户名和邮箱:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;username&#x27;</span><br><span class="line">git config --global user.email test@abc.com</span><br></pre></td></tr></table></figure><p>如果<strong>去掉 <code>--global</code> 参数就表示只对当前仓库有效</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先我们有一个项目，它有如下文件:&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-sr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Goland编辑器配置GOROOT时报错The selected directory is not a valid home for Go SDK的解决方法</title>
    <link href="http://example.com/2022/01/15/Goland%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AEGOROOT%E6%97%B6%E6%8A%A5%E9%94%99The%20selected%20directory%20is%20not%20a%20valid%20home%20for%20Go%20SDK%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/01/15/Goland%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AEGOROOT%E6%97%B6%E6%8A%A5%E9%94%99The%20selected%20directory%20is%20not%20a%20valid%20home%20for%20Go%20SDK%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-01-15T14:20:28.509Z</published>
    <updated>2022-01-15T14:19:41.345Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统: win10</p><p>Go版本: 1.17.3</p><p>集成开发环境版本: GoLand 2019.3</p><p>GoLand指定Go版本报错: The selected directory is not a valid home for Go SDK</p><p>解决方法:</p><p>打开Go的安装目录，我这里的是: C:\Program Files\Go</p><p>然后进入这个文件: src\runtime\internal\sys\zversion.go</p><p>添加一条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const TheVersion = `go1.17.3`</span><br></pre></td></tr></table></figure><p>然后即可添加，添加C:\Program Files\Go这个路径即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;操作系统: win10&lt;/p&gt;
&lt;p&gt;Go版本: 1.17.3&lt;/p&gt;
&lt;p&gt;集成开发环境版本: GoLand 2019.3&lt;/p&gt;
&lt;p&gt;GoLand指定Go版本报错: The selected directory is not a valid home for Go S</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js逆向百度翻译(小白练手案例)</title>
    <link href="http://example.com/2022/01/14/js%E9%80%86%E5%90%91%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91(%E5%B0%8F%E7%99%BD%E7%BB%83%E6%89%8B%E6%A1%88%E4%BE%8B)/"/>
    <id>http://example.com/2022/01/14/js%E9%80%86%E5%90%91%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91(%E5%B0%8F%E7%99%BD%E7%BB%83%E6%89%8B%E6%A1%88%E4%BE%8B)/</id>
    <published>2022-01-14T09:51:30.000Z</published>
    <updated>2022-01-15T09:59:08.141Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们打开<a class="link"   href="https://fanyi.baidu.com/" >百度翻译<i class="fas fa-external-link-alt"></i></a>然后按F12打开抓包工具，我们点击Fetch/XHR，然后我们随便输入一个中文，点击翻译，我们需要关注的是v2transapiform=zh&amp;to=en这个post请求</p><p>首先我们输入你好然后回车(或者点击翻译触发)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_17-57-25.75uih5lkygg0.webp"                      alt="Snipaste_2022-01-14_17-57-25"                ></p><p>我们再翻译一个他们</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_17-59-20.2ajraqbd1ajo.webp"                      alt="Snipaste_2022-01-14_17-59-20"                ></p><p>再翻译一个我们</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_18-00-49.112slao8x7y8.webp"                      alt="Snipaste_2022-01-14_18-00-49"                ></p><p>这个过程中我们不难发现，formdata中变的就两个，一个是query，另一个是sign</p><p>现在我们知道了要构造请求的参数，以及变化且需要破解的参数，我们就可以着手去做了</p><p>我们先全局搜索下sign这个参数，我们发现搜索出来的东西很多，但是我定睛一看，发现有一个js文件中出现了很多的sign字样，其他的出现得比较少而且很多assign混在其中，这使我有想法去看看这个js文件(或者试试搜索/v2transapi，这个搜出来应该只有一个，而且可以很快定位表单数据)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_18-13-14.14mi2mf1urb4.webp"                      alt="Snipaste_2022-01-14_18-13-14"                ></p><p>那么我是如何定位到这个js文件的呢，首先看下面这个红框，我会记住这个js文件的名字和路径然后点击工具栏中的source，根据刚刚的路径就能快速定位到这个js文件</p><p>定位到之后，这个js文件的排版是很乱的，我们可以点击左下角的花括号去做一次排版，使我们看得更舒服，然后我们同样在这个js文件中做一次搜索，CTRL+F，然后搜索sign，会发现一共有13个，我们一个一个筛选，最终发现了第10个是最符合我们预期的，因为它最完整，和前面的formdata都一一对上了</p><p>我们在这个sign所在的行打上一个断点</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_18-19-45.54fn2luukw40.webp"                      alt="Snipaste_2022-01-14_18-19-45"                ></p><p>然后在网页中翻译一个词语，回车后会发现程序断在了刚刚打断点的前面，然后我们鼠标悬停在L(e)函数上，会出现一个悬浮框，然后我们点击悬浮框中的e(r)函数跳转进入e(r)函数</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_18-25-32.639vii0gnec0.webp"                      alt="Snipaste_2022-01-14_18-25-32"                ></p><p>跳转进e(r)函数是这样的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_18-27-16.773t1gfdjbk0.webp"                      alt="Snipaste_2022-01-14_18-27-16"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220115/Snipaste_2022-01-15_14-57-10.71lax0bd91c0.webp"                      alt="Snipaste_2022-01-15_14-57-10"                ></p><p>这里我们发现e(r)中牵扯到了其他两个函数，一个是a(r)，另一个是n(r, o)，所以这两个三个函数都要扣出来，然后我们发现还有一个未知的是window[1]</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220115/Snipaste_2022-01-15_15-14-47.66u2pvh2u500.webp"                      alt="Snipaste_2022-01-15_15-14-47"                ></p><p>这里有一句关键的代码我们来分析下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = <span class="literal">null</span> !== i ? i : (i = <span class="built_in">window</span>[l] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// 这是一个js中的三元表达式，而我们看到下面定义了var i = null;所以null !== i 为假所以u的值为(i = window[l] || &quot;&quot;)，u的值也就是window[1]</span></span><br></pre></td></tr></table></figure><p>我们经过多次调试发现这个u是一个确定的值，u=320305.131321201，我们可以直接用一个变量代替</p><p>下面就是我们抠出来的js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">jsCode = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    function a(r) &#123;</span></span><br><span class="line"><span class="string">        if (Array.isArray(r)) &#123;</span></span><br><span class="line"><span class="string">            for (var o = 0, t = Array(r.length); o &lt; r.length; o++)</span></span><br><span class="line"><span class="string">                t[o] = r[o];</span></span><br><span class="line"><span class="string">            return t</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return Array.from(r)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function n(r, o) &#123;</span></span><br><span class="line"><span class="string">        for (var t = 0; t &lt; o.length - 2; t += 3) &#123;</span></span><br><span class="line"><span class="string">            var a = o.charAt(t + 2);</span></span><br><span class="line"><span class="string">            a = a &gt;= &quot;</span>a<span class="string">&quot; ? a.charCodeAt(0) - 87 : Number(a),</span></span><br><span class="line"><span class="string">            a = &quot;</span>+<span class="string">&quot; === o.charAt(t + 1) ? r &gt;&gt;&gt; a : r &lt;&lt; a,</span></span><br><span class="line"><span class="string">            r = &quot;</span>+<span class="string">&quot; === o.charAt(t) ? r + a &amp; 4294967295 : r ^ a</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return r</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    var i = null;</span></span><br><span class="line"><span class="string">    function e(r) &#123;</span></span><br><span class="line"><span class="string">        var t = r.length;</span></span><br><span class="line"><span class="string">        t &gt; 30 &amp;&amp; (r = &quot;</span><span class="string">&quot; + r.substr(0, 10) + r.substr(Math.floor(t / 2) - 5, 10) + r.substr(-10, 10))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var u = void 0, l = &quot;</span><span class="string">&quot; + String.fromCharCode(103) + String.fromCharCode(116) + String.fromCharCode(107);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        u = null !== i ? i : (i = &#x27;320305.131321201&#x27; || &quot;</span><span class="string">&quot;) || &quot;</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">        for (var d = u.split(&quot;</span>.<span class="string">&quot;), m = Number(d[0]) || 0, s = Number(d[1]) || 0, S = [], c = 0, v = 0; v &lt; r.length; v++) &#123;</span></span><br><span class="line"><span class="string">            var A = r.charCodeAt(v);</span></span><br><span class="line"><span class="string">            128 &gt; A ? S[c++] = A : (2048 &gt; A ? S[c++] = A &gt;&gt; 6 | 192 : (55296 === (64512 &amp; A) &amp;&amp; v + 1 &lt; r.length &amp;&amp; 56320 === (64512 &amp; r.charCodeAt(v + 1)) ? (A = 65536 + ((1023 &amp; A) &lt;&lt; 10) + (1023 &amp; r.charCodeAt(++v)),</span></span><br><span class="line"><span class="string">            S[c++] = A &gt;&gt; 18 | 240,</span></span><br><span class="line"><span class="string">            S[c++] = A &gt;&gt; 12 &amp; 63 | 128) : S[c++] = A &gt;&gt; 12 | 224,</span></span><br><span class="line"><span class="string">            S[c++] = A &gt;&gt; 6 &amp; 63 | 128),</span></span><br><span class="line"><span class="string">            S[c++] = 63 &amp; A | 128)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        for (var p = m, F = &quot;</span><span class="string">&quot; + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(97) + (&quot;</span><span class="string">&quot; + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(54)), D = &quot;</span><span class="string">&quot; + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(51) + (&quot;</span><span class="string">&quot; + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(98)) + (&quot;</span><span class="string">&quot; + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(102)), b = 0; b &lt; S.length; b++)</span></span><br><span class="line"><span class="string">            p += S[b],</span></span><br><span class="line"><span class="string">            p = n(p, F);</span></span><br><span class="line"><span class="string">        return p = n(p, D),</span></span><br><span class="line"><span class="string">        p ^= s,</span></span><br><span class="line"><span class="string">        0 &gt; p &amp;&amp; (p = (2147483647 &amp; p) + 2147483648),</span></span><br><span class="line"><span class="string">        p %= 1e6,</span></span><br><span class="line"><span class="string">        p.toString() + &quot;</span>.<span class="string">&quot; + (p ^ m)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line">query = <span class="string">&#x27;汉语中文&#x27;</span></span><br><span class="line">sign = execjs.compile(jsCode).call(<span class="string">&quot;e&quot;</span>, query)</span><br><span class="line">print(sign)</span><br></pre></td></tr></table></figure><p>执行结果如下</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220115/Snipaste_2022-01-15_15-45-22.1whcvuiqyf5s.webp"                      alt="Snipaste_2022-01-15_15-45-22"                ></p><p>接下就简单了，构造一个post请求然后解析json数据，拿到翻译结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> test_baidu_jscode <span class="keyword">import</span> get_word_sign</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.baidu.com/v2transapi?from=zh&amp;to=en&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;97&quot;, &quot;Chromium&quot;;v=&quot;97&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/97.0.4692.71 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com/?aldtype=16047&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BIDUPSID=CF86A0FA51038D0CA02DA9FC43B164F5; PSTM=1639146064; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BAIDUID=CF86A0FA51038D0CFFCCCD08415508DA:FG=1; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;__yjs_duid=1_689d947b2f957f0b0d895ae63c66114f1639229602485; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BAIDUID_BFESS=3A9FDFF925D6EA302A897713757BE825:FG=1; BDRCVFR[iqrboYocJ-C]=kRxlD0AvOmRPjIMTz4WUvY; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BDRCVFR[fq555l35Iot]=EBD6F1bEM2tXZKdrHn8mvqV; delPer=0; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BDRCVFR[3lgytkvnri6]=mk3SLVN4HKm; H_PS_PSSID=; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;HISTORY_SWITCH=1; SOUND_PREFER_SWITCH=1; SOUND_SPD_SWITCH=1; APPGUIDE_10_0_2=1; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1642227471,1642227478; PSINO=6; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BA_HECTOR=2hag052ha52h010lkt1gu4ujh0r; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1642233008; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;ab_sr=1.0&#x27;</span></span><br><span class="line">              <span class="string">&#x27;.1_NjI2ZDk1Y2JmYzQ2ZTBiNTZmNWIyZjllNTU4ZjE4MmM1ZTI2ZmVjMjAyNmJhN2E5NGJhNWVjYmM2OWFmMTRjOTE0ZDQ2M2Y5MmY5N2RmNDUzNzYwNGJjZmZlYmVhZjZjMjgzYWI5YjhhZDJlNzg0NTNiZjRmNjhmMzU5ZDIxNzhkNzhiNDlmYTQyODhhMmZmOGM3MmM2NzhhMTlhZDU2NQ==; __yjs_st=2_NTA2ZGI3NzkyZGNmMzE4M2JkNzk0MTNkMWRmMzBkZmQwNjBlOTYzMDRhZjZmOTJhZGYzOGFjZWRlMTE1NjU4ZTA5ZDljMGQyMjA3Nzk0OWE3NmZhNThjY2YzYTBmMjVhMzAxYmQyZmFkM2VhMTc0YjE5MmJlM2VmZGZlMjhiMzkxMTQzMWY4NGYyNzZkNjM1YjE2ZjNhYjA4M2ViZmNmZDU2YWQzMzc0N2YzMGFiZGVhZTY5NzRiMjc0MzdlMjdjYTM2MGU2OGJmYTJhM2VhZWJiNzIxYWEyODc1ODZlZTBlOGYwOTM1ZWNkMjE4YzM0ZDFiMTY1YjgwMDNmZjhjZV83X2NjZDQ3NTdj &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_word_means</span>():</span></span><br><span class="line">    query = <span class="built_in">input</span>(<span class="string">&#x27;Please input you query words:&#x27;</span>)</span><br><span class="line">    sign = get_word_sign(query)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;from&quot;</span>: <span class="string">&quot;zh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: query,</span><br><span class="line">        <span class="string">&quot;transtype&quot;</span>: <span class="string">&quot;translang&quot;</span>,</span><br><span class="line">        <span class="string">&quot;simple_means_flag&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sign&quot;</span>: sign,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: <span class="string">&quot;cb25a0d7b1d3837fe7864c5c87559d98&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=data)</span><br><span class="line">    json_result = response.json()</span><br><span class="line">    result = jsonpath.jsonpath(json_result, <span class="string">&quot;$..word_means&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_word_means()</span><br></pre></td></tr></table></figure><p>下面附上完整代码:</p><p>js_reverse_baidufanyi:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function a(r) &#123;</span></span><br><span class="line"><span class="string">        if (Array.isArray(r)) &#123;</span></span><br><span class="line"><span class="string">            for (var o = 0, t = Array(r.length); o &lt; r.length; o++)</span></span><br><span class="line"><span class="string">                t[o] = r[o];</span></span><br><span class="line"><span class="string">            return t</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return Array.from(r)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function n(r, o) &#123;</span></span><br><span class="line"><span class="string">        for (var t = 0; t &lt; o.length - 2; t += 3) &#123;</span></span><br><span class="line"><span class="string">            var a = o.charAt(t + 2);</span></span><br><span class="line"><span class="string">            a = a &gt;= &quot;a&quot; ? a.charCodeAt(0) - 87 : Number(a),</span></span><br><span class="line"><span class="string">            a = &quot;+&quot; === o.charAt(t + 1) ? r &gt;&gt;&gt; a : r &lt;&lt; a,</span></span><br><span class="line"><span class="string">            r = &quot;+&quot; === o.charAt(t) ? r + a &amp; 4294967295 : r ^ a</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return r</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    var i = null;</span></span><br><span class="line"><span class="string">    function e(r) &#123;</span></span><br><span class="line"><span class="string">        var t = r.length;</span></span><br><span class="line"><span class="string">        t &gt; 30 &amp;&amp; (r = &quot;&quot; + r.substr(0, 10) + r.substr(Math.floor(t / 2) - 5, 10) + r.substr(-10, 10))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var u = void 0, l = &quot;&quot; + String.fromCharCode(103) + String.fromCharCode(116) + String.fromCharCode(107);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        u = null !== i ? i : (i = &#x27;320305.131321201&#x27; || &quot;&quot;) || &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (var d = u.split(&quot;.&quot;), m = Number(d[0]) || 0, s = Number(d[1]) || 0, S = [], c = 0, v = 0; v &lt; r.length; v++) &#123;</span></span><br><span class="line"><span class="string">            var A = r.charCodeAt(v);</span></span><br><span class="line"><span class="string">            128 &gt; A ? S[c++] = A : (2048 &gt; A ? S[c++] = A &gt;&gt; 6 | 192 : (55296 === (64512 &amp; A) &amp;&amp; v + 1 &lt; r.length &amp;&amp; 56320 === (64512 &amp; r.charCodeAt(v + 1)) ? (A = 65536 + ((1023 &amp; A) &lt;&lt; 10) + (1023 &amp; r.charCodeAt(++v)),</span></span><br><span class="line"><span class="string">            S[c++] = A &gt;&gt; 18 | 240,</span></span><br><span class="line"><span class="string">            S[c++] = A &gt;&gt; 12 &amp; 63 | 128) : S[c++] = A &gt;&gt; 12 | 224,</span></span><br><span class="line"><span class="string">            S[c++] = A &gt;&gt; 6 &amp; 63 | 128),</span></span><br><span class="line"><span class="string">            S[c++] = 63 &amp; A | 128)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        for (var p = m, F = &quot;&quot; + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(97) + (&quot;&quot; + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(54)), D = &quot;&quot; + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(51) + (&quot;&quot; + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(98)) + (&quot;&quot; + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(102)), b = 0; b &lt; S.length; b++)</span></span><br><span class="line"><span class="string">            p += S[b],</span></span><br><span class="line"><span class="string">            p = n(p, F);</span></span><br><span class="line"><span class="string">        return p = n(p, D),</span></span><br><span class="line"><span class="string">        p ^= s,</span></span><br><span class="line"><span class="string">        0 &gt; p &amp;&amp; (p = (2147483647 &amp; p) + 2147483648),</span></span><br><span class="line"><span class="string">        p %= 1e6,</span></span><br><span class="line"><span class="string">        p.toString() + &quot;.&quot; + (p ^ m)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_word_sign</span>(<span class="params">query</span>):</span></span><br><span class="line">    sign = execjs.<span class="built_in">compile</span>(jsCode).call(<span class="string">&quot;e&quot;</span>, query)</span><br><span class="line">    <span class="keyword">return</span> sign</span><br></pre></td></tr></table></figure><p>test_baidu_jscode:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> test_baidu_jscode <span class="keyword">import</span> get_word_sign</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.baidu.com/v2transapi?from=zh&amp;to=en&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;97&quot;, &quot;Chromium&quot;;v=&quot;97&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/97.0.4692.71 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com/?aldtype=16047&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BIDUPSID=CF86A0FA51038D0CA02DA9FC43B164F5; PSTM=1639146064; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BAIDUID=CF86A0FA51038D0CFFCCCD08415508DA:FG=1; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;__yjs_duid=1_689d947b2f957f0b0d895ae63c66114f1639229602485; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BAIDUID_BFESS=3A9FDFF925D6EA302A897713757BE825:FG=1; BDRCVFR[iqrboYocJ-C]=kRxlD0AvOmRPjIMTz4WUvY; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BDRCVFR[fq555l35Iot]=EBD6F1bEM2tXZKdrHn8mvqV; delPer=0; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BDRCVFR[3lgytkvnri6]=mk3SLVN4HKm; H_PS_PSSID=; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;HISTORY_SWITCH=1; SOUND_PREFER_SWITCH=1; SOUND_SPD_SWITCH=1; APPGUIDE_10_0_2=1; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1642227471,1642227478; PSINO=6; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;BA_HECTOR=2hag052ha52h010lkt1gu4ujh0r; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1642233008; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;ab_sr=1.0&#x27;</span></span><br><span class="line">              <span class="string">&#x27;.1_NjI2ZDk1Y2JmYzQ2ZTBiNTZmNWIyZjllNTU4ZjE4MmM1ZTI2ZmVjMjAyNmJhN2E5NGJhNWVjYmM2OWFmMTRjOTE0ZDQ2M2Y5MmY5N2RmNDUzNzYwNGJjZmZlYmVhZjZjMjgzYWI5YjhhZDJlNzg0NTNiZjRmNjhmMzU5ZDIxNzhkNzhiNDlmYTQyODhhMmZmOGM3MmM2NzhhMTlhZDU2NQ==; __yjs_st=2_NTA2ZGI3NzkyZGNmMzE4M2JkNzk0MTNkMWRmMzBkZmQwNjBlOTYzMDRhZjZmOTJhZGYzOGFjZWRlMTE1NjU4ZTA5ZDljMGQyMjA3Nzk0OWE3NmZhNThjY2YzYTBmMjVhMzAxYmQyZmFkM2VhMTc0YjE5MmJlM2VmZGZlMjhiMzkxMTQzMWY4NGYyNzZkNjM1YjE2ZjNhYjA4M2ViZmNmZDU2YWQzMzc0N2YzMGFiZGVhZTY5NzRiMjc0MzdlMjdjYTM2MGU2OGJmYTJhM2VhZWJiNzIxYWEyODc1ODZlZTBlOGYwOTM1ZWNkMjE4YzM0ZDFiMTY1YjgwMDNmZjhjZV83X2NjZDQ3NTdj &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_word_means</span>():</span></span><br><span class="line">    query = <span class="built_in">input</span>(<span class="string">&#x27;Please input you query words:&#x27;</span>)</span><br><span class="line">    sign = get_word_sign(query)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;from&quot;</span>: <span class="string">&quot;zh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: query,</span><br><span class="line">        <span class="string">&quot;transtype&quot;</span>: <span class="string">&quot;translang&quot;</span>,</span><br><span class="line">        <span class="string">&quot;simple_means_flag&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sign&quot;</span>: sign,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: <span class="string">&quot;cb25a0d7b1d3837fe7864c5c87559d98&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=data)</span><br><span class="line">    json_result = response.json()</span><br><span class="line">    result = jsonpath.jsonpath(json_result, <span class="string">&quot;$..word_means&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_word_means()</span><br></pre></td></tr></table></figure><p>运行效果:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220115/Snipaste_2022-01-15_17-53-39.2t4fdto41e00.webp"                      alt="Snipaste_2022-01-15_17-53-39"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先我们打开&lt;a class=&quot;link&quot;   href=&quot;https://fanyi.baidu.com/&quot; &gt;百度翻译&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;然后按F12打开抓包工具，我们点击Fetch/XHR，然后我们随</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>理解Python asyncio原理和简洁使用方式</title>
    <link href="http://example.com/2022/01/14/%E7%90%86%E8%A7%A3Python%20asyncio%E5%8E%9F%E7%90%86%E5%92%8C%E7%AE%80%E6%B4%81%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/01/14/%E7%90%86%E8%A7%A3Python%20asyncio%E5%8E%9F%E7%90%86%E5%92%8C%E7%AE%80%E6%B4%81%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</id>
    <published>2022-01-14T07:08:30.000Z</published>
    <updated>2022-01-14T09:20:00.256Z</updated>
    
    <content type="html"><![CDATA[<p>异步IO是个好东西，在网络读写场景中可以大大提高程序的并发能力，比如爬虫、web服务等；这样好的东西自然也要用到Python中，不过，在漫长的Python2时代，官方并没有推出一个自己的异步IO库，到了Python3.4才推出；我们先来看看异步IO在Python中的发展历史</p><p><strong>Python2的异步IO库</strong></p><p>Python2时代官方并没有异步IO的支持，但是有几个第三方库通过事件或者事件循环(Event Loop)实现了异步IO，它们是:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_15-14-33.4lfwna8nmx60.webp"                      alt="Snipaste_2022-01-14_15-14-33"                ></p><p><strong>Python3官方的异步IO库</strong></p><p>Python 3.4 加入了asyncio 库，使得Python有了支持异步IO的官方库。这个库，底层是事件循环(EventLoop)，上层是协程和任务。asyncio自从3.4 版本加入到最新的 3.7版一直在改进中，Python 3.4 刚开始的asyncio的协程还是基于生成器的，通过 yield from 语法实现，可以通过装饰器 @asyncio.coroutine (已过时)装饰一个函数来定义一个协程</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_15-21-07.5q7wn2pm54s0.webp"                      alt="Snipaste_2022-01-14_15-21-07"                ></p><p>Python 3.5 引入了两个新的关键字 await 和 async 用来替换 @asyncio.coroutine 和 yield from ，从语言本身来支持异步IO。从而使得异步编程更加简洁，并和普通的生成器区别开来.</p><p>注意： 对基于生成器的协程的支持已弃用，并计划在 Python 3.10 中移除。所以，写异步IO程序时只需使用 async 和 await 即可</p><p>Python 3.7 又进行了优化，把API分组为高层级API和低层级API。我们先看看下面的代码，发现与上面的有什么不同？</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220114/Snipaste_2022-01-14_15-22-28.78a59h5g84w0.webp"                      alt="Snipaste_2022-01-14_15-22-28"                ></p><p>除了用 async 替换 @asyncio.coroutine 和用 await 替换 yield from 外，最大的变化就是关于eventloop的代码不见了，只有一个 async.run()。这就是 3.7 的改进，把eventloop相关的API归入到低层级API，新引进run()作为高层级API让写应用程序的开发者调用，而不用再关心eventloop。除非你要写异步库（比如MySQL异步库）才会和eventloop打交道</p><p><strong>理解asyncio</strong></p><p>理解asyncio并不难，关键是要动起手来，接下来我们以下面代码为例动手实践一番，通过实践来理解它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">msg, sec</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enter hi(), &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"><span class="keyword">await</span> asyncio.sleep(sec)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;exit hi() &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"><span class="keyword">return</span> sec</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main() begin at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line"><span class="keyword">await</span> hi(i, i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main() end at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这段代码很简单，我们定义了两个协程函数(在def前面加上async)，其中hi()我们把它叫做功能函数，通过一个asyncio.sleep()来模拟一个耗时的异步IO操作，(比如下载网页)，main函数叫做入口函数，其实就是在main()里面调用hi()函数，通过不断改变main()的行为来理解异步IO()来理解异步IO(协程函数的调用)的运行过程</p><p><strong>1. 协程函数如何运行？</strong></p><p>首先我们要明确一个道理，hi()是一个协程函数，直接调用它返回的是一个协程对象，并没有真正运行它，把main函数改成如下，我们来仔细看看协程函数hi()的运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">msg, sec</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enter hi(), &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"><span class="keyword">await</span> asyncio.sleep(sec)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;exit hi() &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"><span class="keyword">return</span> sec</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main() begin at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">a = hi(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a is:&#x27;</span>, a)</span><br><span class="line">b = <span class="keyword">await</span> a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b is:&#x27;</span>, b)</span><br><span class="line"><span class="comment"># for i in range(1, 5):</span></span><br><span class="line"><span class="comment"># await hi(i, i)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main() end at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下面是运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main() begin at <span class="number">15</span>:<span class="number">56</span>:<span class="number">58</span></span><br><span class="line">a <span class="keyword">is</span>: &lt;coroutine <span class="built_in">object</span> hi at <span class="number">0x0000000002D6A9C8</span>&gt;</span><br><span class="line">enter hi(), a @<span class="number">15</span>:<span class="number">56</span>:<span class="number">58</span></span><br><span class="line">exit hi() a @<span class="number">15</span>:<span class="number">56</span>:<span class="number">59</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">1</span></span><br><span class="line">main() end at <span class="number">15</span>:<span class="number">56</span>:<span class="number">59</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>代码12行，我们像运行普通函数一样运行hi()，得到的a只是一个协程对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">is</span>: &lt;coroutine <span class="built_in">object</span> hi at <span class="number">0x0000000002D6A9C8</span>&gt;</span><br></pre></td></tr></table></figure><p>这个协程对象a虽然生成了，但是还没有运行，它需要一个时机，也就是asyncio的时间循环正在运行main函数，还没有空去运行它，代码第14行，通过await关键字告诉event_loop(时间循环)，main协程停在这里，你去运行其他协程叭，这时候envent_loop就去执行a协程，也就是去执行hi()函数里面的代码，等hi()运行完，event_loop再回到main协程继续从14行开始执行，把hi()的返回值赋值给b，这个时候b的值是1</p><p><strong>enve_loop在整个异步IO的过程中扮演着一个管家的角色，在不同的协程之间切换运行代码，切换是通过事件来进行的，通过await离开当前协程，当await的协程完成后又回到之前的协程对应的地方继续执行</strong></p><p><strong>2. 协程函数如何并发</strong></p><p>异步IO的好处就是并发，但如何实现呢?我们先来看一个不是并发的栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">msg, sec</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;enter hi(), &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(sec)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exit hi() &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> sec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() begin at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        b = <span class="keyword">await</span> hi(i, i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;b is:&quot;</span>, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() end at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这次，我们把main修改成一个for循环执行4次，看看它运行的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main() begin at <span class="number">16</span>:<span class="number">20</span>:<span class="number">22</span></span><br><span class="line">enter hi(), <span class="number">1</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">22</span></span><br><span class="line">exit hi() <span class="number">1</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">23</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">1</span></span><br><span class="line">enter hi(), <span class="number">2</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">23</span></span><br><span class="line">exit hi() <span class="number">2</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">25</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">2</span></span><br><span class="line">enter hi(), <span class="number">3</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">25</span></span><br><span class="line">exit hi() <span class="number">3</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">28</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">3</span></span><br><span class="line">enter hi(), <span class="number">4</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">28</span></span><br><span class="line">exit hi() <span class="number">4</span> @<span class="number">16</span>:<span class="number">20</span>:<span class="number">32</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">4</span></span><br><span class="line">main() end at <span class="number">16</span>:<span class="number">20</span>:<span class="number">32</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>整个过程从16:20:22到16:20:32结束，用了10秒，而hi()的执行时间分别是1秒，2秒，3秒，4秒总共10秒，也就是4个hi()虽然是异步的，但是是顺序执行的，没有并发</p><p>接下来，就到了真正并发实现了，通过asyncio.creat_task()即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">msg, sec</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;enter hi(), &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(sec)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exit hi() &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> sec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() begin at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    tasks = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        t = asyncio.create_task(hi(i, i))</span><br><span class="line">        tasks.append(t)</span><br><span class="line">        <span class="comment"># b = await hi(i, i)</span></span><br><span class="line">        <span class="comment"># print(&quot;b is:&quot;, b)</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tasks:</span><br><span class="line">        b = <span class="keyword">await</span> t</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;b is:&quot;</span>, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() end at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过create_task()我们在for循环里面生成了4个task(也就是协程对象)，但是这4个协程任务并没有被执行，他们需要等待一个时机:当前携程(main)遇到await</p><p>第二个for循环开始逐一await协程，此时event_loop就可以空出手来去执行那4个协程，过程大致如下:</p><p>先执行hi(1, 1) ，打印“enter hi(), 1 @16:30:18”，遇到await asyncio.sleep(1)，当前协程挂起；</p><p>接着执行 hi(2, 2)，执行打印命令，遇到await asyncio.sleep(2) ，当前协程挂起；</p><p>接着执行 hi(3, 3)，执行打印命令，遇到await asyncio.sleep(3) ，当前协程挂起；</p><p>接着执行 hi(4, 4)，执行打印命令，遇到await asyncio.sleep(4) ，当前协程挂起；</p><p>以上4步只是协程的切换和打印语句，执行非常快，我们可以任务它们是同时执行起来的。</p><p>1秒后，hi(1,1)的sleep结束它会发出事件告诉 event_loop 我await结束了，过来执行我，event_loop 此时空闲就来执行它，继续执行sleep后面的打印语句；</p><p>2秒后，hi(2,2)的sleep结束它会发出事件告诉 event_loop 我await结束了，过来执行我，event_loop 此时空闲就来执行它，继续执行sleep后面的打印语句；</p><p>3秒后，hi(3,3)的sleep结束它会发出事件告诉 event_loop 我await结束了，过来执行我，event_loop 此时空闲就来执行它，继续执行sleep后面的打印语句；</p><p>4秒后，hi(4,4)的sleep结束它会发出事件告诉 event_loop 我await结束了，过来执行我，event_loop 此时空闲就来执行它，继续执行sleep后面的打印语句；</p><p>4秒后，生成的4个协程任务就都执行完毕。总耗时4秒，也就是我们的4个任务并发完成了。</p><p>上面代码的运行结果为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main() begin at <span class="number">16</span>:<span class="number">30</span>:<span class="number">17</span></span><br><span class="line">enter hi(), <span class="number">1</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">17</span></span><br><span class="line">enter hi(), <span class="number">2</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">17</span></span><br><span class="line">enter hi(), <span class="number">3</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">17</span></span><br><span class="line">enter hi(), <span class="number">4</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">17</span></span><br><span class="line">exit hi() <span class="number">1</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">18</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">1</span></span><br><span class="line">exit hi() <span class="number">2</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">19</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">2</span></span><br><span class="line">exit hi() <span class="number">3</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">20</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">3</span></span><br><span class="line">exit hi() <span class="number">4</span> @<span class="number">16</span>:<span class="number">30</span>:<span class="number">21</span></span><br><span class="line">b <span class="keyword">is</span>: <span class="number">4</span></span><br><span class="line">main() end at <span class="number">16</span>:<span class="number">30</span>:<span class="number">21</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>3. 错误的运行</strong></p><p>上面的并发很完美，但有时候你可能会犯错，比如下面的main()，你可能只是并发hi()，但不需要返回它的结果，于是就有了下面的main()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">msg, sec</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;enter hi(), &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(sec)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exit hi() &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> sec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() begin at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        asyncio.create_task(hi(i, i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() end at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下面是运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main() begin at <span class="number">16</span>:<span class="number">45</span>:<span class="number">42</span></span><br><span class="line">main() end at <span class="number">16</span>:<span class="number">45</span>:<span class="number">42</span></span><br><span class="line">enter hi(), <span class="number">1</span> @<span class="number">16</span>:<span class="number">45</span>:<span class="number">42</span></span><br><span class="line">enter hi(), <span class="number">2</span> @<span class="number">16</span>:<span class="number">45</span>:<span class="number">42</span></span><br><span class="line">enter hi(), <span class="number">3</span> @<span class="number">16</span>:<span class="number">45</span>:<span class="number">42</span></span><br><span class="line">enter hi(), <span class="number">4</span> @<span class="number">16</span>:<span class="number">45</span>:<span class="number">42</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>main()的for循环只是生成了4个task协程，然后就退出了，event_loop收到main退出的事件就空出来去执行了那4个协程，进去了但都碰到了sleep，然后envent_loop就空闲了，这个时候run()就收到了main()执行完毕的事件信号，run()就执行完了，最后执行print，整个程序就退出了，从main退出到整个程序退出那就是一瞬间的事情，那4个协程还在傻傻地睡着，如果把它们也加入任务列表就不会这样了，如果不加入，那默认任务列表就只有main函数，其他的只是微微带过，如果main函数结束了，它们也会立马结束</p><p>我们如果在main()中加入一个sleep会出现什么结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">msg, sec</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;enter hi(), &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(sec)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exit hi() &#123;&#125; @&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> sec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() begin at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        asyncio.create_task(hi(i, i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;mian() sleep at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() end at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main() begin at <span class="number">17</span>:06:<span class="number">59</span></span><br><span class="line">mian() sleep at <span class="number">17</span>:06:<span class="number">59</span></span><br><span class="line">enter hi(), <span class="number">1</span> @<span class="number">17</span>:06:<span class="number">59</span></span><br><span class="line">enter hi(), <span class="number">2</span> @<span class="number">17</span>:06:<span class="number">59</span></span><br><span class="line">enter hi(), <span class="number">3</span> @<span class="number">17</span>:06:<span class="number">59</span></span><br><span class="line">enter hi(), <span class="number">4</span> @<span class="number">17</span>:06:<span class="number">59</span></span><br><span class="line">exit hi() <span class="number">1</span> @<span class="number">17</span>:07:<span class="number">00</span></span><br><span class="line">exit hi() <span class="number">2</span> @<span class="number">17</span>:07:01</span><br><span class="line">main() end at <span class="number">17</span>:07:01</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>可以看到这边main函数sleep了两秒就让两次hi函数执行完毕，如果我们让main函数sleep更长时间那就4个hi函数都会执行完毕</p><p>说明，功能函数如果不加入任务列表，那就要求入口函数有足够长的执行时间，因为在入口函数的长执行时间中就会有机会去执行功能函数</p><p><strong>4. 如何判断是否要把函数定义为协程函数</strong></p><p>定义一个协程函数很简单，在def前面加async即可，那么如何判断一个函数该不该定义为协程函数呢?</p><p>记住一个原则: 如果该函数是要进行IO操作(读写网络、读写文件、读写数据库等)，就把它定义为协程函数，否则就是普通函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;异步IO是个好东西，在网络读写场景中可以大大提高程序的并发能力，比如爬虫、web服务等；这样好的东西自然也要用到Python中，不过，在漫长的Python2时代，官方并没有推出一个自己的异步IO库，到了Python3.4才推出；我们先来看看异步IO在Python中的发展历史</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python 中__new__和__init__的异同点</title>
    <link href="http://example.com/2022/01/14/Python%20%E4%B8%AD__new__%E5%92%8C__init__%E7%9A%84%E5%BC%82%E5%90%8C%E7%82%B9/"/>
    <id>http://example.com/2022/01/14/Python%20%E4%B8%AD__new__%E5%92%8C__init__%E7%9A%84%E5%BC%82%E5%90%8C%E7%82%B9/</id>
    <published>2022-01-14T03:50:30.000Z</published>
    <updated>2022-01-14T07:01:13.653Z</updated>
    
    <content type="html"><![CDATA[<p>同: 二者均是Python面向对象语言中的函数，__new__比较少用，__init__则用的比较多</p><p>异: </p><ul><li><code>__new__</code>是在实例创建之前被调用的，因为它的任务就是创建实例然后直接返回该实例对象，是个<strong>静态方法</strong></li><li><code>__init__</code>是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值，通常在初始化一个类实例的时候被调用，是一个<strong>实例方法</strong></li></ul><p>总结来说也就是: <code>__new__</code>先被调用，<code>__init__</code>后被调用，<code>__new__</code>的返回值（实例）将传递给<code>__init__</code>方法的第一个参数，然后<code>__init__</code>给这个实例设置一些参数</p><p>一些说明:</p><ol><li>继承自object的新式类才有<code>__new__</code></li><li><code>__new__</code>至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别</li><li><code>__new__</code><strong>必须要有返回值</strong>，返回实例化出来的实例，这点在自己实现<code>__new__</code>时要特别注意，可以return父类<code>__new__</code>出来的实例，或者是直接object<code>__new__</code>出来的 实例</li><li><code>__init__</code>有一个参数self，这个就是<code>__new__</code>返回的实例，<code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始化的操作，<code>__init__</code><strong>不需要返回值</strong></li><li>如果<code>__new__</code>创建的是当前类的实例，会自动调用<code>__init__</code>函数，通过return语句里面调用的<code>__new__</code>函数的第一个参数是cls来保证是当前类实例，如果是其它类的类名，那么实际创建返回的就是其他类的实例</li><li>在定义子类时没有重新定义<code>__new__</code>时，Python默认是调用该类的直接父类的<code>__new__</code>来构造该类的实例，如果该类的父类也没有重写<code>__new__</code>，那么将一直按此规矩追溯至object的<code>__new__</code>方法，因为object是所有新式类的基类</li><li>而如果子类中重写了<code>__new__</code>，那么你可以自由选择任意一个的其他新式类(必定要是新式类，只有新式类必定都有<code>__new__</code>，因为所有新式类都是object的后代，而经典类则没有<code>__new__</code>方法)的<code>__new__</code>方法来制造实例</li><li>对于子类的<code>__init__</code>，其调用规制跟<code>__new__</code>是一致的，当然如果子类和父类的<code>__init__</code>都想调用，可以在子类的<code>__init__</code>中加入对父类<code>__init__</code>的调用</li><li>我们在使用时，尽量使用<code>__init__</code>，不要去自定义<code>__new__</code>，因为这两者在继承派生时的特性还是很不一样的</li><li><strong>将类比作制造商，<code>__new__</code>方法就是前期的原料购买环节，<code>__init__</code>方法就是在原有材料的基础上加工、初始化商品化环节</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;同: 二者均是Python面向对象语言中的函数，__new__比较少用，__init__则用的比较多&lt;/p&gt;
&lt;p&gt;异: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__new__&lt;/code&gt;是在实例创建之前被调用的，因为它的任务就是创建实例然后直接返回该实例对象，是个&lt;st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS逆向的时候Python如何调用JavaScript代码呢</title>
    <link href="http://example.com/2022/01/14/JS%E9%80%86%E5%90%91%E7%9A%84%E6%97%B6%E5%80%99Python%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8JavaScript%E4%BB%A3%E7%A0%81%E5%91%A2/"/>
    <id>http://example.com/2022/01/14/JS%E9%80%86%E5%90%91%E7%9A%84%E6%97%B6%E5%80%99Python%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8JavaScript%E4%BB%A3%E7%A0%81%E5%91%A2/</id>
    <published>2022-01-14T03:35:30.000Z</published>
    <updated>2022-01-14T03:37:04.471Z</updated>
    
    <content type="html"><![CDATA[<p>今天在逛崔庆才博客的时候发现这个讲得还不错，是关于Python如何调用JS代码的，点击<a class="link"   href="https://cuiqingcai.com/9581.html" >这里<i class="fas fa-external-link-alt"></i></a>调转阅读</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在逛崔庆才博客的时候发现这个讲得还不错，是关于Python如何调用JS代码的，点击&lt;a class=&quot;link&quot;   href=&quot;https://cuiqingcai.com/9581.html&quot; &gt;这里&lt;i class=&quot;fas fa-external-link-al</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python爬虫登录的恩恩怨怨</title>
    <link href="http://example.com/2022/01/14/Python%E7%88%AC%E8%99%AB%E7%99%BB%E5%BD%95%E7%9A%84%E6%81%A9%E6%81%A9%E6%80%A8%E6%80%A8/"/>
    <id>http://example.com/2022/01/14/Python%E7%88%AC%E8%99%AB%E7%99%BB%E5%BD%95%E7%9A%84%E6%81%A9%E6%81%A9%E6%80%A8%E6%80%A8/</id>
    <published>2022-01-14T02:58:30.000Z</published>
    <updated>2022-01-14T03:08:33.838Z</updated>
    
    <content type="html"><![CDATA[<p>曾几何时，登录是一件很简单的事情，一个账户及其密码，POST给服务器，服务器验证通过即可。那是一个美好的朴素年代，服务器不设防，用户不贪婪。然而，时过境迁，人心变了。越来越多的人想要收集数据，爬虫也就越来越多；而网站就有了网络请求压力，也有了死守数据私心。天下熙熙，皆为利来；天下攘攘，皆为利往。现在的互联网，就成了一个利字当头、魔高一尺道高一丈的战场</p><p>如今，各种网站都设置了复杂的登录这堵高高的墙来阻止爬虫大量甚至全部获取网站的数据。比如，12306的验证码是点选图片，微博是变形的字母验证码，知乎是点选倒立的汉字，哔哩哔哩通过拖动滑块拼图来验证。这些<em>变态的验证</em>过程都是加入人的交互来防止爬虫自动登录，从而阻止爬虫自动化的大批量抓取</p><p>小猿们都已经知道，HTTP协议是无状态的，用户登录的状态靠cookies在浏览器和服务器之间来回传送来记录。完成登录后，cookies在一定时间范围内是保持不变的，直接获得这个cookies给爬虫用，就可以让爬虫有了登录的状态，进而进行后面的抓取，当然，这个抓取只能持续到cookies过期之前</p><p>在这里我们来看看爬虫登录的三种层次，完成登录这个过程，最好是程序自动化实现，那么你写好程序就可以一边玩去了，然而好多时候，事情不是那么让人省心，登录还需要人工参与一下下；总结下来，实现登陆有以下三种层次:</p><ol><li>简单的PODT账户密码就可以实现自动化登录</li><li>通过程序可以模拟出登录流程实现自动化登录</li><li>登录需要人工智能介入，人工智能实现自动化登录</li></ol><p>第一个层次，使用requests模块加一两行代码就可以实现，关键是现如今很少有这样的良心网站了</p><p>第二个层次，是很有挑战性的，也是爬虫界人士力求达到的层次</p><p>第三个层次，就需要接入人工智能，利用人工智能识别验证码</p><p>由此看来，登录状态的cookies的获取，主要还是靠模拟登录流程或者人工智能识别验证码为主</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;曾几何时，登录是一件很简单的事情，一个账户及其密码，POST给服务器，服务器验证通过即可。那是一个美好的朴素年代，服务器不设防，用户不贪婪。然而，时过境迁，人心变了。越来越多的人想要收集数据，爬虫也就越来越多；而网站就有了网络请求压力，也有了死守数据私心。天下熙熙，皆为利来</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python中eval函数的用法</title>
    <link href="http://example.com/2022/01/14/Python%E4%B8%ADeval%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2022/01/14/Python%E4%B8%ADeval%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2022-01-14T02:46:30.000Z</published>
    <updated>2022-01-14T02:49:54.758Z</updated>
    
    <content type="html"><![CDATA[<p>eval()函数用来执行一个字符串表达式，并返回表达式的值</p><p>以下是eval()函数的语法:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(expression[, <span class="built_in">globals</span>[, <span class="built_in">locals</span>]])</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>( <span class="string">&#x27;3 * x&#x27;</span> )</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;pow(2,2)&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;2 + 2&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">81</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;n + 4&quot;</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;eval()函数用来执行一个字符串表达式，并返回表达式的值&lt;/p&gt;
&lt;p&gt;以下是eval()函数的语法:&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python中format函数的用法</title>
    <link href="http://example.com/2022/01/14/Python%E4%B8%ADformat%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2022/01/14/Python%E4%B8%ADformat%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2022-01-14T02:36:30.000Z</published>
    <updated>2022-01-14T02:45:06.381Z</updated>
    
    <content type="html"><![CDATA[<p>Python2.6开始便新增了一种格式化字符串的str.format()函数，基本语法是通过<code>&#123;&#125;</code>和<code>:</code>来代替以前的<code>%</code></p><p>format函数可以接受不限个数的参数，位置可以不按顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)    <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">&#x27;world hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以设置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;菜鸟教程&quot;</span>, url=<span class="string">&quot;www.runoob.com&quot;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过字典设置参数</span></span><br><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;菜鸟教程&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www.runoob.com&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(**site))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过列表索引设置参数</span></span><br><span class="line">my_list = [<span class="string">&#x27;菜鸟教程&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class="built_in">format</span>(my_list))  <span class="comment"># &quot;0&quot; 是必须的</span></span><br></pre></td></tr></table></figure><p>也可以向str.format()传入对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssignValue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line">my_value = AssignValue(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class="built_in">format</span>(my_value))  <span class="comment"># &quot;0&quot; 是可选的</span></span><br></pre></td></tr></table></figure><p>format还可以进行数字格式化，这个用到的不多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python2.6开始便新增了一种格式化字符串的str.format()函数，基本语法是通过&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;和&lt;code&gt;:&lt;/code&gt;来代替以前的&lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;format函数可以接受不限个数的参数，位置可</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python十大高级用法</title>
    <link href="http://example.com/2022/01/13/Python%E5%8D%81%E5%A4%A7%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2022/01/13/Python%E5%8D%81%E5%A4%A7%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</id>
    <published>2022-01-13T09:44:01.936Z</published>
    <updated>2022-01-13T09:43:48.237Z</updated>
    
    <content type="html"><![CDATA[<p>参考自:<a class="link"   href="https://syjun.vip/archives/185.html" >https://syjun.vip/archives/185.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考自:&lt;a class=&quot;link&quot;   href=&quot;https://syjun.vip/archives/185.html&quot; &gt;https://syjun.vip/archives/185.html&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js混淆-动态cookie题目详解</title>
    <link href="http://example.com/2022/01/13/js%E6%B7%B7%E6%B7%86-%E5%8A%A8%E6%80%81cookie%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/01/13/js%E6%B7%B7%E6%B7%86-%E5%8A%A8%E6%80%81cookie%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-01-13T08:11:30.000Z</published>
    <updated>2022-01-13T09:40:28.394Z</updated>
    
    <content type="html"><![CDATA[<p>第二题是js混线，动态cookie，这也是提取全部5页的数据，题目链接:<a class="link"   href="https://match.yuanrenxue.com/match/2" >https://match.yuanrenxue.com/match/2<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220113/Snipaste_2022-01-13_16-13-29.3z6b7ki67ye0.webp"                      alt="Snipaste_2022-01-13_16-13-29"                ></p><p>我们先来抓下包叭，打开F12同样会在断点处断住，然后我们只需要右键点击Never parsed here即可，随后我们可以看到第一页的十条数据</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220113/Snipaste_2022-01-13_16-19-31.7krfqxq74xc0.webp"                      alt="Snipaste_2022-01-13_16-19-31"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220113/Snipaste_2022-01-13_16-21-02.2xas5aqu4jm0.webp"                      alt="Snipaste_2022-01-13_16-21-02"                ></p><p>这是个xhr请求，而且它只有一个参数page</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220113/Snipaste_2022-01-13_16-22-37.38mf806puvs0.webp"                      alt="Snipaste_2022-01-13_16-22-37"                ></p><p>实际上这个题它这边已经说了是个动态cookie，所以是一定要有cookie才能去访问的，然后，一般情况下，如果我们碰到一个类似的网页，如果只是当时即时使用的话可以直接复制这个cookie去拿数据，但我们都知道cookie是具有一定时效性的，时间久了这种操作是不可取的，所以我们就需要去分析cookie是怎么来的，是本地生成的还是服务器返回的一个set-cookie，如果是服务器返回的，那就可以模拟浏览器的请求去开一个session即可，如果是本地生成的话就得分析cookie是怎么本地生成的，然后把这个cookie给它凑出来，扣js或者是怎么样把这个cookie给生成出来，如果是两种方法都有的话那就两种方法结合起来用</p><p>我们继续抓一下包，点击第二页会弹出一个框说cookie失效，说明合格cookie的有效期是比较短的，点击确定后就会获取一个新的cookie，然后进入页面，以下是第一页抓到的包，我们看到这边是有cookie的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220113/Snipaste_2022-01-13_16-39-04.184fqz9f177g.webp"                      alt="Snipaste_2022-01-13_16-39-04"                ></p><p>然后我们要拿到的数据就是它返回的数据，也就是Preview中的数据</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/stormwasd/image-hosting@master/20220113/Snipaste_2022-01-13_16-43-10.4q3e6sbq69w0.webp"                      alt="Snipaste_2022-01-13_16-43-10"                ></p><p>未完待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第二题是js混线，动态cookie，这也是提取全部5页的数据，题目链接:&lt;a class=&quot;link&quot;   href=&quot;https://match.yuanrenxue.com/match/2&quot; &gt;https://match.yuanrenxue.com/match/2&lt;i</summary>
      
    
    
    
    
  </entry>
  
</feed>
